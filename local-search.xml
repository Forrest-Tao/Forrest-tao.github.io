<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>grpc初探</title>
    <link href="/2023/09/11/grpc%E5%88%9D%E6%8E%A2/"/>
    <url>/2023/09/11/grpc%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是rpc"><a href="#什么是rpc" class="headerlink" title="什么是rpc"></a>什么是rpc</h2><p>RPC（Remote Procedure Call，远程过程调用）是一种计算机编程模型和协议，允许一个程序在另一个地址空间（通常是远程计算机上）执行函数或过程调用，就像调用本地函数一样。RPC 的目标是使分布式系统中的不同组件能够相互通信和协作，而不必手动编写复杂的网络通信代码。(chatGPT解释)</p><p><a href="https://www.helloimg.com/images/2023/09/11/onFdzt.png">https://www.helloimg.com/images/2023/09/11/onFdzt.png</a></p><h2 id="是什么grpc"><a href="#是什么grpc" class="headerlink" title="是什么grpc"></a>是什么grpc</h2><p>gRPC（gRPC Remote Procedure Call）是一种高性能、跨语言的远程过程调用（RPC）框架，由Google开发并开源。它建立在HTTP&#x2F;2协议上，使用Protocol Buffers（protobuf）作为接口定义语言（IDL），支持多种编程语言。gRPC的目标是使分布式系统之间的通信更加高效、可靠和易于扩展。(chatGPT解释)</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><h3 id="编写-proto文件"><a href="#编写-proto文件" class="headerlink" title="编写 proto文件"></a>编写 proto文件</h3><h4 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package =<span class="hljs-string">&quot;server/pb&quot;</span>;<br><br><span class="hljs-keyword">package</span> pb;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Greeter</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> SayHello (HelloRequest) <span class="hljs-keyword">returns</span> (HelloResponse)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloRequest</span>&#123;<br>  <span class="hljs-type">string</span>  name =<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloResponse</span>&#123;<br>  <span class="hljs-type">string</span>  reply=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Client-端"><a href="#Client-端" class="headerlink" title="Client 端"></a>Client 端</h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package =<span class="hljs-string">&quot;client/pb&quot;</span>;<br><br><span class="hljs-keyword">package</span> pb;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Greeter</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> SayHello (HelloRequest) <span class="hljs-keyword">returns</span> (HelloResponse)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloRequest</span>&#123;<br>  <span class="hljs-type">string</span>  name =<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloResponse</span>&#123;<br>  <span class="hljs-type">string</span>  reply=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="执行-proto文件"><a href="#执行-proto文件" class="headerlink" title="执行 proto文件"></a>执行 proto文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">protoc --go_out=. --go_opt=paths=source_relative \<br>--go-grpc_out=. --go-grpc_opt=paths=source_relative \<br>pb/hello.proto<br></code></pre></td></tr></table></figure><h3 id="编写-逻辑代码"><a href="#编写-逻辑代码" class="headerlink" title="编写 逻辑代码"></a>编写 逻辑代码</h3><h4 id="Server端-1"><a href="#Server端-1" class="headerlink" title="Server端"></a>Server端</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;microService_Learning/grpc_demo/server/pb&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class="hljs-comment">// hello server</span><br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedGreeterServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SayHello(ctx context.Context, request *pb.HelloRequest) (*pb.HelloResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;pb.HelloResponse&#123;Reply: <span class="hljs-string">&quot;Hello&quot;</span> + request.Name&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:9091&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;net.Listen failed,err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>s := grpc.NewServer()<br>pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)<br><span class="hljs-keyword">if</span> err = s.Serve(listener); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;s.Serve failed,err:%v\n&quot;</span>, err)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//server/main.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;microService_Learning/grpc_demo/server/pb&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class="hljs-comment">// hello_client</span><br><br><span class="hljs-keyword">const</span> (<br>defaultName = <span class="hljs-string">&quot;world&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br><span class="hljs-comment">// 注意 flag.String 返回的是 *string</span><br>addr = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:9092&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br>name = flag.String(<span class="hljs-string">&quot;name&quot;</span>, defaultName, <span class="hljs-string">&quot;Name to greet&quot;</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-comment">// 连接到server端，此处禁用安全传输</span><br><span class="hljs-comment">//conn, err := grpc.Dial(*addr, grpc.WithInsecure())</span><br>conn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;grpc.Dail failed,err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//执行rpc调用 并打印返回相应的值</span><br>client := pb.NewGreeterClient(conn)<br>ctx, cancel := context.WithTimeout(context.Background(), time.Millisecond*<span class="hljs-number">3</span>)<br><span class="hljs-keyword">defer</span> cancel()<br>r, err := client.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;counld not greet :%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>log.Printf(<span class="hljs-string">&quot;Greeting :,%s&quot;</span>, r.GetReply())<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>grpc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Golang 学习路线总结】</title>
    <link href="/2023/09/09/%E3%80%90Golang-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E6%80%BB%E7%BB%93%E3%80%91/"/>
    <url>/2023/09/09/%E3%80%90Golang-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E6%80%BB%E7%BB%93%E3%80%91/</url>
    
    <content type="html"><![CDATA[<ul><li><p>Golang设计模式 <a href="https://www.bilibili.com/video/BV1Eg411m7rV/?spm_id_from=333.999.0.0&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">Easy搞定Golang设计模式(Go语言设计模式，如此简单)_哔哩哔哩_bilibili</a></p></li><li><p>B+树 <a href="https://www.bilibili.com/video/BV1kT411N7it/?spm_id_from=333.999.0.0&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">B+树,B-link树,LSM树…一个视频带你了解常用存储引擎数据结构（中）_哔哩哔哩_bilibili</a></p></li><li><p>TCP IP 八股 <a href="https://www.bilibili.com/video/BV1Mp4y1x7eX/?spm_id_from=pageDriver&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">tcp&#x2F;ip协议第10讲：tcp四次挥手以及wireshark抓包验证_哔哩哔哩_bilibili</a></p></li><li><p>Kubernetes <a href="https://www.bilibili.com/video/BV1MT411x7GH/?spm_id_from=333.999.0.0&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">完整版Kubernetes（K8S）全套入门+微服务实战项目，带你一站式深入掌握K8S核心能力_哔哩哔哩_bilibili</a></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>傻蛋速成python</title>
    <link href="/2023/09/07/%E5%82%BB%E8%9B%8B%E9%80%9F%E6%88%90python/"/>
    <url>/2023/09/07/%E5%82%BB%E8%9B%8B%E9%80%9F%E6%88%90python/</url>
    
    <content type="html"><![CDATA[<p>格式化 </p><ul><li></li></ul><p>%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;%s is %d years old&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> % (<span class="hljs-string">&quot;yst&quot;</span>,<span class="hljs-number">123</span>)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;yst is 123 years old&#x27;</span><br></code></pre></td></tr></table></figure><p>format</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#123;:d&#125; + &#123;:d&#125; =&#123;:d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1</span>+<span class="hljs-number">21</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#123;1:d&#125; + &#123;0:d&#125; =&#123;2:d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1</span>+<span class="hljs-number">21</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#123;0:d&#125; + &#123;0:d&#125; + &#123;1:d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>)<br></code></pre></td></tr></table></figure><p>f</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">f `&#123;name&#125; <span class="hljs-keyword">is</span> &#123;age&#125; years old`<br></code></pre></td></tr></table></figure><p>结构控制 </p><p>for语句</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">scores=[<span class="hljs-number">90</span>,<span class="hljs-number">45</span>,<span class="hljs-number">85</span>,<span class="hljs-number">76</span>,<span class="hljs-number">89</span>]<br><br><span class="hljs-keyword">for</span> score <span class="hljs-keyword">in</span> scores:<br>    <span class="hljs-keyword">if</span> score &gt;=<span class="hljs-number">60</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;PASS&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed&quot;</span>)       <br></code></pre></td></tr></table></figure><p>in range</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">scores=[<span class="hljs-number">90</span>,<span class="hljs-number">45</span>,<span class="hljs-number">85</span>,<span class="hljs-number">76</span>,<span class="hljs-number">89</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-built_in">len</span>(scores)):<br>    <span class="hljs-built_in">print</span>(scores[i])<br><br></code></pre></td></tr></table></figure><p>in enumerate</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">scores = [<span class="hljs-number">90</span>, <span class="hljs-number">45</span>, <span class="hljs-number">85</span>, <span class="hljs-number">76</span>, <span class="hljs-number">89</span>, <span class="hljs-number">900</span>]<br><br><span class="hljs-keyword">for</span> i, score <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(scores, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(i, score)<br><br><br></code></pre></td></tr></table></figure><p>in zip</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">scores = [<span class="hljs-number">90</span>, <span class="hljs-number">45</span>, <span class="hljs-number">85</span>, <span class="hljs-number">76</span>, <span class="hljs-number">89</span>, <span class="hljs-number">900</span>]<br>names = [<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>]<br><br><span class="hljs-keyword">for</span> name, score <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(names, scores):<br>    <span class="hljs-built_in">print</span>(name, score)<br><br></code></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>hash仅支持 immutable的对象 str &#x2F;int &#x2F;bool&#x2F;float&#x2F;tuple</p><h2 id="func"><a href="#func" class="headerlink" title="func"></a>func</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foobar</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this is a python func&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name=<span class="hljs-string">&quot;Alice&quot;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;this is a comment&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;hello <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br><br><br>foobar()<br>greet()<br>greet(<span class="hljs-string">&quot;name&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    res = x + y<br>    <span class="hljs-keyword">return</span> res<br><br><br>sum_res = add(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p>闭包 函数作为返回值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 函数的闭包</span><br><span class="hljs-comment"># 一个函数A中定义了函数B，并且另函数B调用了函数A的参数，且返回函数B作为返回值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>(<span class="hljs-params">y</span>):<br>        <span class="hljs-keyword">return</span> x + y<br><br>    <span class="hljs-keyword">return</span> f3<br><br><span class="hljs-built_in">print</span>(f2(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>))<br><br></code></pre></td></tr></table></figure><p>lambda表达式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * x ** <span class="hljs-number">2</span> + <span class="hljs-number">9</span> * x + <span class="hljs-number">10</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">diff</span>(<span class="hljs-params">x, func</span>):<br>    delta = <span class="hljs-number">1e-6</span><br>    <span class="hljs-keyword">return</span> (func(x + delta) - func(x)) / delta<br><br><br><span class="hljs-built_in">print</span>(diff(<span class="hljs-number">2</span>, f))<br><br><span class="hljs-built_in">print</span>(diff(<span class="hljs-number">1</span>, <span class="hljs-keyword">lambda</span> x: <span class="hljs-number">2</span> * x ** <span class="hljs-number">3</span> + <span class="hljs-number">9</span> * x + <span class="hljs-number">9</span>))<br><br></code></pre></td></tr></table></figure><p><code>Chatgpt对于 python中函数是一等公民的解释</code></p><p>在编程语言中，”一等公民”（First-Class Citizen）是一个概念，用来描述对某种特性（通常是数据类型）的支持程度。如果一种编程语言将某个特性视为一等公民，那么该特性就会享有与其他标准数据类型相同的权利和特性。在Python中，函数被视为一等公民，这意味着函数在语言中具有特殊的地位和权利：</p><p>以下是Python中函数被称为一等公民的原因和表现：</p><ol><li><p><strong>可以赋值给变量</strong>：您可以将函数赋值给变量，然后通过该变量调用函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Hello, <span class="hljs-subst">&#123;name&#125;</span>!&quot;</span>)<br><br>my_function = greet  <span class="hljs-comment"># 将函数赋值给变量</span><br>my_function(<span class="hljs-string">&quot;Alice&quot;</span>)  <span class="hljs-comment"># 通过变量调用函数</span><br></code></pre></td></tr></table></figure></li><li><p><strong>可以作为参数传递</strong>：您可以将函数作为参数传递给其他函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply</span>(<span class="hljs-params">func, x</span>):<br>    <span class="hljs-keyword">return</span> func(x)<br><br>result = apply(square, <span class="hljs-number">5</span>)  <span class="hljs-comment"># 将函数 square 作为参数传递给 apply 函数</span><br></code></pre></td></tr></table></figure><p>在上述示例中，<code>apply</code> 函数接受一个函数作为参数，然后将该函数应用于给定的参数 <code>x</code>。</p></li><li><p><strong>可以作为返回值</strong>：您可以从一个函数中返回另一个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">multiplier</span>(<span class="hljs-params">factor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">return</span> x * factor<br>    <span class="hljs-keyword">return</span> multiply<br><br>double = multiplier(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 返回一个函数</span><br>result = double(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 调用返回的函数</span><br></code></pre></td></tr></table></figure><p>在上述示例中，<code>multiplier</code> 函数返回了另一个函数 <code>multiply</code>，并且可以通过 <code>double</code> 变量来调用返回的函数。</p></li><li><p><strong>可以存储在数据结构中</strong>：函数可以存储在列表、字典或其他数据结构中，以便在后续使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">functions = [square, cube, add]<br>result = functions[<span class="hljs-number">0</span>](<span class="hljs-number">3</span>)  <span class="hljs-comment"># 从列表中获取函数并调用它</span><br></code></pre></td></tr></table></figure><p>上述示例中，<code>functions</code> 列表存储了不同的函数，可以根据需要选择并调用其中的一个。</p></li></ol><p>因此，Python中的函数被称为一等公民，因为它们具有与其他数据类型（如整数、字符串和列表）相同的权利和特性。这种特性使得Python非常适合于函数式编程范式，并允许编写更灵活和可复用的代码。函数作为一等公民的特性在编写高阶函数和实现回调机制等编程任务时非常有用。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker的基本使用</title>
    <link href="/2023/09/06/docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/06/docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> golang:alpine<br><br><span class="hljs-comment"># Set necessary environmet variables needed for our image</span><br><span class="hljs-keyword">ENV</span> GO111MODULE=on \<br>    CGO_ENABLED=<span class="hljs-number">0</span> \<br>    GOOS=linux \<br>    GOARCH=amd64<br><br><span class="hljs-comment"># Move to working directory /build</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /build</span><br><br><span class="hljs-comment"># Copy and download dependency using go mod</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> go.mod .</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> go.sum .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> go mod download</span><br><br><span class="hljs-comment"># Copy the code into the container</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-comment"># Build the application</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> go build -o main .</span><br><br><span class="hljs-comment"># Move to /dist directory as the place for resulting binary folder</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /dist</span><br><br><span class="hljs-comment"># Copy binary from build to main folder</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cp</span> /build/main .</span><br><br><span class="hljs-comment"># Export necessary port</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3000</span><br><br><span class="hljs-comment"># Command to run when starting the container</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/dist/main&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>docker build . -t go-dock</p><p>docker run -p 3000:3000 go-dock</p><p>左边的 3000 是主机（你的计算机）上的端口号。<br>       右边的 3000 是Docker容器内部的端口号。</p><p>​</p><p>go mod tidy</p><p>go mod init [mod-name]</p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell编程</title>
    <link href="/2023/09/02/shell%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/09/02/shell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p> <code>#!/bin/bash</code>。这是一个典型的Bash脚本的开头，指定了脚本要使用的解释器，即Bash。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Author : Forrest</span><br><br><span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">ls</span><br><span class="hljs-built_in">mkdir</span> testDir<br><br></code></pre></td></tr></table></figure><p><strong>添加执行权限</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x filename<br></code></pre></td></tr></table></figure><p>用read命令来获取keyboard的输入，并将输入结果赋值给变量 The following script uses the <strong>read</strong> command which takes the input from the keyboard and assigns it as the value of the variable PERSON and finally prints it on STDOUT.</p><p>用$符号来获取变量的值 To access the value stored in a variable, prefix its name with the dollar sign (<strong>$</strong>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Author : Forrest</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;what is your name&quot;</span><br><span class="hljs-built_in">read</span> name<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello ,<span class="hljs-variable">$name</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Using-Variables"><a href="#Using-Variables" class="headerlink" title="Using Variables"></a>Using Variables</h2><h4 id="Defining-Variables"><a href="#Defining-Variables" class="headerlink" title="Defining  Variables"></a>Defining  Variables</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">variable_name=variable_value<br><br>NAME=<span class="hljs-string">&quot;Forrest&quot;</span><br>NUMBER=123<br></code></pre></td></tr></table></figure><h4 id="Accessing-values"><a href="#Accessing-values" class="headerlink" title="Accessing values"></a>Accessing values</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">NAME=<span class="hljs-string">&quot;Forrest&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$NAME</span><br></code></pre></td></tr></table></figure><h4 id="Read-only-Variables"><a href="#Read-only-Variables" class="headerlink" title="Read-only Variables"></a>Read-only Variables</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">NAME=<span class="hljs-string">&quot;Forrest&quot;</span><br><span class="hljs-built_in">readonly</span> NAME<br>NAME=<span class="hljs-string">&quot;another name&quot;</span><br></code></pre></td></tr></table></figure><p>err: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">-bash: NAME: <span class="hljs-built_in">readonly</span> variable<br></code></pre></td></tr></table></figure><p><code>readonly</code> 变量的只读属性是永久性的，不能在脚本中或shell会话中被修改或取消。Unsetting Variables</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">unset</span> vaiable_name<br></code></pre></td></tr></table></figure><p>Special Variables </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;what is your name&quot;</span><br><span class="hljs-built_in">read</span> name<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello ,<span class="hljs-variable">$name</span>&quot;</span><br><span class="hljs-comment"># special variable</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;current script pid: $$&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;filename : <span class="hljs-variable">$0</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;first parameter: <span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;second parameter :<span class="hljs-variable">$2</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;quoted values <span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;quoted values $*&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;total number of quoted  <span class="hljs-variable">$#</span>&quot;</span><br><br><span class="hljs-keyword">for</span> TOKEN <span class="hljs-keyword">in</span> $*<br><span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TOKEN</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;exit status $?&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Using-Shell-Arrays"><a href="#Using-Shell-Arrays" class="headerlink" title="Using Shell Arrays"></a>Using Shell Arrays</h2><p>查看shell是 ksh 还是bash</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20230830201146754.png" alt="image-20230830201146754"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>Arr[0]=<span class="hljs-string">&quot;0&quot;</span><br>Arr[1]=<span class="hljs-string">&quot;1&quot;</span><br>Arr[2]=<span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;first item <span class="hljs-variable">$&#123;Arr[0]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;first method <span class="hljs-variable">$&#123;Arr[*]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;second method <span class="hljs-variable">$&#123;Arr[@]&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Decision-Making"><a href="#Decision-Making" class="headerlink" title="Decision Making"></a>Decision Making</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">a=10<br>b=20<br><span class="hljs-keyword">if</span> [<span class="hljs-variable">$a</span>==<span class="hljs-variable">$b</span>]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a equlas b&quot;</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a not equals b&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="if-elseif"><a href="#if-elseif" class="headerlink" title="if elseif"></a>if elseif</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>a=10<br>b=20<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a equals b&quot;</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a is greater than b&quot;</span><br><span class="hljs-keyword">elif</span>  [ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a is less than b&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>​</p><h3 id="case-esac"><a href="#case-esac" class="headerlink" title="case .. esac"></a>case .. esac</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>option=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$&#123;option&#125;</span> <span class="hljs-keyword">in</span><br>        -f) FILE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2&#125;</span>&quot;</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;File name is <span class="hljs-variable">$FILE</span>&quot;</span><br>                        ;;<br>        -d) DIR=<span class="hljs-variable">$&#123;2&#125;</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Dir name is <span class="hljs-variable">$DIR</span>&quot;</span><br>                        ;;<br>        *)<br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;`basename <span class="hljs-variable">$&#123;0&#125;</span> `:usage :[-f file] | [-d directory]&quot;</span><br>                <span class="hljs-built_in">exit</span> 1<br>                ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h2 id="IO-Redirection"><a href="#IO-Redirection" class="headerlink" title="IO Redirection"></a>IO Redirection</h2><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p><strong>who</strong> command which redirects the complete output of the command in the users file.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">who</span> &gt; <span class="hljs-built_in">users</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> line 1 &gt;  <span class="hljs-built_in">users</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> line 2 &gt;&gt; uses<br></code></pre></td></tr></table></figure><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a><strong>eval</strong></h2><p><code>eval</code> 是一个在Shell脚本中用于执行字符串作为命令的特殊命令。它会将传递给它的字符串作为Shell命令进行解释和执行。<code>eval</code> 常用于动态生成和执行命令，可以将字符串中的变量、表达式和命令进行求值和执行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">x=5<br>y=3<br>operation=<span class="hljs-string">&quot;x+y&quot;</span><br>result=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;echo \$(( <span class="hljs-variable">$operation</span> ))&quot;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Result: <span class="hljs-variable">$result</span>&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="使用多行注释"><a href="#使用多行注释" class="headerlink" title="使用多行注释"></a>使用多行注释</h2><p>你可以使用 <code>:&lt;&lt;COMMENT</code> 和 <code>COMMENT</code> 来实现多行注释。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">bashCopy code:&lt;&lt;<span class="hljs-string">COMMENT</span><br><span class="hljs-string">这是多行注释的内容。</span><br><span class="hljs-string">可以有多行。</span><br><span class="hljs-string">这里可以写注释。</span><br><span class="hljs-string">COMMENT</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这是实际的代码。&quot;</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，冒号 <code>:</code> 后面的 <code>&lt;&lt;COMMENT</code> 表示将会读取从 <code>COMMENT</code> 开始的多行文本，这部分文本会被当作注释而被忽略。当Shell执行脚本时，它会跳过这些注释内容。</p><h2 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h2><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p><strong>parameter :  + - &#x3D;</strong></p><p>+表示全局（User group other）添加某些权限</p><p>-表示全局（User Group Other） 删除某些权限</p><p>&#x3D;表示设置（User | Group | Other）的权限是什么</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> o+wx testfile<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 743 testfile<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/01/hello-world/"/>
    <url>/2023/08/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
