<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>golang代码积累</title>
    <link href="/2023/09/13/golang%E4%BB%A3%E7%A0%81%E7%A7%AF%E7%B4%AF/"/>
    <url>/2023/09/13/golang%E4%BB%A3%E7%A0%81%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<p>连接字符串</p><ul><li><p>str1+str2</p></li><li><p>fmt.Sprintf(“%s%s”,str1,str2)</p></li><li><p>strings.Builder</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">str1 := <span class="hljs-string">&quot;str1&quot;</span><br>str2 := <span class="hljs-string">&quot;str2&quot;</span><br><br>fmt.Println(str1 + str2)<br><br>fmt.Println(fmt.Sprintf(<span class="hljs-string">&quot;%s%s&quot;</span>, str1, str2))<br><br><span class="hljs-keyword">var</span> stringbuilder strings.Builder<br>stringbuilder.WriteString(str1)<br><br>stringbuilder.WriteString(str2)<br><br>fmt.Println(stringbuilder.String())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【redis】ZSet的使用</title>
    <link href="/2023/09/13/%E3%80%90redis%E3%80%91ZSet%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/13/%E3%80%90redis%E3%80%91ZSet%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="准备动作"><a href="#准备动作" class="headerlink" title="准备动作"></a>准备动作</h2><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 6379:6379 --name redis redis<br></code></pre></td></tr></table></figure><h3 id="查看docke状态"><a href="#查看docke状态" class="headerlink" title="查看docke状态"></a>查看docke状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps<br></code></pre></td></tr></table></figure><h3 id="进入redis-cli"><a href="#进入redis-cli" class="headerlink" title="进入redis-cli"></a>进入redis-cli</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli<br></code></pre></td></tr></table></figure><h2 id="Zset的基本指令集合"><a href="#Zset的基本指令集合" class="headerlink" title="Zset的基本指令集合"></a>Zset的基本指令集合</h2><h3 id="ZADD添加元素-O-log-N"><a href="#ZADD添加元素-O-log-N" class="headerlink" title="ZADD添加元素 O(log(N))"></a><strong>ZADD</strong>添加元素 O(log(N))</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs redis">zadd myzset 1 &quot;1&quot;<br></code></pre></td></tr></table></figure><h3 id="ZREM-删除元素"><a href="#ZREM-删除元素" class="headerlink" title="ZREM 删除元素"></a><strong>ZREM</strong> 删除元素</h3><p>​O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZREM myzset &quot;one&quot;<br></code></pre></td></tr></table></figure><h3 id="ZCARD查看zset的元素个数O-1）"><a href="#ZCARD查看zset的元素个数O-1）" class="headerlink" title="ZCARD查看zset的元素个数O(1）"></a><strong>ZCARD</strong>查看zset的元素个数O(1）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zcard myzset <br></code></pre></td></tr></table></figure><h3 id="ZCOUNT-查看zset区间的与元素个数（默认为左闭右闭）O-log-N"><a href="#ZCOUNT-查看zset区间的与元素个数（默认为左闭右闭）O-log-N" class="headerlink" title="ZCOUNT 查看zset区间的与元素个数（默认为左闭右闭）O(log(N))"></a><strong>ZCOUNT</strong> 查看zset区间的与元素个数（默认为左闭右闭）O(log(N))</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zcount myzset 1 3#查看大于等于1小于等于3的<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zcount myzset (1 3 #查看大于1小于等于3的<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zcount myzset -inf +inf <br></code></pre></td></tr></table></figure><h3 id="ZINCRBY给元素添加值O-log-N"><a href="#ZINCRBY给元素添加值O-log-N" class="headerlink" title="ZINCRBY给元素添加值O(log(N)"></a><strong>ZINCRBY</strong>给元素添加值O(log(N)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZINCRBY myzset -10 &quot;one&quot;<br></code></pre></td></tr></table></figure><h3 id="ZRANK-O-log-N"><a href="#ZRANK-O-log-N" class="headerlink" title="ZRANK O(log(N))"></a>ZRANK O(log(N))</h3><ul><li><p>键存在，返回排名（默认为从小到大排序），最小的排序名词为（0）</p></li><li><p>键不存在，返回nil</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zrank myzset &quot;one&quot;<br></code></pre></td></tr></table></figure></li></ul><h3 id="ZRANGE查询区间值的元素O-log-N-M"><a href="#ZRANGE查询区间值的元素O-log-N-M" class="headerlink" title="ZRANGE查询区间值的元素O(log(N)+M)"></a><strong>ZRANGE</strong>查询区间值的元素O(log(N)+M)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZRANGE myzset -10 100 WITHSOCRES<br></code></pre></td></tr></table></figure><h3 id="ZINTERSTORE"><a href="#ZINTERSTORE" class="headerlink" title="ZINTERSTORE"></a><strong>ZINTERSTORE</strong></h3><p>有序集合（Sorted Set）的交集并将结果存储到新有序集合的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>destination</code>：目标有序集合的键名，用于存储交集结果。</li><li><code>numkeys</code>：指定参与计算的有序集合的数量。</li><li><code>key [key ...]</code>：要参与计算交集的有序集合的键名列表。</li><li><code>WEIGHTS weight [weight ...]</code>（可选）：用于指定每个有序集合的权重，可以调整每个成员分数的权重。如果不指定权重，则默认为 1。</li><li><code>AGGREGATE SUM|MIN|MAX</code>（可选）：用于指定计算交集时的聚合方式，可以是 SUM（求和，默认）、MIN（最小值）或 MAX（最大值）。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZINTERSTORE intersection_max 2 set1 set2 AGGREGATE MAX<br></code></pre></td></tr></table></figure><h3 id="ZRANGEBULEX"><a href="#ZRANGEBULEX" class="headerlink" title="ZRANGEBULEX"></a><strong>ZRANGEBULEX</strong></h3><ul><li><p>按序返回指定成员区间的成员</p></li><li><p>区间成员的分数必须相同 </p></li><li><p>不要在分数不一致的SortSet集合中去使用 ZRANGEBYLEX 指令,因为获取的结果并不准确。</p></li><li><p>可以使用 “-“ 和 “+” 表示得分最小值和最大值</p></li><li><p>成员字符串作为二进制数组的字节数进行比较。默认是以ASCII字符集的顺序进行排列。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">zadd zset 0 a 0 aa 0 abc 0 apple 0 b 0 c 0 d 0 d1 0 dd 0 dobble 0 z 0 z1<br>ZRANGEBYLEX zset - +<br><br>ZRANGEBYLEX zset - + limit 0 3  # 其中的0是结果的其实位置（offset） 3是结果的数量（count）<br><br>ZRANGEBULEX zset [aa [c<br><br>ZRANGEBULEX zset [aa (c<br></code></pre></td></tr></table></figure><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>姓名排序</li></ul>  <img src="https://www.helloimg.com/images/2023/09/13/onxM6Y.png" alt="zrangebylex" border="0"><ul><li><p>电话号码排序</p><p>  <a href="https://www.helloimg.com/image/onx9Qg"><img src="https://www.helloimg.com/images/2023/09/13/onx9Qg.png" alt="onx9Qg.png"></a></p></li></ul></li></ul><h2 id="go-redis的基本使用"><a href="#go-redis的基本使用" class="headerlink" title="go-redis的基本使用"></a>go-redis的基本使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get github.com/go-redis/redis/v8<br></code></pre></td></tr></table></figure><h3 id="连接local-redis"><a href="#连接local-redis" class="headerlink" title="连接local  redis"></a>连接local  redis</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doCommand</span><span class="hljs-params">()</span></span> &#123;<br>rdb := redis.NewClient(&amp;redis.Options&#123;<br>Addr:     <span class="hljs-string">&quot;localhost:6379&quot;</span>,<br>Password: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 密码</span><br>DB:       <span class="hljs-number">0</span>,  <span class="hljs-comment">// 数据库</span><br>PoolSize: <span class="hljs-number">20</span>, <span class="hljs-comment">// 连接池大小</span><br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用基本的go-redis指令"><a href="#使用基本的go-redis指令" class="headerlink" title="使用基本的go-redis指令"></a>使用基本的go-redis指令</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>val, err := rdb.Get(ctx, <span class="hljs-string">&quot;key&quot;</span>).Result()<br>fmt.Println(val, err)<br><br>cmder := rdb.Get(ctx, <span class="hljs-string">&quot;key&quot;</span>)<br>val = cmder.Val()<br>err = cmder.Err()<br>fmt.Println(val, err)<br><br>err = rdb.Set(ctx, <span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;val1&quot;</span>, time.Hour).Err()<br><br>val = rdb.Get(ctx, <span class="hljs-string">&quot;key1&quot;</span>).Val()<br>fmt.Println(val, err)<br><br></code></pre></td></tr></table></figure><h3 id="go-redis中提供了redis-Nil-的错误来表示不存在的错误"><a href="#go-redis中提供了redis-Nil-的错误来表示不存在的错误" class="headerlink" title="go-redis中提供了redis.Nil 的错误来表示不存在的错误"></a>go-redis中提供了redis.Nil 的错误来表示不存在的错误</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go">rdb := redis.NewClient(&amp;redis.Options&#123;<br>Addr:     <span class="hljs-string">&quot;localhost:6379&quot;</span>,<br>Password: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 密码</span><br>DB:       <span class="hljs-number">0</span>,  <span class="hljs-comment">// 数据库</span><br>PoolSize: <span class="hljs-number">20</span>, <span class="hljs-comment">// 连接池大小</span><br>&#125;)<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>val, err := rdb.Get(ctx, <span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> errors.Is(err, redis.Nil) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;redis.Nil&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(val, err)<br></code></pre></td></tr></table></figure><h3 id="使用-Client-Do-来实现任意redis指令"><a href="#使用-Client-Do-来实现任意redis指令" class="headerlink" title="使用 Client.Do 来实现任意redis指令"></a>使用 Client.Do 来实现任意redis指令</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">rdb := redis.NewClient(&amp;redis.Options&#123;<br>Addr:     <span class="hljs-string">&quot;localhost:6379&quot;</span>,<br>Password: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 密码</span><br>DB:       <span class="hljs-number">0</span>,  <span class="hljs-comment">// 数据库</span><br>PoolSize: <span class="hljs-number">20</span>, <span class="hljs-comment">// 连接池大小</span><br>&#125;)<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>err := rdb.Do(ctx, <span class="hljs-string">&quot;set&quot;</span>, <span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;val2&quot;</span>, <span class="hljs-string">&quot;EX&quot;</span>, <span class="hljs-number">3600</span>).Err()<br>fmt.Println(err)<br><br>val, err := rdb.Do(ctx, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;key2&quot;</span>).Result()<br>fmt.Println(val, err)<br></code></pre></td></tr></table></figure><h3 id="go-redis-ZSet-的使用"><a href="#go-redis-ZSet-的使用" class="headerlink" title="go-redis ZSet 的使用"></a>go-redis ZSet 的使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go">rdb := redis.NewClient(&amp;redis.Options&#123;<br>Addr:     <span class="hljs-string">&quot;localhost:6379&quot;</span>,<br>Password: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 密码</span><br>DB:       <span class="hljs-number">0</span>,  <span class="hljs-comment">// 数据库</span><br>PoolSize: <span class="hljs-number">20</span>, <span class="hljs-comment">// 连接池大小</span><br>&#125;)<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>zsetKey := <span class="hljs-string">&quot;scores_rank&quot;</span><br><br>rank := []*redis.Z&#123;<br>&#123;Score: <span class="hljs-number">90.0</span>, Member: <span class="hljs-string">&quot;Alice&quot;</span>&#125;,<br>&#123;Score: <span class="hljs-number">90.1</span>, Member: <span class="hljs-string">&quot;Bob&quot;</span>&#125;,<br>&#123;Score: <span class="hljs-number">80.2</span>, Member: <span class="hljs-string">&quot;Cick&quot;</span>&#125;,<br>&#123;Score: <span class="hljs-number">89.2</span>, Member: <span class="hljs-string">&quot;David&quot;</span>&#125;,<br>&#123;Score: <span class="hljs-number">99.1</span>, Member: <span class="hljs-string">&quot;Eric&quot;</span>&#125;,<br>&#123;Score: <span class="hljs-number">78.1</span>, Member: <span class="hljs-string">&quot;Frank&quot;</span>&#125;,<br>&#125;<br><span class="hljs-keyword">if</span> err := rdb.ZAdd(ctx, zsetKey, rank...).Err(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;zadd failed&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;zadd success&quot;</span>)<br><br>newscore, err := rdb.ZIncrBy(ctx, zsetKey, <span class="hljs-number">-10</span>, <span class="hljs-string">&quot;Frank&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;zincrby failed&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;Frank&#x27;s score is %f\n&quot;</span>, newscore)<br><br>res := rdb.ZRevRangeWithScores(ctx, zsetKey, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>).Val()<br>fmt.Println(<span class="hljs-string">&quot;ZRevRangeWithScores&#x27;s res :&quot;</span>, res)<br><br><span class="hljs-keyword">for</span> _, z := <span class="hljs-keyword">range</span> res &#123;<br>fmt.Println(z)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Redis-Pipeline"><a href="#Redis-Pipeline" class="headerlink" title="Redis Pipeline"></a>Redis Pipeline</h3><ul><li><p>Pipeline  将发送的命令一次性打包发给Redis服务器执行，从而减少了RTT时延</p></li><li><p>Redis服务器会按照添加命令的顺序依次执行它们</p></li><li><p>Pipeline 不适合在这种情况下使用：单个命令可能需要等待前一个命令的结果，或者需要保证命令的顺序性</p></li></ul><h4 id="rdb-Pipeline"><a href="#rdb-Pipeline" class="headerlink" title="rdb.Pipeline()"></a>rdb.Pipeline()</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">pipe := rdb.Pipeline()<br><br>incr := pipe.Incr(ctx, <span class="hljs-string">&quot;pipeline_counter&quot;</span>)<br>pipe.Expire(ctx, <span class="hljs-string">&quot;pipeline_counter&quot;</span>, time.Hour)<br>Get := pipe.Get(ctx, <span class="hljs-string">&quot;pipe_test1&quot;</span>)<br>_, err := pipe.Exec(ctx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// 在执行pipe.Exec之后才能获取到结果</span><br>fmt.Println(incr.Val())<br>fmt.Println(Get.Val())<br></code></pre></td></tr></table></figure><h4 id="rdb-Pipelined"><a href="#rdb-Pipelined" class="headerlink" title="rdb.Pipelined()"></a>rdb.Pipelined()</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//set</span><br>cmds, err := rdb.Pipelined(ctx, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(pipe redis.Pipeliner)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>pipe.Set(ctx, fmt.Sprintf(<span class="hljs-string">&quot;key%d&quot;</span>, i), fmt.Sprintf(<span class="hljs-string">&quot;key%d&quot;</span>, i), <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-comment">/*for _, cmd := range cmds &#123;</span><br><span class="hljs-comment">fmt.Println(cmd.(*redis.StringCmd).Val())</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-comment">//get</span><br>cmds, err = rdb.Pipelined(ctx, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(pipe redis.Pipeliner)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>pipe.Get(ctx, fmt.Sprintf(<span class="hljs-string">&quot;key%d&quot;</span>, i))<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">for</span> _, cmd := <span class="hljs-keyword">range</span> cmds &#123;<br>fmt.Println(cmd.(*redis.StringCmd).Val())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="go-redis-事务"><a href="#go-redis-事务" class="headerlink" title="go-redis 事务"></a>go-redis 事务</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//TxPipelineDemo</span><br>pipe := rdb.TxPipeline()<br>incr := pipe.Incr(ctx, <span class="hljs-string">&quot;tx_pipeline_counter&quot;</span>)<br>pipe.Expire(ctx, <span class="hljs-string">&quot;tx_pipeline_counter&quot;</span>, time.Hour)<br>_, err := pipe.Exec(ctx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(incr.Val())<br><br><span class="hljs-comment">//TxPipelined demo TxPipelined 自动执行 Exec</span><br><span class="hljs-keyword">var</span> incr2 *redis.IntCmd<br>_, err = rdb.TxPipelined(ctx, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(pipe redis.Pipeliner)</span></span> <span class="hljs-type">error</span> &#123;<br>incr2 = pipe.Incr(ctx, <span class="hljs-string">&quot;tx_pipeline_counter&quot;</span>)<br>pipe.Expire(ctx, <span class="hljs-string">&quot;tx_pipeline_counter&quot;</span>, time.Hour)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br>fmt.Println(incr2.Val(), err)<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>等价指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">MULTI<br>INCR pipeline_counter<br>EXPIRE pipeline_counts 3600<br>EXEC<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.redis.cn/commands.html">Redis命令中心（Redis commands） – Redis中国用户组（CRUG）</a></li><li><a href="https://pkg.go.dev/github.com/go-redis/redis">redis package - github.com&#x2F;go-redis&#x2F;redis - Go Packages</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>grpc初探</title>
    <link href="/2023/09/11/grpc%E5%88%9D%E6%8E%A2/"/>
    <url>/2023/09/11/grpc%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是rpc"><a href="#什么是rpc" class="headerlink" title="什么是rpc"></a>什么是rpc</h2><p>RPC（Remote Procedure Call，远程过程调用）是一种计算机编程模型和协议，允许一个程序在另一个地址空间（通常是远程计算机上）执行函数或过程调用，就像调用本地函数一样。RPC 的目标是使分布式系统中的不同组件能够相互通信和协作，而不必手动编写复杂的网络通信代码。(chatGPT解释)</p><h2 id="是什么grpc"><a href="#是什么grpc" class="headerlink" title="是什么grpc"></a>是什么grpc</h2><p>gRPC（gRPC Remote Procedure Call）是一种高性能、跨语言的远程过程调用（RPC）框架，由Google开发并开源。它建立在HTTP&#x2F;2协议上，使用Protocol Buffers（protobuf）作为接口定义语言（IDL），支持多种编程语言。gRPC的目标是使分布式系统之间的通信更加高效、可靠和易于扩展。(chatGPT解释)</p><h2 id="Hello-world-Demo"><a href="#Hello-world-Demo" class="headerlink" title="Hello world  Demo"></a>Hello world  Demo</h2><h3 id="编写-proto文件"><a href="#编写-proto文件" class="headerlink" title="编写 proto文件"></a>编写 proto文件</h3><h4 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package =<span class="hljs-string">&quot;server/pb&quot;</span>;<br><br><span class="hljs-keyword">package</span> pb;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Greeter</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> SayHello (HelloRequest) <span class="hljs-keyword">returns</span> (HelloResponse)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloRequest</span>&#123;<br>  <span class="hljs-type">string</span>  name =<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloResponse</span>&#123;<br>  <span class="hljs-type">string</span>  reply=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Client-端"><a href="#Client-端" class="headerlink" title="Client 端"></a>Client 端</h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package =<span class="hljs-string">&quot;client/pb&quot;</span>;<br><br><span class="hljs-keyword">package</span> pb;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Greeter</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> SayHello (HelloRequest) <span class="hljs-keyword">returns</span> (HelloResponse)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloRequest</span>&#123;<br>  <span class="hljs-type">string</span>  name =<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloResponse</span>&#123;<br>  <span class="hljs-type">string</span>  reply=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="执行-proto文件"><a href="#执行-proto文件" class="headerlink" title="执行 proto文件"></a>执行 proto文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">protoc --go_out=. --go_opt=paths=source_relative \<br>--go-grpc_out=. --go-grpc_opt=paths=source_relative \<br>pb/hello.proto<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">protoc --proto_path=pb --go_out=pb --go_opt=paths=source_relative \<br>--go-grpc_out=pb --go-grpc_opt=paths=source_relative \<br>add.proto<br></code></pre></td></tr></table></figure><h3 id="编写-逻辑代码"><a href="#编写-逻辑代码" class="headerlink" title="编写 逻辑代码"></a>编写 逻辑代码</h3><h4 id="Server端-1"><a href="#Server端-1" class="headerlink" title="Server端"></a>Server端</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;microService_Learning/grpc_demo/server/pb&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class="hljs-comment">// hello server</span><br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedGreeterServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SayHello(ctx context.Context, request *pb.HelloRequest) (*pb.HelloResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;pb.HelloResponse&#123;Reply: <span class="hljs-string">&quot;Hello&quot;</span> + request.Name&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:9091&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;net.Listen failed,err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>s := grpc.NewServer()<br>pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)<br><span class="hljs-keyword">if</span> err = s.Serve(listener); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;s.Serve failed,err:%v\n&quot;</span>, err)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//server/main.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;microService_Learning/grpc_demo/server/pb&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class="hljs-comment">// hello_client</span><br><br><span class="hljs-keyword">const</span> (<br>defaultName = <span class="hljs-string">&quot;world&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br><span class="hljs-comment">// 注意 flag.String 返回的是 *string</span><br>addr = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:9092&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br>name = flag.String(<span class="hljs-string">&quot;name&quot;</span>, defaultName, <span class="hljs-string">&quot;Name to greet&quot;</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-comment">// 连接到server端，此处禁用安全传输</span><br><span class="hljs-comment">//conn, err := grpc.Dial(*addr, grpc.WithInsecure())</span><br>conn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;grpc.Dail failed,err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//执行rpc调用 并打印返回相应的值</span><br>client := pb.NewGreeterClient(conn)<br>ctx, cancel := context.WithTimeout(context.Background(), time.Millisecond*<span class="hljs-number">3</span>)<br><span class="hljs-keyword">defer</span> cancel()<br>r, err := client.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;counld not greet :%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>log.Printf(<span class="hljs-string">&quot;Greeting :,%s&quot;</span>, r.GetReply())<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Add-Demo"><a href="#Add-Demo" class="headerlink" title="Add Demo"></a>Add Demo</h2><h3 id="server端-proto-文件"><a href="#server端-proto-文件" class="headerlink" title="server端  proto 文件"></a>server端  proto 文件</h3><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-comment">//path: add_server/pb/add.proto</span><br>syntax=<span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">package</span> add_sever;<br><br><span class="hljs-keyword">option</span> go_package =<span class="hljs-string">&quot;add_server/pb&quot;</span>;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Add</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> CalcService(AddRequest) <span class="hljs-keyword">returns</span> (AddResponse)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">AddRequest</span>&#123;<br>  <span class="hljs-type">int64</span> x=<span class="hljs-number">1</span>;<br>  <span class="hljs-type">int64</span> y=<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">message  </span><span class="hljs-title class_">AddResponse</span>&#123;<br>  <span class="hljs-type">int64</span>  res=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="server端具体逻辑代码"><a href="#server端具体逻辑代码" class="headerlink" title="server端具体逻辑代码"></a>server端具体逻辑代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// path: add_server/main.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;add_server/pb&quot;</span><br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-string">&quot;net&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedAddServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> CalcService(ctx context.Context, in *pb.AddRequest) (*pb.AddResponse, <span class="hljs-type">error</span>) &#123;<br>sum := <span class="hljs-type">int64</span>(in.GetX()) + <span class="hljs-type">int64</span>(in.GetY())<br><span class="hljs-keyword">return</span> &amp;pb.AddResponse&#123;Res: sum&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:3000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;net.Listen failed,err:%v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>s := grpc.NewServer()<br>pb.RegisterAddServer(s, &amp;server&#123;&#125;)<br><span class="hljs-keyword">if</span> err = s.Serve(listener); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;s.Serve failed,err:%v&quot;</span>, err)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="client端-proto-文件"><a href="#client端-proto-文件" class="headerlink" title="client端  proto 文件"></a>client端  proto 文件</h3><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-comment">// path: add_client/pb/add.proto</span><br>syntax=<span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">package</span> add_sever;<br><br><span class="hljs-keyword">option</span> go_package =<span class="hljs-string">&quot;add_client/pb&quot;</span>;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Add</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> CalcService(AddRequest) <span class="hljs-keyword">returns</span> (AddResponse)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">AddRequest</span>&#123;<br>  <span class="hljs-type">int64</span> x=<span class="hljs-number">1</span>;<br>  <span class="hljs-type">int64</span> y=<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">message  </span><span class="hljs-title class_">AddResponse</span>&#123;<br>  <span class="hljs-type">int64</span>  res=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="client端具体逻辑代码"><a href="#client端具体逻辑代码" class="headerlink" title="client端具体逻辑代码"></a>client端具体逻辑代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// path: add_client/main.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;add_client/pb&quot;</span><br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>x = flag.Int(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;x的值&quot;</span>)<br>y = flag.Int(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">110</span>, <span class="hljs-string">&quot;x的值&quot;</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-comment">//建立连接</span><br>conn, err := grpc.Dial(<span class="hljs-string">&quot;127.0.0.1:3000&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;grpc.Dial failed,err:%v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//创建 rpc client端</span><br>client := pb.NewAddClient(conn)<br>ctx, cacel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cacel()<br>resp, err := client.CalcService(ctx, &amp;pb.AddRequest&#123;<br>X: <span class="hljs-type">int64</span>(*x),<br>Y: <span class="hljs-type">int64</span>(*y),<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.CalcService failed,err:%v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>log.Printf(<span class="hljs-string">&quot;res:%v&quot;</span>, resp.GetRes())<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>参考</strong></p><ul><li><a href="https://www.liwenzhou.com/posts/Go/gRPC/#autoid-0-3-4">gRPC教程 | 李文周的博客 (liwenzhou.com)</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>grpc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Golang 学习路线总结】</title>
    <link href="/2023/09/09/%E3%80%90Golang-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E6%80%BB%E7%BB%93%E3%80%91/"/>
    <url>/2023/09/09/%E3%80%90Golang-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E6%80%BB%E7%BB%93%E3%80%91/</url>
    
    <content type="html"><![CDATA[<ul><li>Golang设计模式 <a href="https://www.bilibili.com/video/BV1Eg411m7rV/?spm_id_from=333.999.0.0&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">Easy搞定Golang设计模式(Go语言设计模式，如此简单)_哔哩哔哩_bilibili</a></li><li>B+树 <a href="https://www.bilibili.com/video/BV1kT411N7it/?spm_id_from=333.999.0.0&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">B+树,B-link树,LSM树…一个视频带你了解常用存储引擎数据结构（中）_哔哩哔哩_bilibili</a></li><li>TCP IP 八股 <a href="https://www.bilibili.com/video/BV1Mp4y1x7eX/?spm_id_from=pageDriver&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">tcp&#x2F;ip协议第10讲：tcp四次挥手以及wireshark抓包验证_哔哩哔哩_bilibili</a></li><li>Kubernetes <a href="https://www.bilibili.com/video/BV1MT411x7GH/?spm_id_from=333.999.0.0&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">完整版Kubernetes（K8S）全套入门+微服务实战项目，带你一站式深入掌握K8S核心能力_哔哩哔哩_bilibili</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-学习路线记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>傻蛋速成python</title>
    <link href="/2023/09/07/%E5%82%BB%E8%9B%8B%E9%80%9F%E6%88%90python/"/>
    <url>/2023/09/07/%E5%82%BB%E8%9B%8B%E9%80%9F%E6%88%90python/</url>
    
    <content type="html"><![CDATA[<p>格式化 </p><ul><li></li></ul><p>%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;%s is %d years old&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> % (<span class="hljs-string">&quot;yst&quot;</span>,<span class="hljs-number">123</span>)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;yst is 123 years old&#x27;</span><br></code></pre></td></tr></table></figure><p>format</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#123;:d&#125; + &#123;:d&#125; =&#123;:d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1</span>+<span class="hljs-number">21</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#123;1:d&#125; + &#123;0:d&#125; =&#123;2:d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1</span>+<span class="hljs-number">21</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#123;0:d&#125; + &#123;0:d&#125; + &#123;1:d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>)<br></code></pre></td></tr></table></figure><p>f</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">f `&#123;name&#125; <span class="hljs-keyword">is</span> &#123;age&#125; years old`<br></code></pre></td></tr></table></figure><p>结构控制 </p><p>for语句</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">scores=[<span class="hljs-number">90</span>,<span class="hljs-number">45</span>,<span class="hljs-number">85</span>,<span class="hljs-number">76</span>,<span class="hljs-number">89</span>]<br><br><span class="hljs-keyword">for</span> score <span class="hljs-keyword">in</span> scores:<br>    <span class="hljs-keyword">if</span> score &gt;=<span class="hljs-number">60</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;PASS&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed&quot;</span>)       <br></code></pre></td></tr></table></figure><p>in range</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">scores=[<span class="hljs-number">90</span>,<span class="hljs-number">45</span>,<span class="hljs-number">85</span>,<span class="hljs-number">76</span>,<span class="hljs-number">89</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-built_in">len</span>(scores)):<br>    <span class="hljs-built_in">print</span>(scores[i])<br><br></code></pre></td></tr></table></figure><p>in enumerate</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">scores = [<span class="hljs-number">90</span>, <span class="hljs-number">45</span>, <span class="hljs-number">85</span>, <span class="hljs-number">76</span>, <span class="hljs-number">89</span>, <span class="hljs-number">900</span>]<br><br><span class="hljs-keyword">for</span> i, score <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(scores, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(i, score)<br><br><br></code></pre></td></tr></table></figure><p>in zip</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">scores = [<span class="hljs-number">90</span>, <span class="hljs-number">45</span>, <span class="hljs-number">85</span>, <span class="hljs-number">76</span>, <span class="hljs-number">89</span>, <span class="hljs-number">900</span>]<br>names = [<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>]<br><br><span class="hljs-keyword">for</span> name, score <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(names, scores):<br>    <span class="hljs-built_in">print</span>(name, score)<br><br></code></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>hash仅支持 immutable的对象 str &#x2F;int &#x2F;bool&#x2F;float&#x2F;tuple</p><h2 id="func"><a href="#func" class="headerlink" title="func"></a>func</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foobar</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this is a python func&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name=<span class="hljs-string">&quot;Alice&quot;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;this is a comment&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;hello <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br><br><br>foobar()<br>greet()<br>greet(<span class="hljs-string">&quot;name&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    res = x + y<br>    <span class="hljs-keyword">return</span> res<br><br><br>sum_res = add(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p>闭包 函数作为返回值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 函数的闭包</span><br><span class="hljs-comment"># 一个函数A中定义了函数B，并且另函数B调用了函数A的参数，且返回函数B作为返回值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>(<span class="hljs-params">y</span>):<br>        <span class="hljs-keyword">return</span> x + y<br><br>    <span class="hljs-keyword">return</span> f3<br><br><span class="hljs-built_in">print</span>(f2(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>))<br><br></code></pre></td></tr></table></figure><p>lambda表达式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * x ** <span class="hljs-number">2</span> + <span class="hljs-number">9</span> * x + <span class="hljs-number">10</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">diff</span>(<span class="hljs-params">x, func</span>):<br>    delta = <span class="hljs-number">1e-6</span><br>    <span class="hljs-keyword">return</span> (func(x + delta) - func(x)) / delta<br><br><br><span class="hljs-built_in">print</span>(diff(<span class="hljs-number">2</span>, f))<br><br><span class="hljs-built_in">print</span>(diff(<span class="hljs-number">1</span>, <span class="hljs-keyword">lambda</span> x: <span class="hljs-number">2</span> * x ** <span class="hljs-number">3</span> + <span class="hljs-number">9</span> * x + <span class="hljs-number">9</span>))<br><br></code></pre></td></tr></table></figure><p><code>Chatgpt对于 python中函数是一等公民的解释</code></p><p>在编程语言中，”一等公民”（First-Class Citizen）是一个概念，用来描述对某种特性（通常是数据类型）的支持程度。如果一种编程语言将某个特性视为一等公民，那么该特性就会享有与其他标准数据类型相同的权利和特性。在Python中，函数被视为一等公民，这意味着函数在语言中具有特殊的地位和权利：</p><p>以下是Python中函数被称为一等公民的原因和表现：</p><ol><li><p><strong>可以赋值给变量</strong>：您可以将函数赋值给变量，然后通过该变量调用函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Hello, <span class="hljs-subst">&#123;name&#125;</span>!&quot;</span>)<br><br>my_function = greet  <span class="hljs-comment"># 将函数赋值给变量</span><br>my_function(<span class="hljs-string">&quot;Alice&quot;</span>)  <span class="hljs-comment"># 通过变量调用函数</span><br></code></pre></td></tr></table></figure></li><li><p><strong>可以作为参数传递</strong>：您可以将函数作为参数传递给其他函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply</span>(<span class="hljs-params">func, x</span>):<br>    <span class="hljs-keyword">return</span> func(x)<br><br>result = apply(square, <span class="hljs-number">5</span>)  <span class="hljs-comment"># 将函数 square 作为参数传递给 apply 函数</span><br></code></pre></td></tr></table></figure><p>在上述示例中，<code>apply</code> 函数接受一个函数作为参数，然后将该函数应用于给定的参数 <code>x</code>。</p></li><li><p><strong>可以作为返回值</strong>：您可以从一个函数中返回另一个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">multiplier</span>(<span class="hljs-params">factor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">return</span> x * factor<br>    <span class="hljs-keyword">return</span> multiply<br><br>double = multiplier(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 返回一个函数</span><br>result = double(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 调用返回的函数</span><br></code></pre></td></tr></table></figure><p>在上述示例中，<code>multiplier</code> 函数返回了另一个函数 <code>multiply</code>，并且可以通过 <code>double</code> 变量来调用返回的函数。</p></li><li><p><strong>可以存储在数据结构中</strong>：函数可以存储在列表、字典或其他数据结构中，以便在后续使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">functions = [square, cube, add]<br>result = functions[<span class="hljs-number">0</span>](<span class="hljs-number">3</span>)  <span class="hljs-comment"># 从列表中获取函数并调用它</span><br></code></pre></td></tr></table></figure><p>上述示例中，<code>functions</code> 列表存储了不同的函数，可以根据需要选择并调用其中的一个。</p></li></ol><p>因此，Python中的函数被称为一等公民，因为它们具有与其他数据类型（如整数、字符串和列表）相同的权利和特性。这种特性使得Python非常适合于函数式编程范式，并允许编写更灵活和可复用的代码。函数作为一等公民的特性在编写高阶函数和实现回调机制等编程任务时非常有用。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker的基本使用</title>
    <link href="/2023/09/06/docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/06/docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> golang:alpine<br><br><span class="hljs-comment"># Set necessary environmet variables needed for our image</span><br><span class="hljs-keyword">ENV</span> GO111MODULE=on \<br>    CGO_ENABLED=<span class="hljs-number">0</span> \<br>    GOOS=linux \<br>    GOARCH=amd64<br><br><span class="hljs-comment"># Move to working directory /build</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /build</span><br><br><span class="hljs-comment"># Copy and download dependency using go mod</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> go.mod .</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> go.sum .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> go mod download</span><br><br><span class="hljs-comment"># Copy the code into the container</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-comment"># Build the application</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> go build -o main .</span><br><br><span class="hljs-comment"># Move to /dist directory as the place for resulting binary folder</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /dist</span><br><br><span class="hljs-comment"># Copy binary from build to main folder</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cp</span> /build/main .</span><br><br><span class="hljs-comment"># Export necessary port</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3000</span><br><br><span class="hljs-comment"># Command to run when starting the container</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/dist/main&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>docker build . -t go-dock</p><p>docker run -p 3000:3000 go-dock</p><p>左边的 3000 是主机（你的计算机）上的端口号。<br>       右边的 3000 是Docker容器内部的端口号。</p><p>​</p><p>go mod tidy</p><p>go mod init [mod-name]</p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell编程</title>
    <link href="/2023/09/02/shell%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/09/02/shell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p> <code>#!/bin/bash</code>。这是一个典型的Bash脚本的开头，指定了脚本要使用的解释器，即Bash。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Author : Forrest</span><br><br><span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">ls</span><br><span class="hljs-built_in">mkdir</span> testDir<br><br></code></pre></td></tr></table></figure><p><strong>添加执行权限</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x filename<br></code></pre></td></tr></table></figure><p>用read命令来获取keyboard的输入，并将输入结果赋值给变量 The following script uses the <strong>read</strong> command which takes the input from the keyboard and assigns it as the value of the variable PERSON and finally prints it on STDOUT.</p><p>用$符号来获取变量的值 To access the value stored in a variable, prefix its name with the dollar sign (<strong>$</strong>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Author : Forrest</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;what is your name&quot;</span><br><span class="hljs-built_in">read</span> name<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello ,<span class="hljs-variable">$name</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Using-Variables"><a href="#Using-Variables" class="headerlink" title="Using Variables"></a>Using Variables</h2><h4 id="Defining-Variables"><a href="#Defining-Variables" class="headerlink" title="Defining  Variables"></a>Defining  Variables</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">variable_name=variable_value<br><br>NAME=<span class="hljs-string">&quot;Forrest&quot;</span><br>NUMBER=123<br></code></pre></td></tr></table></figure><h4 id="Accessing-values"><a href="#Accessing-values" class="headerlink" title="Accessing values"></a>Accessing values</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">NAME=<span class="hljs-string">&quot;Forrest&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$NAME</span><br></code></pre></td></tr></table></figure><h4 id="Read-only-Variables"><a href="#Read-only-Variables" class="headerlink" title="Read-only Variables"></a>Read-only Variables</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">NAME=<span class="hljs-string">&quot;Forrest&quot;</span><br><span class="hljs-built_in">readonly</span> NAME<br>NAME=<span class="hljs-string">&quot;another name&quot;</span><br></code></pre></td></tr></table></figure><p>err: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">-bash: NAME: <span class="hljs-built_in">readonly</span> variable<br></code></pre></td></tr></table></figure><p><code>readonly</code> 变量的只读属性是永久性的，不能在脚本中或shell会话中被修改或取消。Unsetting Variables</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">unset</span> vaiable_name<br></code></pre></td></tr></table></figure><p>Special Variables </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;what is your name&quot;</span><br><span class="hljs-built_in">read</span> name<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello ,<span class="hljs-variable">$name</span>&quot;</span><br><span class="hljs-comment"># special variable</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;current script pid: $$&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;filename : <span class="hljs-variable">$0</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;first parameter: <span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;second parameter :<span class="hljs-variable">$2</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;quoted values <span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;quoted values $*&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;total number of quoted  <span class="hljs-variable">$#</span>&quot;</span><br><br><span class="hljs-keyword">for</span> TOKEN <span class="hljs-keyword">in</span> $*<br><span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TOKEN</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;exit status $?&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Using-Shell-Arrays"><a href="#Using-Shell-Arrays" class="headerlink" title="Using Shell Arrays"></a>Using Shell Arrays</h2><p>查看shell是 ksh 还是bash</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20230830201146754.png" alt="image-20230830201146754"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>Arr[0]=<span class="hljs-string">&quot;0&quot;</span><br>Arr[1]=<span class="hljs-string">&quot;1&quot;</span><br>Arr[2]=<span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;first item <span class="hljs-variable">$&#123;Arr[0]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;first method <span class="hljs-variable">$&#123;Arr[*]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;second method <span class="hljs-variable">$&#123;Arr[@]&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Decision-Making"><a href="#Decision-Making" class="headerlink" title="Decision Making"></a>Decision Making</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">a=10<br>b=20<br><span class="hljs-keyword">if</span> [<span class="hljs-variable">$a</span>==<span class="hljs-variable">$b</span>]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a equlas b&quot;</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a not equals b&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="if-elseif"><a href="#if-elseif" class="headerlink" title="if elseif"></a>if elseif</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>a=10<br>b=20<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a equals b&quot;</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a is greater than b&quot;</span><br><span class="hljs-keyword">elif</span>  [ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a is less than b&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>​</p><h3 id="case-esac"><a href="#case-esac" class="headerlink" title="case .. esac"></a>case .. esac</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>option=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$&#123;option&#125;</span> <span class="hljs-keyword">in</span><br>        -f) FILE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2&#125;</span>&quot;</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;File name is <span class="hljs-variable">$FILE</span>&quot;</span><br>                        ;;<br>        -d) DIR=<span class="hljs-variable">$&#123;2&#125;</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Dir name is <span class="hljs-variable">$DIR</span>&quot;</span><br>                        ;;<br>        *)<br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;`basename <span class="hljs-variable">$&#123;0&#125;</span> `:usage :[-f file] | [-d directory]&quot;</span><br>                <span class="hljs-built_in">exit</span> 1<br>                ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h2 id="IO-Redirection"><a href="#IO-Redirection" class="headerlink" title="IO Redirection"></a>IO Redirection</h2><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p><strong>who</strong> command which redirects the complete output of the command in the users file.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">who</span> &gt; <span class="hljs-built_in">users</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> line 1 &gt;  <span class="hljs-built_in">users</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> line 2 &gt;&gt; uses<br></code></pre></td></tr></table></figure><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a><strong>eval</strong></h2><p><code>eval</code> 是一个在Shell脚本中用于执行字符串作为命令的特殊命令。它会将传递给它的字符串作为Shell命令进行解释和执行。<code>eval</code> 常用于动态生成和执行命令，可以将字符串中的变量、表达式和命令进行求值和执行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">x=5<br>y=3<br>operation=<span class="hljs-string">&quot;x+y&quot;</span><br>result=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;echo \$(( <span class="hljs-variable">$operation</span> ))&quot;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Result: <span class="hljs-variable">$result</span>&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="使用多行注释"><a href="#使用多行注释" class="headerlink" title="使用多行注释"></a>使用多行注释</h2><p>你可以使用 <code>:&lt;&lt;COMMENT</code> 和 <code>COMMENT</code> 来实现多行注释。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">bashCopy code:&lt;&lt;<span class="hljs-string">COMMENT</span><br><span class="hljs-string">这是多行注释的内容。</span><br><span class="hljs-string">可以有多行。</span><br><span class="hljs-string">这里可以写注释。</span><br><span class="hljs-string">COMMENT</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这是实际的代码。&quot;</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，冒号 <code>:</code> 后面的 <code>&lt;&lt;COMMENT</code> 表示将会读取从 <code>COMMENT</code> 开始的多行文本，这部分文本会被当作注释而被忽略。当Shell执行脚本时，它会跳过这些注释内容。</p><h2 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h2><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p><strong>parameter :  + - &#x3D;</strong></p><p>+表示全局（User group other）添加某些权限</p><p>-表示全局（User Group Other） 删除某些权限</p><p>&#x3D;表示设置（User | Group | Other）的权限是什么</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> o+wx testfile<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 743 testfile<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/01/hello-world/"/>
    <url>/2023/08/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
