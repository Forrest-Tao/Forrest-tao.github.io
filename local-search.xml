<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>go的多路IO</title>
    <link href="/2024/02/24/go%E7%9A%84%E5%A4%9A%E8%B7%AFIO/"/>
    <url>/2024/02/24/go%E7%9A%84%E5%A4%9A%E8%B7%AFIO/</url>
    
    <content type="html"><![CDATA[<h2 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h2><p><strong>IO模型指同时操作Socket的方案</strong></p><h3 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h3><p><img src="/2024/02/24/go%E7%9A%84%E5%A4%9A%E8%B7%AFIO/image-20240224215049368.png" alt="image-20240224215049368"></p><ul><li>同步读写Socket时，线程陷入内核态</li><li>当读写完成后，切换回用户态，继续执行</li><li>优点：开发难度小</li><li>缺点：内核切换开销大</li></ul><h3 id="非阻塞的IO"><a href="#非阻塞的IO" class="headerlink" title="非阻塞的IO"></a>非阻塞的IO</h3><p><img src="/2024/02/24/go%E7%9A%84%E5%A4%9A%E8%B7%AFIO/image-20240224215333997.png" alt="image-20240224215333997"></p><ul><li>轮询所有的socket，直到Socket可以读写</li><li>优点：不会陷入内核态，自由度高</li><li>缺点：需要自旋轮询</li></ul><h3 id="多路复用-Linux-epoll（event-poll-事件池）"><a href="#多路复用-Linux-epoll（event-poll-事件池）" class="headerlink" title="多路复用 Linux epoll（event poll 事件池）"></a>多路复用 Linux epoll（event poll 事件池）</h3><p><img src="/2024/02/24/go%E7%9A%84%E5%A4%9A%E8%B7%AFIO/image-20240224215717352.png" alt="image-20240224215717352"></p><ul><li>注册多个socket事件</li><li>调用epoll，当有事件发生，返回事件列表</li><li>优点：提供了事件列表，不需要查询各个Socket</li><li>缺点：开发难度大，逻辑复杂</li></ul><p><strong>总结</strong></p><ul><li>OS 提供了Socket作为TCP通信的抽象</li><li>IO则是管理Socket的方案</li></ul><p><img src="/2024/02/24/go%E7%9A%84%E5%A4%9A%E8%B7%AFIO/image-20240224220620165.png" alt="image-20240224220620165"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go的channel</title>
    <link href="/2024/02/24/go%E7%9A%84channel/"/>
    <url>/2024/02/24/go%E7%9A%84channel/</url>
    
    <content type="html"><![CDATA[<h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><ul><li>不使用共享内存来通信</li><li>使用通信来共享内存</li></ul><h3 id="channel的优点"><a href="#channel的优点" class="headerlink" title="channel的优点"></a>channel的优点</h3><ul><li>避免协程的竞争和数据冲突的问题</li><li>更高级的抽象，降低开发的难度，增加程序的可读性</li><li>模块间容易解耦，增强扩展性和可维护性</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">watch</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> &lt;-ch == <span class="hljs-number">1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;get 1&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">go</span> watch(ch)<br><br>ch &lt;- <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="channel的原理"><a href="#channel的原理" class="headerlink" title="channel的原理"></a>channel的原理</h3><p><img src="/2024/02/24/go%E7%9A%84channel/image-20240224195143474.png" alt="image-20240224195143474"></p><p>环形缓存可以大幅降低GC的开销</p><p><img src="/2024/02/24/go%E7%9A%84channel/image-20240224200009876.png" alt="image-20240224200009876"></p><h4 id="数据发送的原理"><a href="#数据发送的原理" class="headerlink" title="数据发送的原理"></a>数据发送的原理</h4><ul><li>编译阶段，会把 c&lt;-元素 转化为 runtime.chansend1()</li><li>直接传递,将数据直接拷贝到目标变量</li><li>放入缓存，将数据放入环形缓存，成功返回</li><li>休眠等待，将自己包装后放入sendq，休眠</li></ul><h4 id="数据接收的原理"><a href="#数据接收的原理" class="headerlink" title="数据接收的原理"></a>数据接收的原理</h4><ul><li>有等待的G，从G接收(无缓存)</li><li>有等待的G，从缓存接收（缓存满了）</li><li>接收缓存（缓存没满，直接send到缓存中通）</li><li>无等待的G，休眠（什么都没有，干等）</li></ul><h3 id="非阻塞channel1"><a href="#非阻塞channel1" class="headerlink" title="非阻塞channel1"></a>非阻塞channel1</h3><ul><li>使用select 可以使用channel的非阻塞特性</li><li>使用timer配合select可以实现超时的特性</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">10</span>)<br>ch2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">0</span>)<br><br>timer := time.NewTimer(time.Second * <span class="hljs-number">3</span>)<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-timer.C:<br>fmt.Println(<span class="hljs-string">&quot;time over&quot;</span>)<br><span class="hljs-keyword">case</span> &lt;-ch1:<br>fmt.Println(<span class="hljs-string">&quot;ch1 get v&quot;</span>)<br><span class="hljs-keyword">case</span> ch2 &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;:<br>fmt.Println(<span class="hljs-string">&quot;ch send v&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go的协程</title>
    <link href="/2024/02/24/go%E7%9A%84%E5%8D%8F%E7%A8%8B/"/>
    <url>/2024/02/24/go%E7%9A%84%E5%8D%8F%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="进程-线程-协程"><a href="#进程-线程-协程" class="headerlink" title="进程&amp;线程&amp;协程"></a>进程&amp;线程&amp;协程</h3><p>进程</p><ul><li>操作系统 的一个基本单位，OS通过进程来管理计算机的资源，提供服务和支持程序的运行</li><li>进程占用内存空间</li></ul><p>线程</p><ul><li><p>CPU调度的基本单位</p></li><li><p>每个进程可以拥有多个线程</p></li><li><p>线程占用CPU的时间</p></li><li><p>线程使用系统分配给进程的内存，线程之间共享内存</p></li></ul><p>线程的问题</p><ul><li>线程本身占用资源大</li><li>线程切换开销大</li><li>线程的操作开销大</li></ul><p>协程将一段程序的运行状态打包，可以在线程之间调度</p><p>协程的优点</p><ul><li>资源利用</li><li>快速调度</li><li>超高并发</li></ul><p>总结</p><ul><li>进程用来分配内存空间</li><li>线程用来里分配CPU时间</li><li>协程用来精细化利用线程（<strong>协程复用线程</strong>）</li></ul><h3 id="协程的本质"><a href="#协程的本质" class="headerlink" title="协程的本质"></a>协程的本质</h3><ul><li>runtime中，协程的本质是 一个 g结构体</li><li>stack：堆栈地址 （lo、hi）</li><li>gobuf 目前程序运行现场</li><li>atomicstatus：协程的状态</li></ul><p><img src="/2024/02/24/go%E7%9A%84%E5%8D%8F%E7%A8%8B/image-20240224151108486.png" alt="image-20240224151108486"></p><h3 id="线程的抽象"><a href="#线程的抽象" class="headerlink" title="线程的抽象"></a>线程的抽象</h3><ul><li>runtime中将 操作系统的线程抽象为 <strong>m</strong> 结构体</li><li>g0：go协程，操作调度器</li><li>curg： current g，目前 线程运行的g</li><li>mOS：操作系统线程的信息</li></ul><h3 id="协程是如何执行的"><a href="#协程是如何执行的" class="headerlink" title="协程是如何执行的"></a>协程是如何执行的</h3><p><img src="/2024/02/24/go%E7%9A%84%E5%8D%8F%E7%A8%8B/image-20240224153941032.png" alt="image-20240224153941032"></p><p>schedule-&gt;execute-&gt;gogo()汇编实现-&gt;业务方法-&gt;goexit-&gt;g0的 schedule-&gt;… 循环往复</p><p> <img src="/2024/02/24/go%E7%9A%84%E5%8D%8F%E7%A8%8B/image-20240224155223636.png" alt="image-20240224155223636"></p><ul><li>操作系统并不知道Goroutine的存在</li><li>操作系统线程执行一个调度循环，顺序执行Goroutine</li></ul><p>问题：</p><ul><li><p>顺序执行，无法并发，此时会引发协程的饥饿问题</p></li><li><p>多线程并发时，会发生抢夺协程队列的全局锁的情况（使用本地队列）</p></li></ul><h3 id="G-M-P调度模型"><a href="#G-M-P调度模型" class="headerlink" title="G-M-P调度模型"></a>G-M-P调度模型</h3><p>GMP调度模型用来解决<strong>全局锁的争抢问题</strong>&amp;<strong>顺序执行引发的饥饿问题</strong></p><h4 id="全局锁的争抢问题的解决"><a href="#全局锁的争抢问题的解决" class="headerlink" title="全局锁的争抢问题的解决"></a>全局锁的争抢问题的解决</h4><h5 id="p结构体-（processor-送料器）"><a href="#p结构体-（processor-送料器）" class="headerlink" title="p结构体 （processor 送料器）"></a>p结构体 （processor 送料器）</h5><ul><li>M与G之间的中介</li><li>p持有一些G，使得每次获取G的时候不用从全局中找</li><li>大大减少了并发冲突问题</li></ul><p><img src="/2024/02/24/go%E7%9A%84%E5%8D%8F%E7%A8%8B/image-20240224160538300.png" alt="image-20240224160538300"></p><p>本地全局都没有G，任务窃取，以增强线程的利用率</p><p>新建协程</p><ul><li>随机寻找一个p</li><li>将新协程放入 P的runnext（插队）</li><li>若本地队列都满了，放入全局队列</li></ul><h4 id="顺序执行引发的饥饿问题的解决"><a href="#顺序执行引发的饥饿问题的解决" class="headerlink" title="顺序执行引发的饥饿问题的解决"></a>顺序执行引发的饥饿问题的解决</h4><ul><li><p>如果协程顺序执行，会有饥饿问题</p></li><li><p>协程执行中间，将协程挂起，执行其他协程</p></li><li><p>完成<strong>系统调用</strong>时挂起，也可也<strong>主动</strong>(channel 锁。。)挂起</p></li><li><p>防止全局队列饥饿，<strong>本地队列随机抽取全局队列</strong> (每执行goroutine 61 次，从全局队列中取)</p></li></ul><p>问题：</p><ul><li>永远不主动挂起</li><li>永远不系统调用</li></ul><p>此时还是会造成协程的饥饿</p><p>总结</p><ul><li>基于系统调用和主动挂起，协程可能无法调度</li><li>基于协作的抢占式调度：业务主动调用 morestack()</li><li>基于信号的抢占式调度：强制线程调用 doSigPreempt()</li></ul><h3 id="协程太多怎么办"><a href="#协程太多怎么办" class="headerlink" title="协程太多怎么办"></a>协程太多怎么办</h3><ul><li>文件打开数限制</li><li>内存限制</li><li>调度开销过大</li></ul><h4 id="优化业务逻辑"><a href="#优化业务逻辑" class="headerlink" title="优化业务逻辑"></a>优化业务逻辑</h4><h4 id="利用-channel"><a href="#利用-channel" class="headerlink" title="利用 channel"></a>利用 channel</h4><ul><li>利用 channel 的缓存机制</li><li>启动协程前，向channel 发送一个空结构体</li><li>协程结束，去除一个空结构体</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">do</span><span class="hljs-params">(i <span class="hljs-type">int</span>, ch <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> &#123;<br>fmt.Println(i)<br>time.Sleep(time.Second)<br>&lt;-ch<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">3000</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; math.MaxInt; i++ &#123;<br>ch &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br><span class="hljs-keyword">go</span> do(i, ch)<br>&#125;<br><span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用协程池"><a href="#使用协程池" class="headerlink" title="使用协程池"></a>使用协程池</h4><p><img src="/2024/02/24/go%E7%9A%84%E5%8D%8F%E7%A8%8B/image-20240224174559462.png" alt="image-20240224174559462"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>进程、线程、协程</p><p>协程的本质：</p><ul><li>runtime的角度</li><li>线程的角度</li></ul><p>单线程模型</p><p>多线程模型</p><p>G-M-P模型</p><p>并发问题</p><p>饥饿问题</p><p>协程太多怎么优化</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go的map</title>
    <link href="/2024/02/24/go%E7%9A%84map/"/>
    <url>/2024/02/24/go%E7%9A%84map/</url>
    
    <content type="html"><![CDATA[<h3 id="map的结构"><a href="#map的结构" class="headerlink" title="map的结构"></a>map的结构</h3><p><img src="/2024/02/24/go%E7%9A%84map/image-20240224085758125.png" alt="image-20240224085758125"></p><ul><li>共有2^B 个桶</li><li>每个桶只能存放 8个 K*V，若多余8个，则放到溢出桶里面去</li></ul><h3 id="map的访问"><a href="#map的访问" class="headerlink" title="map的访问"></a>map的访问</h3><p> <img src="/2024/02/24/go%E7%9A%84map/image-20240224092532371.png" alt="image-20240224092532371"></p><h4 id="read"><a href="#read" class="headerlink" title="read"></a>read</h4><p><img src="/2024/02/24/go%E7%9A%84map/image-20240224092829267.png" alt="image-20240224092829267"></p><h4 id="write"><a href="#write" class="headerlink" title="write"></a>write</h4><p><img src="/2024/02/24/go%E7%9A%84map/image-20240224093039524.png" alt="image-20240224093039524"></p><p>使用拉链法实现 hashmap</p><p>每个桶中存储键hash 的前8位</p><p>桶超出 8个数据后，就会存储在溢出桶这个i部分</p><h3 id="map的扩容"><a href="#map的扩容" class="headerlink" title="map的扩容"></a>map的扩容</h3><p>当 hash碰撞严重时，扩容桶会指向下一个扩容桶，此时变成了长链表，效率会变低；可以使用map的扩容来减缓压力。</p><p>发生扩容的场景</p><ul><li>装载因子超过了6.5（平均每个槽6.5个key）</li><li>使用了太多的溢出桶（溢出桶的数量超过了普通的桶）</li></ul><p>扩容的类型</p><ul><li>等量扩容<ul><li>普通桶的数量不变，减少溢出桶的数量</li></ul></li><li>翻倍扩容<ul><li>增加普通桶的数量</li></ul></li></ul><p>步骤</p><ul><li>创建新的newBuckets</li><li>oldBuckets<strong>指向</strong>之前的buckets</li><li>采用渐进式驱逐，每次操作一个旧桶时，将旧桶驱逐到新桶</li><li>读取时不进行驱逐，只判断读取新桶还是旧桶</li><li>旧桶数据驱逐完成后，回收oldBuckets</li></ul><p><img src="/2024/02/24/go%E7%9A%84map/image-20240224094700993.png" alt="image-20240224094700993"></p><h3 id="map的并发问题"><a href="#map的并发问题" class="headerlink" title="map的并发问题"></a>map的并发问题</h3><p>map并发读写会 panic </p><p>A协程在桶中读数据时，B协程驱逐了这个桶；此时A协程会读取到错误的数据或者找不到数据</p><ul><li>使用 mutex</li><li>使用 sync.Map</li></ul><h4 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h4><p><img src="/2024/02/24/go%E7%9A%84map/image-20240224100056360.png" alt="image-20240224100056360"></p><p><img src="/2024/02/24/go%E7%9A%84map/image-20240224100931171.png" alt="image-20240224100931171"></p><p><img src="/2024/02/24/go%E7%9A%84map/image-20240224101124943.png" alt="image-20240224101124943"></p><p><img src="/2024/02/24/go%E7%9A%84map/image-20240224101153329.png" alt="image-20240224101153329"></p><p> <img src="/2024/02/24/go%E7%9A%84map/image-20240224101359497.png" alt="image-20240224101359497"> </p><p><img src="/2024/02/24/go%E7%9A%84map/image-20240224101651843.png" alt="image-20240224101651843"></p><ul><li>普通的map在扩容时bu会有并发问题</li><li>sync.Map 使用了 两个 map，分离扩容问题</li><li>不会引发扩容的操作（查、改）使用read map</li><li>可能引发扩容的操作（新增）使用dirty map</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> m sync.Map<br><br>m.Store(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>)<br>m.Store(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>)<br>m.Store(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>)<br><br><span class="hljs-comment">/*deleted := m.CompareAndDelete(&quot;k1&quot;, &quot;v2&quot;)</span><br><span class="hljs-comment">if deleted &#123;</span><br><span class="hljs-comment">fmt.Println(&quot;k1 is deleted&quot;)</span><br><span class="hljs-comment">&#125;*/</span><br>v, ok := m.Load(<span class="hljs-string">&quot;k2&quot;</span>)<br><span class="hljs-keyword">if</span> ok &#123;<br>fmt.Println(<span class="hljs-string">&quot;k2-&gt;:&quot;</span>, v)<br>&#125;<br>m.Range(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key, value any)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> key == <span class="hljs-string">&quot;k2&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>fmt.Println(key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker&amp;k8s</title>
    <link href="/2024/02/18/docker&amp;k8s/"/>
    <url>/2024/02/18/docker&amp;k8s/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> -f &amp;(docker ps -aq)<br></code></pre></td></tr></table></figure><p>docker client-&gt;restful api-&gt;docker deamon</p><p>.dockerignore</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d --name mysql3 -p <span class="hljs-number">3309</span>:<span class="hljs-number">3306</span> -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>docker-compose </p><ul><li><p>service</p></li><li><p>project</p></li></ul><p><img src="/2024/02/18/docker&k8s/image-20240220015037448.png" alt="image-20240220015037448"></p><p>miniKube可以用来运行 单节点的 k8s集群</p><p>k3s</p><p>k3d</p><p>kind</p><ul><li>miniKube 搭建环境</li><li>Kubectl 交互工具</li></ul><p>k8s</p><p>mit KV</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记录我的春招</title>
    <link href="/2024/02/08/%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E6%98%A5%E6%8B%9B/"/>
    <url>/2024/02/08/%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E6%98%A5%E6%8B%9B/</url>
    
    <content type="html"><![CDATA[<p>2024.2.8</p><ul><li>现在是凌晨 0：45，早睡，开始锻炼身体。 规律作息</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>广州行</title>
    <link href="/2024/02/07/%E5%B9%BF%E5%B7%9E%E8%A1%8C/"/>
    <url>/2024/02/07/%E5%B9%BF%E5%B7%9E%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<ul><li>第一天 （2.11）<ul><li>上午<ul><li>陈家祠</li><li>永庆坊</li><li>沙面岛</li><li>北京路<ul><li>大佛寺</li></ul></li><li>圣心大教堂</li></ul></li><li>下午<ul><li>海心桥</li><li>海心沙</li><li>广州塔</li></ul></li></ul></li></ul><p>​珠江新城高德置地广场春商场</p><ul><li>第二天(2.12)<ul><li><h2 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h2></li><li><h2 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h2></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux总结</title>
    <link href="/2024/02/01/linux%E6%80%BB%E7%BB%93/"/>
    <url>/2024/02/01/linux%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><ul><li>压缩文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zcvf 打包压缩后的文件名 要打包的文件 <br></code></pre></td></tr></table></figure><ul><li>解压文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar [-xvf] 压缩文件 -C 指定的路径<br><br>tar -xvf test.tar.gz -C /usr<br></code></pre></td></tr></table></figure><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p><img src="/2024/02/01/linux%E6%80%BB%E7%BB%93/image-20240201205026709.png" alt="image-20240201205026709"></p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x zookeeper<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>redis总结</title>
    <link href="/2024/01/29/redis%E6%80%BB%E7%BB%93/"/>
    <url>/2024/01/29/redis%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="redis的持久化"><a href="#redis的持久化" class="headerlink" title="redis的持久化"></a>redis的持久化</h3><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>redis可以创建快照来获取存储在内存里的数据在某个时间点上的副本。</p><p>redis默认使用RDB来持久化，在redis.conf配置文件中默认由此配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">save 900 1           <span class="hljs-comment">#在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。</span><br><br>save 300 10          <span class="hljs-comment">#在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。</span><br><br>save 60 10000        <span class="hljs-comment">#在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。</span><br><br></code></pre></td></tr></table></figure><p>Redis 提供了两个命令来生成 RDB 快照文件：</p><ul><li><code>save</code> : 同步保存操作，会阻塞 Redis 主线程；</li><li><code>bgsave</code> : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。</li></ul><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>AOF（append only file）的实时性更好。默认情况下，reids没有开启AOF,可以使用一下指令开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">appendonly <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h5 id="AOF的流程"><a href="#AOF的流程" class="headerlink" title="AOF的流程"></a>AOF的流程</h5><p>AOF 持久化功能的实现可以简单分为 5 步：</p><ul><li>**append:**所有的写命令会追加到AOF缓冲区</li><li><strong>write:</strong> 将AOF缓冲区的数据写到AOF文件中。这步 调用<code>write</code>函数(系统调用)，<code>write</code>将数据写到系统内核缓冲区</li><li><strong>fsync：</strong>fsycn向磁盘做同步操作</li><li><strong>rewrite：</strong>随着AOF文件越来越大，需要定期对AOF文件进行重写，压缩</li><li><strong>load：</strong> 当redis重启时，可以加载AOF文件进行数据恢复</li></ul><h5 id="AOF持久化的方式"><a href="#AOF持久化的方式" class="headerlink" title="AOF持久化的方式"></a>AOF持久化的方式</h5><ul><li><code>appendfsync always</code>：主线程调用 <code>write</code> 执行写操作后，后台线程（ <code>aof_fsync</code> 线程）立即会调用 <code>fsync</code> 函数同步 AOF 文件（刷盘），<code>fsync</code> 完成后线程返回，这样会严重降低 Redis 的性能（<code>write</code> + <code>fsync</code>）。</li><li><code>appendfsync everysec</code>：主线程调用 <code>write</code> 执行写操作后立即返回，由后台线程（ <code>aof_fsync</code> 线程）每秒钟调用 <code>fsync</code> 函数（系统调用）同步一次 AOF 文件（<code>write</code>+<code>fsync</code>，<code>fsync</code>间隔为 1 秒）</li><li><code>appendfsync no</code>：主线程调用 <code>write</code> 执行写操作后立即返回，让操作系统决定何时进行同步，Linux 下一般为 30 秒一次（<code>write</code>但不<code>fsync</code>，<code>fsync</code> 的时机由操作系统决定）</li></ul><h4 id="RDB比AOF优秀的地方"><a href="#RDB比AOF优秀的地方" class="headerlink" title="RDB比AOF优秀的地方"></a>RDB比AOF优秀的地方</h4><ul><li>RDB文件是一个紧凑的二进制文件，占用空间小，传输速度快，适合做备份和灾难恢复</li><li>RDB文件恢复数据的速度比AOF快，因为只需要加载一次文件即可</li><li>RDB持久化对Redis服务器的性能影响较小，因为大部分工作由子进程完成</li></ul><h4 id="AOF比RDB优秀的地方"><a href="#AOF比RDB优秀的地方" class="headerlink" title="AOF比RDB优秀的地方"></a>AOF比RDB优秀的地方</h4><ul><li>AOF文件可以实时或者近实时地记录Redis内存中的数据，因为它是每次写命令或者每秒钟同步一次。如果在同步之间发生故障，可能会丢失一部分数据，但是数据丢失的概率比RDB小。</li><li>AOF文件是一个文本文件，可以方便地查看和编辑。AOF文件中的命令是Redis协议格式的，可以直接用Redis客户端来执行。</li><li>AOF文件可以自动进行重写，以减少冗余命令和文件体积。重写过程不影响Redis服务器的正常服务，也不会丢失任何数据。</li></ul><h4 id="考虑角度"><a href="#考虑角度" class="headerlink" title="考虑角度"></a>考虑角度</h4><ul><li>数据的完整性</li><li>数据恢复的速度</li><li>磁盘的占用空间</li><li>数据的可读性</li></ul><p>具体的 建议：</p><ul><li>数据完整性要求不高，可以使用RDB或者是将AOF的同步频率设置为每秒一次</li><li>如果要数据尽可能不丢失，可只使用</li></ul><h3 id="redis的内存管理"><a href="#redis的内存管理" class="headerlink" title="redis的内存管理"></a>redis的内存管理</h3><p>过期数据的删除策略</p><ol><li><strong>惰性删除：</strong>只有在取key的时候才对数据进行过期检查。这样对CPU友好，但可能造成太多key没有被删除。</li><li><strong>定期删除：</strong>每隔一段时间，抽取一批key进行过期检查。</li></ol><p>redis采取惰性删除+定期删除的策略</p><h3 id="redis的事务"><a href="#redis的事务" class="headerlink" title="redis的事务"></a>redis的事务</h3><h3 id="redis的生成问题"><a href="#redis的生成问题" class="headerlink" title="redis的生成问题"></a>redis的生成问题</h3><table><thead><tr><th></th><th>缓存穿透</th><th>缓存击穿</th><th>缓存雪崩</th></tr></thead><tbody><tr><td>cache</td><td>no</td><td>no</td><td>yes(但是过期了)</td></tr><tr><td>DB</td><td>no</td><td>yes</td><td>yes</td></tr></tbody></table><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>大量不合理的key：缓存和数据库中都不存在。这导致大量请求直接达到了数据库上。</p><ol><li><strong>接口限流：</strong>根据用户或者IP对接口进行限流，对于异常频繁的访问采取黑名单机制</li><li><strong>布隆过滤器：</strong>不存在就不存在；存在不一定存在</li></ol><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>请求的key为热点数据，数据不在缓存中，数据库中存在</p><ol><li>延长过期时间</li><li>提前预热数据，将数据存入缓存中，设置合理的过期时间，保证在秒杀结束前，数据不会过期</li></ol><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>大量缓存同时失效，大量请求访问数据库</p><ol><li>采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。</li><li>限流，避免同时处理大量的请求。</li><li>多级缓存，例如本地缓存+Redis 缓存的组合，当 Redis 缓存出现问题时，还可以从本地缓存中获取到部分数据。</li></ol><p><strong>针对热点缓存失效的情况：</strong></p><ol><li>设置不同的失效时间比如随机设置缓存的失效时间。</li><li>缓存永不失效（不太推荐，实用性太差）。</li><li>缓存预热，也就是在程序启动后或运行过程中，主动将热点数据加载到缓存中。</li></ol><p><strong>缓存预热如何实现？</strong></p><p>常见的缓存预热方式有两种：</p><ol><li>使用定时任务，比如 xxl-job，来定时触发缓存预热的逻辑，将数据库中的热点数据查询出来并存入缓存中。</li><li>使用消息队列，比如 Kafka，来异步地进行缓存预热，将数据库中的热点数据的主键或者 ID 发送到消息队列中，然后由缓存服务消费消息队列中的数据，根据主键或者 ID 查询数据库并更新缓存</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>重写redis组件</title>
    <link href="/2024/01/19/%E9%87%8D%E5%86%99redis%E7%BB%84%E4%BB%B6/"/>
    <url>/2024/01/19/%E9%87%8D%E5%86%99redis%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="GO的优点"><a href="#GO的优点" class="headerlink" title="GO的优点"></a>GO的优点</h3><ul><li><p>直接编译为二进制。没有虚拟化损失</p></li><li><p>自带运行环境、无需处理GC问题</p></li><li><p>一次编码可以使用多种平台</p></li><li><p>超强的并发支持和并发易用性</p></li><li><p>Go没有对象、没有类、没有继承</p></li><li><p>Go通过组合匿名字段来达到类似继承的效果</p></li><li><p>去除了面向对象中复杂而冗余的部分</p></li><li><p>保留了基本的面向对象的特性</p></li></ul><p>使用Modules </p><ul><li>go get XXX</li><li>go get <a href="mailto:&#x58;&#x58;&#x58;&#64;&#48;&#46;&#49;&#x33;">&#x58;&#x58;&#x58;&#64;&#48;&#46;&#49;&#x33;</a></li></ul><h3 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h3><h3 id="runtime-的介绍"><a href="#runtime-的介绍" class="headerlink" title="runtime 的介绍"></a>runtime 的介绍</h3><p>go的runtime被编译为用户程序的一部分，和程序一起运行</p><ul><li><p>内存管理</p></li><li><p>GC</p></li><li><p>协程调度</p></li><li><p>屏蔽一定的系统调用的差异性的能力</p></li><li><p>一些go的关键字回转化为 runtime中的函数</p><p>  <img src="/2024/01/19/%E9%87%8D%E5%86%99redis%E7%BB%84%E4%BB%B6/image-20240119210332409.png" alt="image-20240119210332409"></p></li></ul><p><img src="/2024/01/19/%E9%87%8D%E5%86%99redis%E7%BB%84%E4%BB%B6/image-20240119211356006.png" alt="image-20240119211356006"></p><ul><li><p>词法分析：将代码分解为最小的语义化结构的片段</p></li><li><p>句法分析：分解为语法树 SST</p></li><li><p>语义分析：类型检查、类型推断、查看类型是否匹配、逃逸分析、函数调用内联 </p></li><li><p>SSA代码分析</p><ul><li>$env:GOSSAFUNC&#x3D;”main” </li><li>go build</li></ul></li><li><p>查看plan9 汇编代码: go build -gcflags -S main.go</p></li></ul><h3 id="空结构体"><a href="#空结构体" class="headerlink" title="空结构体"></a>空结构体</h3><ul><li><p>空结构体的地址均相同</p></li><li><p>空结构体主要是为了节省内存</p></li><li><p>用途： hashset、channel的类型</p></li></ul><h3 id="数据类型的长度"><a href="#数据类型的长度" class="headerlink" title="数据类型的长度"></a>数据类型的长度</h3><ul><li>使用 unsafe.Sizeof(uint(1)) 求数据的长度</li><li>int和指针的占用内存大小得看机器字长</li></ul><h3 id="nil、空接口和空结构体的区别"><a href="#nil、空接口和空结构体的区别" class="headerlink" title="nil、空接口和空结构体的区别"></a>nil、空接口和空结构体的区别</h3><h4 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h4><ul><li>nil 是空，但不一定是空指针</li><li>nil是六种类型的零值:pointer interface func channel map slice</li><li>虽然为nil，但每种类型的nil是不同的，无法比较</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// interface pointer func chanel slice map can be nil</span><br><span class="hljs-keyword">var</span> a *<span class="hljs-type">int</span><br>fmt.Println(a == <span class="hljs-literal">nil</span>)<br><br><span class="hljs-keyword">var</span> b <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br>fmt.Println(b == <span class="hljs-literal">nil</span>)<br><br><span class="hljs-keyword">var</span> c <span class="hljs-keyword">interface</span>&#123;&#125;<br>fmt.Println(c == <span class="hljs-literal">nil</span>)<br><br><span class="hljs-keyword">var</span> d <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span><br>fmt.Println(d == <span class="hljs-literal">nil</span>)<br><br><span class="hljs-keyword">var</span> e <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span><br>fmt.Println(e == <span class="hljs-literal">nil</span>)<br><br><span class="hljs-keyword">var</span> f []<span class="hljs-type">int</span><br>fmt.Println(f == <span class="hljs-literal">nil</span>)<br>   <span class="hljs-comment">//true</span><br>   <span class="hljs-comment">//true</span><br>   <span class="hljs-comment">//true</span><br>   <span class="hljs-comment">//true</span><br>   <span class="hljs-comment">//true</span><br>   <span class="hljs-comment">//true</span><br><br></code></pre></td></tr></table></figure><h4 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h4><ul><li>两个属性都为 nil时，该interface才为nil接口</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x <span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-keyword">var</span> y *<span class="hljs-type">string</span><br><br>fmt.Println(x == <span class="hljs-literal">nil</span>)<br>fmt.Println(y == <span class="hljs-literal">nil</span>)<br>x = y<br><span class="hljs-comment">// 完成赋值后，为nil的interface的type有了属性，此时该interface 不为 nil</span><br>fmt.Println(x == <span class="hljs-literal">nil</span>)<br>fmt.Println(y == <span class="hljs-literal">nil</span>)<br><br>   <span class="hljs-comment">//true</span><br>   <span class="hljs-comment">//true</span><br>   <span class="hljs-comment">//false</span><br>   <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="空结构体-1"><a href="#空结构体-1" class="headerlink" title="空结构体"></a>空结构体</h4><ul><li>空结构体是Go中的非常特殊的类型</li><li>空结构体的值不是nil </li><li>空结构体也不是nil，但都是相同的（zerobase）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> g <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-keyword">var</span> h <span class="hljs-keyword">struct</span>&#123;&#125;<br>fmt.Println(&amp;g == &amp;h)<br>fmt.Println(g == h)<br><span class="hljs-comment">//false</span><br><span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>nil是多个类型的零值，或者空值</li><li>空结构体的指针和零值都不是nil</li><li>空接口的零值是nil，一旦有了类型信息就不是nil</li></ul><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> stringStruct <span class="hljs-keyword">struct</span> &#123;<br>str unsafe.Pointer<br><span class="hljs-built_in">len</span> <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h4><ul><li>一种统一的字符集</li><li>其囊括了159种文字144679个字符</li><li>14万个字符至少需要3个字节表示</li></ul><h4 id="UTF-8变长编码"><a href="#UTF-8变长编码" class="headerlink" title="UTF-8变长编码"></a>UTF-8变长编码</h4><ul><li>Unicode的一种变长格式</li><li>128个US-ASCII字符只需要一个字节编码</li><li>西方常用字符需要两个字节</li><li>其他字符需要三个字节，极少数需要四个字节</li></ul><h4 id="其中"><a href="#其中" class="headerlink" title="其中"></a>其中</h4><ul><li>对字符串使用len得到的是字节数而不是字符数</li><li>字符串直接用<strong>下标</strong>访问时得到的是字节</li><li>字符串被range时，被解码成rune类型的字符</li></ul><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><h3 id="sync-Map的使用"><a href="#sync-Map的使用" class="headerlink" title="sync.Map的使用"></a>sync.Map的使用</h3><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><h4 id="协程的抽象"><a href="#协程的抽象" class="headerlink" title="协程的抽象"></a>协程的抽象</h4><p><img src="/2024/01/19/%E9%87%8D%E5%86%99redis%E7%BB%84%E4%BB%B6/image-20240123223754893.png" alt="image-20240123223754893"></p><ul><li>协程的本质是一个g结构体</li><li>gobuf表示程序运行现场</li></ul><h4 id="线程的抽象"><a href="#线程的抽象" class="headerlink" title="线程的抽象"></a>线程的抽象</h4><ul><li>runtime中将操作系统线程抽象为m结构体</li><li>其中g0是操作调度器</li><li>curg 表示目前线程运行的g</li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="atomic操作"><a href="#atomic操作" class="headerlink" title="atomic操作"></a>atomic操作</h4><ul><li>atomic是硬件层面加锁的机制</li><li>只能用于简单变量的简单操作 cas + - load</li><li>保证操作一个变量的时候，其他协程&#x2F;线程无法访问</li></ul><h4 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h4><p><img src="/2024/01/19/%E9%87%8D%E5%86%99redis%E7%BB%84%E4%BB%B6/image-20240124113630509.png" alt="image-20240124113630509"></p><p>其中 WaiterShift表示 等待锁的协程个数</p><h5 id="正常模式-lock"><a href="#正常模式-lock" class="headerlink" title="正常模式 lock"></a>正常模式 lock</h5><ul><li><p>尝试使用CAS加锁</p></li><li><p>无法直接获取，进行多次自旋尝试</p></li><li><p>多次尝试失败，进入sema队列休眠</p></li><li><p>正常模式下可能会有锁饥饿问题</p></li></ul><h5 id="饥饿模式"><a href="#饥饿模式" class="headerlink" title="饥饿模式"></a>饥饿模式</h5><ul><li>当协程等待超过锁的时间超过了1ms，切换到饥饿模式</li><li>饥饿模式中，不自旋，新来的协程直接进入sema休眠</li><li>被唤醒的协程直接获取锁</li></ul><p>锁竞争激烈时，互斥锁进入饥饿模式</p><p>· </p><p>socket连接</p><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><p><img src="/2024/01/19/%E9%87%8D%E5%86%99redis%E7%BB%84%E4%BB%B6/image-20240124203722629.png" alt="image-20240124203722629"></p><h4 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h4><p><img src="/2024/01/19/%E9%87%8D%E5%86%99redis%E7%BB%84%E4%BB%B6/image-20240124203923073.png" alt="image-20240124203923073"></p><h4 id="多路复用epoll-event-pool"><a href="#多路复用epoll-event-pool" class="headerlink" title="多路复用epoll event-pool"></a>多路复用epoll event-pool</h4><p><img src="/2024/01/19/%E9%87%8D%E5%86%99redis%E7%BB%84%E4%BB%B6/image-20240124210714281.png" alt="image-20240124210714281"></p><p><img src="/2024/01/19/%E9%87%8D%E5%86%99redis%E7%BB%84%E4%BB%B6/image-20240124210925706.png" alt="image-20240124210925706"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>短链服务</title>
    <link href="/2024/01/16/%E7%9F%AD%E9%93%BE%E6%9C%8D%E5%8A%A1/"/>
    <url>/2024/01/16/%E7%9F%AD%E9%93%BE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://t.doruo.cn/">链接缩短工具 (doruo.cn)</a></p><p><a href="https://juejin.cn/post/7312353213348741132">短链接的原理以及其实现 - 掘金 (juejin.cn)</a></p><p>使用组件的模式</p><p>vue + element</p><p><img src="/2024/01/16/%E7%9F%AD%E9%93%BE%E6%9C%8D%E5%8A%A1/image-20240117104104708.png" alt="image-20240117104104708"></p><p><img src="/2024/01/16/%E7%9F%AD%E9%93%BE%E6%9C%8D%E5%8A%A1/image-20240116210957354.png" alt="image-20240116210957354"></p><p>string 缓存 观看数量</p><p>zset 排行榜</p><p>分布式锁</p><p>第二天的排行榜怎么根据前天的排行榜来排序？</p><p><img src="/2024/01/16/%E7%9F%AD%E9%93%BE%E6%9C%8D%E5%8A%A1/image-20240117213003181.png" alt="image-20240117213003181"></p><p> bool : false </p><p>  integer: 0 </p><p>  float: 0.0 </p><p>  string: “” </p><p>  pointer, function, interface, slice, channel, map: nil</p><p>加盐（原始密码后面补随机字符串）+增加循环加密次数</p><p>session cookie</p><p><a href="https://juejin.cn/post/6844904034181070861">傻傻分不清之 Cookie、Session、Token、JWT - 掘金 (juejin.cn)</a></p><ul><li><p>橙卡的视频</p></li><li><p>上面的 URL</p></li><li><p>网路</p></li><li><h2 id="牛客-go刷题"><a href="#牛客-go刷题" class="headerlink" title="牛客 go刷题"></a>牛客 go刷题</h2></li><li><p>leetcode</p></li></ul><p>​</p><p>基于session</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go常用数据结构</title>
    <link href="/2024/01/12/Go%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2024/01/12/Go%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="高效拼接字符串"><a href="#高效拼接字符串" class="headerlink" title="高效拼接字符串"></a>高效拼接字符串</h2><h3 id="拼接字符串的方式"><a href="#拼接字符串的方式" class="headerlink" title="拼接字符串的方式"></a>拼接字符串的方式</h3><ul><li><ul><li></li></ul></li><li>fmt.Sprintf</li><li>bytes.buffer</li><li>strings.builder</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">const</span> letterBytes = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">randomString</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>b := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> b &#123;<br>b[i] = letterBytes[rand.Intn(<span class="hljs-built_in">len</span>(letterBytes))]<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(b)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">plusConcat</span><span class="hljs-params">(n <span class="hljs-type">int</span>, str <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>s := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>s += str<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sprintfConcat</span><span class="hljs-params">(n <span class="hljs-type">int</span>, str <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>s := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>s = fmt.Sprintf(<span class="hljs-string">&quot;%s%s&quot;</span>, s, str)<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">builderConcat</span><span class="hljs-params">(n <span class="hljs-type">int</span>, str <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> builder strings.Builder<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>builder.WriteString(str)<br>&#125;<br><span class="hljs-keyword">return</span> builder.String()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bufferConcat</span><span class="hljs-params">(n <span class="hljs-type">int</span>, s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>buf := <span class="hljs-built_in">new</span>(bytes.Buffer)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>buf.WriteString(s)<br>&#125;<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">byteConcat</span><span class="hljs-params">(n <span class="hljs-type">int</span>, str <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>buf = <span class="hljs-built_in">append</span>(buf, str...)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(buf)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preByteConcat</span><span class="hljs-params">(n <span class="hljs-type">int</span>, str <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">0</span>, n*<span class="hljs-built_in">len</span>(str))<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>buf = <span class="hljs-built_in">append</span>(buf, str...)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(buf)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="benchmark-代码"><a href="#benchmark-代码" class="headerlink" title="benchmark 代码"></a>benchmark 代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">benchmark</span><span class="hljs-params">(b *testing.B, f <span class="hljs-keyword">func</span>(<span class="hljs-type">int</span>, <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span>) &#123;<br><span class="hljs-keyword">var</span> str = randomString(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>f(<span class="hljs-number">10000</span>, str)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPlusConcat</span><span class="hljs-params">(b *testing.B)</span></span>    &#123; benchmark(b, plusConcat) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkSprintfConcat</span><span class="hljs-params">(b *testing.B)</span></span> &#123; benchmark(b, sprintfConcat) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkBuilderConcat</span><span class="hljs-params">(b *testing.B)</span></span> &#123; benchmark(b, builderConcat) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkBufferConcat</span><span class="hljs-params">(b *testing.B)</span></span>  &#123; benchmark(b, bufferConcat) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkByteConcat</span><span class="hljs-params">(b *testing.B)</span></span>    &#123; benchmark(b, byteConcat) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPreByteConcat</span><span class="hljs-params">(b *testing.B)</span></span> &#123; benchmark(b, preByteConcat) &#125;<br><br></code></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">Forrest@LAPTOP-32G4HDVI MINGW64 /d/Go_WorkSpace/面经/connectStrings (main)<br>$  go <span class="hljs-built_in">test</span> -bench=<span class="hljs-string">&quot;Concat$&quot;</span> -benchmem .<br>goos: windows<br>goarch: amd64<br>pkg: demo<br>cpu: AMD Ryzen 7 5800H with Radeon Graphics<br>BenchmarkPlusConcat-16                16          79042431 ns/op        530998053 B/op     10024 allocs/op<br>BenchmarkSprintfConcat-16              9         115482900 ns/op        833870728 B/op     34211 allocs/op<br>BenchmarkBuilderConcat-16           9648            109838 ns/op          514801 B/op         23 allocs/op<br>BenchmarkBufferConcat-16           12285             95907 ns/op          368576 B/op         13 allocs/op<br>BenchmarkByteConcat-16             10000            122219 ns/op          621297 B/op         24 allocs/op<br>BenchmarkPreByteConcat-16          21231             59183 ns/op          212993 B/op          2 allocs/op<br>PASS<br>ok      demo    8.840s<br><br></code></pre></td></tr></table></figure><p>其中的 <code>-bench=Concat$</code> 中的<code>$</code>表示行尾，因此这将匹配以”Concat”结尾的测试函数。</p><p>拼接大量字符串优先使用 <code>stirngs.builder</code></p><h3 id="strings-builder-的扩容策略"><a href="#strings-builder-的扩容策略" class="headerlink" title="strings.builder 的扩容策略"></a>strings.builder 的扩容策略</h3><p>​</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestBuilderCap</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>str := randomString(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">var</span> builder strings.Builder<br><span class="hljs-built_in">cap</span> := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++ &#123;<br>builder.WriteString(str)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">cap</span> != builder.Cap() &#123;<br><span class="hljs-built_in">cap</span> = builder.Cap()<br>fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-built_in">cap</span>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Forrest@LAPTOP-32G4HDVI MINGW64 /d/Go_WorkSpace/面经/connectStrings (main)<br>$ go <span class="hljs-built_in">test</span> -v<br>=== RUN   TestBuilderConcat<br>16 32 64 128 256 512 896 1408 2048 3072 4096 5376 6912 9472 12288 16384 21760 28672 40960 57344 73728 98304 131072 --- PASS: TestBuilderConcat (0.00s)<br>PASS<br>ok      demo    0.709s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sycn.once的使用和原理</title>
    <link href="/2024/01/11/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/01/11/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="读写锁和互斥锁的性能比较"><a href="#读写锁和互斥锁的性能比较" class="headerlink" title="读写锁和互斥锁的性能比较"></a>读写锁和互斥锁的性能比较</h2><p>定义互斥锁和读写锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">type</span> RW <span class="hljs-keyword">interface</span> &#123;<br>Write()<br>Read()<br>&#125;<br><br><span class="hljs-keyword">const</span> cost = time.Microsecond<br><br><span class="hljs-keyword">type</span> Lock <span class="hljs-keyword">struct</span> &#123;<br>count <span class="hljs-type">int</span><br>mu    sync.Mutex<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Lock)</span></span> Write() &#123;<br>l.mu.Lock()<br>l.count++<br>time.Sleep(cost)<br>l.mu.Unlock()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Lock)</span></span> Read() &#123;<br>l.mu.Lock()<br>time.Sleep(cost)<br>_ = l.count<br>l.mu.Unlock()<br>&#125;<br><br><span class="hljs-keyword">type</span> RWLock <span class="hljs-keyword">struct</span> &#123;<br>count <span class="hljs-type">int</span><br>mu    sync.RWMutex<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *RWLock)</span></span> Write() &#123;<br>l.mu.Lock()<br>time.Sleep(cost)<br>    l.count++<br>l.mu.Unlock()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *RWLock)</span></span> Read() &#123;<br>l.mu.RLock()<br>_ = l.count<br>time.Sleep(cost)<br>l.mu.RUnlock()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用benchmark 测试互斥锁和读写锁的性能差异</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"> <br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">benchmark</span><span class="hljs-params">(b *testing.B, lock RW, read, write <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br><span class="hljs-comment">//read</span><br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; read*<span class="hljs-number">100</span>; j++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>lock.Read()<br>wg.Done()<br>&#125;()<br>&#125;<br><span class="hljs-comment">//write</span><br><span class="hljs-keyword">for</span> k := <span class="hljs-number">0</span>; k &lt; write*<span class="hljs-number">100</span>; k++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>lock.Write()<br>wg.Done()<br>&#125;()<br>&#125;<br>wg.Wait()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkReadMore</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmark(b, &amp;Lock&#123;&#125;, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkReadMoreWithRW</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmark(b, &amp;RWLock&#123;&#125;, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkReadWriteEqual</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmark(b, &amp;RWLock&#123;&#125;, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkWriteMore</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmark(b, &amp;Lock&#123;&#125;, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkWriteMoreWithRW</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmark(b, &amp;RWLock&#123;&#125;, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p> 测试结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">Forrest@LAPTOP-32G4HDVI MINGW64 /d/Go_WorkSpace/面经/mutex (main)<br>$ go <span class="hljs-built_in">test</span> -bench .<br>goos: windows<br>goarch: amd64<br>pkg: deom<br>cpu: AMD Ryzen 7 5800H with Radeon Graphics<br>BenchmarkReadMore-16                   1        13955332000 ns/op<br>BenchmarkReadMoreWithRW-16             1        1462559300 ns/op<br>BenchmarkReadWriteEqual-16             1        7310712800 ns/op<br>BenchmarkWriteMore-16                  1        14232708800 ns/op<br>BenchmarkWriteMoreWithRW-16            1        12806891200 ns/op<br>PASS<br>ok      deom    50.568s<br><br></code></pre></td></tr></table></figure><p>可以看出 读写锁在读多的情形下更省时间</p><blockquote><p>互斥锁有两种状态：正常状态和饥饿状态。</p><p>在正常状态下，所有等待锁的 goroutine 按照FIFO顺序等待。唤醒的 goroutine 不会直接拥有锁，而是会和新请求锁的 goroutine 竞争锁的拥有。新请求锁的 goroutine 具有优势：它正在 CPU 上执行，而且可能有好几个，所以刚刚唤醒的 goroutine 有很大可能在锁竞争中失败。在这种情况下，这个被唤醒的 goroutine 会加入到等待队列的前面。 如果一个等待的 goroutine 超过 1ms 没有获取锁，那么它将会把锁转变为饥饿模式。</p><p>在饥饿模式下，锁的所有权将从 unlock 的 goroutine 直接交给交给等待队列中的第一个。新来的 goroutine 将不会尝试去获得锁，即使锁看起来是 unlock 状态, 也不会去尝试自旋操作，而是放在等待队列的尾部。</p><p>如果一个等待的 goroutine 获取了锁，并且满足一以下其中的任何一个条件：(1)它是队列中的最后一个；(2)它等待的时候小于1ms。它会将锁的状态转换为正常状态。</p><p>正常状态有很好的性能表现，饥饿模式也是非常重要的，因为它能阻止尾部延迟的现象。</p></blockquote><h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><p>可以使用 <code>sync.Once</code> 实现单例模式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">var</span> instance *Instance<br><span class="hljs-keyword">var</span> once sync.Once<br><br><span class="hljs-keyword">type</span> Instance <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span> *Instance &#123;<br>once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>instance = &amp;Instance&#123;&#125;<br>&#125;)<br><span class="hljs-keyword">return</span> instance<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>sync.Once</code>的实现 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Once is an object that will perform exactly one action.</span><br><span class="hljs-keyword">type</span> Once <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// done indicates whether the action has been performed.</span><br><span class="hljs-comment">// It is first in the struct because it is used in the hot path.</span><br><span class="hljs-comment">// The hot path is inlined at every call site.</span><br><span class="hljs-comment">// Placing done first allows more compact instructions on some architectures (amd64/x86),</span><br><span class="hljs-comment">// and fewer instructions (to calculate offset) on other architectures.</span><br>done <span class="hljs-type">uint32</span><br>m    Mutex<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o *Once)</span></span> Do(f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>) &#123;<br><span class="hljs-keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="hljs-number">0</span> &#123; <span class="hljs-comment">// check</span><br><span class="hljs-comment">// Outlined slow-path to allow inlining of the fast-path.</span><br>o.doSlow(f)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o *Once)</span></span> doSlow(f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>) &#123;<br>o.m.Lock()                          <span class="hljs-comment">// lock</span><br><span class="hljs-keyword">defer</span> o.m.Unlock()<br><br><span class="hljs-keyword">if</span> o.done == <span class="hljs-number">0</span> &#123;                    <span class="hljs-comment">// check</span><br><span class="hljs-keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="hljs-number">1</span>)<br>f()<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>done 在热路径中，done 放在第一个字段，能够减少 CPU 指令，也就是说，这样做能够提升性能。</p><p>简单解释下这句话：</p><ol><li>热路径(hot path)是程序非常频繁执行的一系列指令，sync.Once 绝大部分场景都会访问 <code>o.done</code>，在热路径上是比较好理解的，如果 hot path 编译后的机器码指令更少，更直接，必然是能够提升性能的。</li><li>为什么放在第一个字段就能够减少指令呢？因为结构体第一个字段的地址和结构体的指针是相同的，如果是第一个字段，直接对结构体的指针解引用即可。如果是其他的字段，除了结构体指针外，还需要计算与第一个值的偏移(calculate offset)。在机器码中，偏移量是随指令传递的附加值，CPU 需要做一次偏移值与指针的加法运算，才能获取要访问的值的地址。因为，访问第一个字段的机器代码更紧凑，速度更快。</li></ol><h2 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">var</span> buf, _ = json.Marshal(&amp;Student&#123;<br>name:  <span class="hljs-string">&quot;YST&quot;</span>,<br>Score: <span class="hljs-number">19</span>,<br>&#125;)<br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>name  <span class="hljs-type">string</span><br>Score <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">var</span> StudentPool = sync.Pool&#123;New: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>(Student)<br>&#125;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getStu</span><span class="hljs-params">()</span></span> *Student &#123;<br><span class="hljs-keyword">return</span> StudentPool.Get().(*Student)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">putStu</span><span class="hljs-params">(stu *Student)</span></span> &#123;<br>StudentPool.Put(stu)<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>定义一个<code>student </code>结构体和<code>studentPool</code>的pool池</li><li>封装get和put操作</li></ul><p>写benchmark 测试 有 pool和无的内存分配的区别</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMarshal</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>stu := &amp;Student&#123;&#125;<br>err := json.Unmarshal(buf, stu)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br> fmt.Println(<span class="hljs-string">&quot;err:&quot;</span>, err)<br> <span class="hljs-keyword">continue</span><br>        &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMarshalWithPool</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>stu := getStu()<br>err := json.Unmarshal(buf, stu)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;err:&quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br>putStu(stu)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go <span class="hljs-built_in">test</span> -bench . -benchmem<br></code></pre></td></tr></table></figure><p>测试结果：可以看出使用 **pool ** 的每次操作所分配内存会更少</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">Forrest@LAPTOP-32G4HDVI MINGW64 /d/Go_WorkSpace/面经/pool (main)<br>$  go <span class="hljs-built_in">test</span> -bench . -benchmem<br>goos: windows<br>goarch: amd64<br>pkg: demo<br>cpu: AMD Ryzen 7 5800H with Radeon Graphics<br>BenchmarkMarshal-16              2651370               454.0 ns/op           248 B/op          6 allocs/op<br>BenchmarkMarshalWithPool-16      2634880               442.2 ns/op           224 B/op          5 allocs/op<br>PASS<br>ok      demo    4.011s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>单例模式，once</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIT-6.824-分布式系统</title>
    <link href="/2024/01/08/MIT-6-824-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/01/08/MIT-6-824-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>Intro </p><p> 33 </p><p>parallelize</p><p><img src="/2024/01/08/MIT-6-824-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/image-20240111221424037.png" alt="image-20240111221424037"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go Test 单元测试</title>
    <link href="/2024/01/06/Go-Test-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/01/06/Go-Test-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<ul><li><p>subtest</p></li><li><p>table-driven test</p></li><li><p>helper</p></li><li><p>基准测试</p></li><li><p>mock</p></li></ul><p>当待测试的函数&#x2F;对象的依赖关系很复杂，并且有些依赖不能直接创建，例如数据库连接、文件I&#x2F;O等。这种场景就非常适合使用 mock&#x2F;stub 测试。简单来说，就是用 mock 对象模拟依赖项的行为。</p>]]></content>
    
    
    
    <tags>
      
      <tag>单元测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go进阶训练营第五期笔记</title>
    <link href="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1-微服务概览"><a href="#1-1-微服务概览" class="headerlink" title="1.1 微服务概览"></a>1.1 微服务概览</h2><p>化繁为简，分而治之</p><p>SOA 【service-oriented Architecture】（面向服务的架构），而微服务就是SOA的最佳实践</p><ul><li>小即是美：小的服务代码量少，bug少，易测试，易维护 </li><li>单一职责：一个服务也只需要做好一件事情</li><li>尽可能早的创建原型：尽可能早的提供服务的API，建立服务契约，达成服务间沟通的一致约定</li><li>可移植性比效率更加重要：服务间的轻量级交互协议在效率和可移植性上，首先要考虑兼容性和可移植性</li></ul><p>微服务的定义：</p><p>​围绕业务功能构建的，服务关注单一的业务，服务间采用轻量级的通信机制，可以完全独立部署，可以使用不同的编程语言和数据存储技术。微服务架构通过业务拆分实现服务组件化，通过组件快速开发系统，其中业务单一的服务组件可以独立部署，使得整个系统变得清晰灵活。</p><ul><li>原子服务</li><li>独立部署和交互</li><li>隔离部署</li><li>去中心化服务治理</li></ul><p>缺点：</p><ul><li>运维困难</li><li>测试困难 </li><li>微服务架构是分布式系统，由此会带来固有的复杂性。开发者不得不使用RPC或者是消息传递来实现进程间的通信；此外，必须写代码来处理消息传递中速度过慢或者是消息不可达等局部失效的问题。</li><li>分区的数据库架构，同时更新多个业务的主体的事务很普遍。</li><li>服务模块间的依赖，应用升级可能会波及多个服务模块的修改</li></ul><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231229111639551.png" alt="image-20231229111639551"></p><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231229103052768.png" alt="image-20231229103052768"></p><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231229105822720.png" alt="image-20231229105822720"></p><p>可用性 &amp; 兼容性</p><p>Design for failure 思想</p><ul><li>隔离</li><li>负载均衡</li><li>负载保护</li><li>超时控制</li><li>限流</li><li>重试</li><li>降级</li></ul><h2 id="1-2-微服务设计"><a href="#1-2-微服务设计" class="headerlink" title="1.2 微服务设计"></a>1.2 微服务设计</h2><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231229131903541.png" alt="image-20231229131903541"></p><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231229132647982.png" alt="image-20231229132647982"></p><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231229133934723.png" alt="image-20231229133934723"></p><p>认证  授权</p><p> API gateway </p><p> BFF </p><h2 id="1-3-gRPC-服务发现"><a href="#1-3-gRPC-服务发现" class="headerlink" title="1.3 gRPC &amp; 服务发现"></a>1.3 gRPC &amp; 服务发现</h2><h3 id="gRPC-是什么"><a href="#gRPC-是什么" class="headerlink" title="gRPC 是什么"></a>gRPC 是什么</h3><p><code>high performance，open-source universal RPC frameWork</code></p><p>gRPC 是一个高性能、开源、通用的远程过程调用（RPC）框架，由Google开发并开源。它基于HTTP&#x2F;2协议，使用Protocol Buffers（protobuf）作为接口描述语言。gRPC支持多种编程语言，包括C++, Java, Python, Go, Ruby等。</p><h3 id="gRPC的特点"><a href="#gRPC的特点" class="headerlink" title="gRPC的特点"></a>gRPC的特点</h3><ol><li>多语言：语言中立，支持多种语言</li><li>轻量级、高性能：序列化支持PB（protocol buffer）和json</li><li>可插拔</li><li>IDL（接口描述语言）：基于文件定义服务，通过proto3工具生成指定语言的数据结构、服务端接口以及客户端Stub</li><li>支持移动端：基于HTTP&#x2F;2 的设计，支持双向流、消息头压缩、单TCP的多路复用、服务端推送等特性。</li></ol><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231229150711053.png" alt="image-20231229150711053"></p><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231229152600840.png" alt="image-20231229152600840"></p><p>CAP 模型是分布式系统中常用的一种理论模型，用于描述一个分布式系统在面临网络分区的情况下可能面临的一致性、可用性和分区容错性之间的权衡关系。CAP 模型由三个概念组成：</p><ol><li><strong>一致性（Consistency）：</strong> 所有节点在同一时间具有相同的数据视图。换句话说，当一个节点更新了数据后，所有其他节点应该能够立即看到这个更新。</li><li><strong>可用性（Availability）：</strong> 系统保证每个请求都能够得到响应，无论请求成功还是失败。可用性意味着系统在任何时刻都能够对外提供服务。</li><li><strong>分区容错性（Partition Tolerance）：</strong> 系统在遇到网络分区的情况下仍然能够继续运行。分区容错性意味着即使系统中的节点之间发生了通信故障，系统仍然能够正常运作。</li></ol><p>CAP 模型指出，一个分布式系统在面对网络分区时，很难同时满足一致性、可用性和分区容错性这三个要求，只能在它们之间进行权衡。根据 CAP 模型，一个分布式系统最多只能同时满足其中的两个要求。</p><p>以下是 CAP 模型的一些可能组合：</p><ol><li><strong>CA：</strong> 强一致性和可用性，不支持分区容错。当发生网络分区时，系统可能会停止对外提供服务，以确保数据的一致性。</li><li><strong>CP：</strong> 强一致性和分区容错性，不保证可用性。在发生网络分区时，系统可能选择牺牲可用性以确保数据的一致性。</li><li><strong>AP：</strong> 可用性和分区容错性，不保证强一致性。在发生网络分区时，系统会继续对外提供服务，但可能会出现不同节点之间数据的一致性问题。</li></ol><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231229165436718.png" alt="image-20231229165436718"></p><h2 id="3-3-sync-package"><a href="#3-3-sync-package" class="headerlink" title="3.3 sync package"></a>3.3 sync package</h2><p>使用 -race 来检测 race condition</p><p>i++ 的方式并非原子操作</p><ul><li>copy the value of context to BX</li><li>increment the value of bx</li><li>move the new value to counter</li></ul><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231231131901857.png" alt="image-20231231131901857"></p><p>context</p><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231231140651201.png" alt="image-20231231140651201"></p><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231231141154731.png" alt="image-20231231141154731"></p><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231231141317696.png" alt="image-20231231141317696"></p><p>cancel</p><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231231141355883.png" alt="image-20231231141355883"></p><p><img src="/2023/12/29/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%94%E6%9C%9F%E7%AC%94%E8%AE%B0/image-20231231163512959.png" alt="image-20231231163512959"></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>Go进阶训练营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>2024</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计组期末</title>
    <link href="/2023/12/27/%E8%AE%A1%E7%BB%84%E6%9C%9F%E6%9C%AB/"/>
    <url>/2023/12/27/%E8%AE%A1%E7%BB%84%E6%9C%9F%E6%9C%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><ul><li><p>1946年2月，在美国宾夕法尼亚大学诞生了世界上第一台电子数字计算机，它的名字叫　　<strong>ENIAC</strong></p></li><li><p>在具有四级层次结构的计算机系统中，位于最底层的是<strong>微程序</strong>机器。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023总结+2024眺望</title>
    <link href="/2023/12/26/2023%E6%80%BB%E7%BB%93-2024%E7%9C%BA%E6%9C%9B/"/>
    <url>/2023/12/26/2023%E6%80%BB%E7%BB%93-2024%E7%9C%BA%E6%9C%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="2023总结"><a href="#2023总结" class="headerlink" title="2023总结"></a>2023总结</h2><p>今年四月末开始学习Go，从最初的go的语法，到gin框架，写出一个小的web demo（论坛系统），参与学校毕业设计系统的后端开发，再到微服务架构，使用probuf作为通信协议，kratos框架来搭建微服务体系，consul作为服务注册发现健康检查的第三方，canal作为增量数据库的同步，es处理复杂数据的查询，redis来作为缓存，kafaka处理实时流。最后用grpc 来调用api。</p><p>我今年十月中旬开始投简历，投了一百五十份，大概有三十家公司有回信，最终得到了四家公司的面试机会。（10.15-11.21）</p><ul><li>第一家是 国内较大的AI 公司，<strong>格林深瞳</strong> （共三面，一面挂）</li><li>第二家是 <strong>字节</strong>的抖音生活服务部门 （共三面，一面挂）</li><li>第三家是 <strong>字节</strong>的AI编辑部门 （共一面，一面挂）</li><li>第四家是 南京的一个小的<strong>工作室</strong>（不知道几面，我没去面）</li></ul><p>，投了这么多家，面过几家，我也有过一些总结和感悟。</p><ul><li>基础，计算机基础很重要。<ul><li>计网</li><li>MySQL</li><li>OS</li></ul></li><li>算法<ul><li>大厂都喜欢用leetcode的medium 和hard来刷人</li></ul></li><li>中间件很重要 这证明了你学习的广度<ul><li>redis<ul><li>redis的数据一致性</li></ul></li><li>kafka</li><li>es</li><li>OSS</li></ul></li><li>项目<ul><li>建议写一个展示所有技术栈的大而全的项目（模仿douyin）的就不错，各种组件和中间件都可以用起来</li><li>一个轮子，或者说不是完全偏业务开发的项目，国外的课程的项目可以考虑一下</li></ul></li><li>发展自己的博客和github</li></ul><h2 id="2024愿景"><a href="#2024愿景" class="headerlink" title="2024愿景"></a>2024愿景</h2><ul><li><input disabled type="checkbox"> 一月完成douyin项目（使用各种组件 kratos框架、es、kafka、canal、redis、Prometheus；测试[基准测试、单元测试、功能测试、集成测试…]）</li><li><input disabled type="checkbox"> CMU的数据库</li><li><input disabled type="checkbox"> 分布式架构的项目</li><li><input disabled type="checkbox"> 极客时间的go网课</li><li><input disabled type="checkbox"> 形成思考和谈论的方法论</li><li><input disabled type="checkbox"> k8s docker 的原理和熟练使用</li><li><input disabled type="checkbox"> 云服务器的合理使用</li><li><input disabled type="checkbox"> 算法，希望能把 hot100 三刷</li><li><input disabled type="checkbox"> 八股，每天都看看，忘了就看，我不信记不下来</li><li><input disabled type="checkbox"> 许愿2024秋招</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一路走走停停，但我从未有过停下脚步，止步不前的想法。</p><p>​2023.12.26 20.45留</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
      <category>我的大三</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2023</tag>
      
      <tag>2024</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>py期末</title>
    <link href="/2023/12/26/py%E6%9C%9F%E6%9C%AB/"/>
    <url>/2023/12/26/py%E6%9C%9F%E6%9C%AB/</url>
    
    <content type="html"><![CDATA[<p>py的特点 </p><ul><li>开源 免费</li><li>属于高级语言</li><li>可移植性高</li></ul><p>py的标识符命名规则</p><ul><li>listdir</li><li>open</li><li>with</li><li>flush </li><li>isfile</li><li>splittext</li><li>‘w’</li><li>‘x’</li><li>close</li></ul><p><img src="/2023/12/26/py%E6%9C%9F%E6%9C%AB/image-20231226195716991.png" alt="image-20231226195716991"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>snowflake</title>
    <link href="/2023/12/19/snowflake/"/>
    <url>/2023/12/19/snowflake/</url>
    
    <content type="html"><![CDATA[<p>然后添加序列号，从0开始，在同一毫秒内生成的每个ID递增。如果您在同一毫秒内生成足够的id，序列将滚动或溢出，那么生成函数将暂停，直到下一个毫秒</p>]]></content>
    
    
    
    <tags>
      
      <tag>snowflake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>runningPage</title>
    <link href="/2023/12/11/runningPage/"/>
    <url>/2023/12/11/runningPage/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go语言微服务与云原生</title>
    <link href="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    <url>/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<p>极客时间 go云原生</p><p>链接: <a href="https://pan.baidu.com/share/init?surl=9_bcdX5tl25pbzpKX544lQ">https://pan.baidu.com/share/init?surl=9_bcdX5tl25pbzpKX544lQ</a> 提取码: wzhx</p><h3 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h3><p>微服务架构风格是一种将单体应用开发为一套小型服务的方法，每个服务都在<strong>自己的进程中运行</strong>，并且使用轻量级的通信机制（HTTP类型的API）进行通信。</p><p>这些服务是围绕业务能力构建的，并且可以通过全自动化的部署机制来进行独立部署。</p><p>这些服务可以使用不同的编程语言编写，也能使用不同的数据存储技术。</p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231207131818485.png" alt="image-20231207131818485"></p><h3 id="微服务架构带来的挑战"><a href="#微服务架构带来的挑战" class="headerlink" title="微服务架构带来的挑战"></a>微服务架构带来的挑战</h3><ul><li>分布式系统的复杂度</li><li>服务依赖管理</li><li>数据的一致性保证</li><li>测试更加艰难</li><li>对DevOps等基础设施要求更高</li></ul><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231207133256660.png" alt="image-20231207133256660"></p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231207133534770.png" alt="image-20231207133534770"></p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231207133704833.png" alt="image-20231207133704833"></p><h3 id="proto文件"><a href="#proto文件" class="headerlink" title="proto文件"></a>proto文件</h3><ol><li>编写protobuf文件</li><li>生成代码</li><li>编写业务逻辑</li></ol><p>调用<code>protoc</code>时，通过传递 <code>go_opt</code> 标志来提供特定于 <code>protocol-gen-go</code> 的标志位参数。可以传递多个<code>go_opt</code>标志位参数。例如，当执行下面的命令时：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">protoc --proto_path=src --go_out=out --go_opt=paths=source_relative foo.proto bar/baz.proto<br></code></pre></td></tr></table></figure><p>编译器将从 <code>src</code> 目录中读取输入文件 <code>foo.proto</code> 和 <code>bar/baz.proto</code>，并将输出文件 <code>foo.pb.go</code> 和 <code>bar/baz.pb.go</code> 写入 <code>out</code> 目录。如果需要，编译器会自动创建嵌套的输出子目录，但不会创建输出目录本身。</p><h4 id="oneof"><a href="#oneof" class="headerlink" title="oneof"></a>oneof</h4><h4 id="Wraper"><a href="#Wraper" class="headerlink" title="Wraper"></a>Wraper</h4><h3 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h3><h4 id="add-示例"><a href="#add-示例" class="headerlink" title="add 示例"></a>add 示例</h4><ul><li>proto 文件</li></ul><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"> syntax=<span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">package</span> pb;<br><br><span class="hljs-keyword">option</span> go_package=<span class="hljs-string">&quot;server/pb&quot;</span>;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">AddRequest</span>&#123;<br>  <span class="hljs-type">int64</span> x=<span class="hljs-number">1</span>;<br>  <span class="hljs-type">int64</span> y=<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">AddReply</span>&#123;<br>  <span class="hljs-type">int64</span> res=<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">CallService</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> Add(AddRequest)<span class="hljs-keyword">returns</span>(AddReply)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/addClient.proto <br></code></pre></td></tr></table></figure><ul><li>server 端</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;server/pb&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> AddServer <span class="hljs-keyword">struct</span> &#123;<br>*pb.UnimplementedCallServiceServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*AddServer)</span></span> Add(ctx context.Context, in *pb.AddRequest) (*pb.AddReply, <span class="hljs-type">error</span>) &#123;<br>sum := in.GetX() + in.GetY()<br><span class="hljs-keyword">return</span> &amp;pb.AddReply&#123;Res: sum&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>l, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8989&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Listen failed&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(l.Addr().String())<br>s := grpc.NewServer()<br>pb.RegisterCallServiceServer(s, &amp;AddServer&#123;&#125;)<br><span class="hljs-keyword">if</span> err = s.Serve(l); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;s.Server failed,err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>client 端</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;client/pb&quot;</span><br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>conn, err := grpc.Dial(<span class="hljs-string">&quot;127.0.0.1:8989&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;grpc.Dial failed&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br>client := pb.NewCallServiceClient(conn)<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>resp, err := client.Add(ctx, &amp;pb.AddRequest&#123;<br>X: <span class="hljs-type">int64</span>(i),<br>Y: <span class="hljs-number">-100</span>,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;client.Add failed&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;i: %d resp-&gt; %d\n&quot;</span>, i, resp.Res)<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="metadata"><a href="#metadata" class="headerlink" title="metadata"></a>metadata</h4><p>元数据（<a href="https://pkg.go.dev/google.golang.org/grpc/metadata">metadata</a>）是指在处理RPC请求和响应过程中需要但又不属于具体业务（例如身份验证详细信息）的信息，采用键值对列表的形式，其中键是<code>string</code>类型，值通常是<code>[]string</code>类型，但也可以是二进制数据。gRPC中的 metadata 类似于我们在 HTTP headers中的键值对，元数据可以包含认证token、请求标识和监控标签等。</p><p>metadata中的键是<strong>大小写不敏感的</strong>，由字母、数字和特殊字符<code>-</code>、<code>_</code>、<code>.</code>组成并且不能以<code>grpc-</code>开头（gRPC保留自用），二进制值的键名必须以<code>-bin</code>结尾。</p><p>元数据对 gRPC 本身是不可见的，我们通常是在应用程序代码或中间件中处理元数据，我们不需要在<code>.proto</code>文件中指定元数据。</p><p>如何访问元数据取决于具体使用的编程语言。 在Go语言中我们是用<a href="https://pkg.go.dev/google.golang.org/grpc/metadata">google.golang.org&#x2F;grpc&#x2F;metadata</a>这个库来操作metadata。</p><p>metadata 类型定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MD <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]<span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>元数据可以像普通map一样读取。注意，这个 map 的值类型是<code>[]string</code>，因此用户可以使用一个键附加多个值。</p><h5 id="创建新的metadata"><a href="#创建新的metadata" class="headerlink" title="创建新的metadata"></a>创建新的metadata</h5><p>第一种方法是使用函数 <code>New</code> 基于<code>map[string]string</code> 创建元数据:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">md:=metadata.New(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;k1&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;k2&quot;</span>:<span class="hljs-string">&quot;v2&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>另一种方法是使用<code>Pairs</code>。具有相同键的值将合并到一个列表中:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">md:=metadata.Pairs(<br><span class="hljs-string">&quot;k1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>,<br><span class="hljs-string">&quot;k1&quot;</span>,<span class="hljs-string">&quot;v2&quot;</span>,<span class="hljs-comment">//k1 的值为 []string&#123;&quot;v1&quot;,&quot;v2&quot;&#125;</span><br><span class="hljs-string">&quot;k2&quot;</span>,<span class="hljs-string">&quot;v3&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><p>注意: <strong>所有的键将自动转换为小写</strong></p><h5 id="元数据中存储二进制数据"><a href="#元数据中存储二进制数据" class="headerlink" title="元数据中存储二进制数据"></a>元数据中存储二进制数据</h5><p>在元数据中，键始终是字符串。但是值可以是字符串或二进制数据。要在元数据中存储二进制数据值，只需在密钥中添加“-bin”后缀。在创建元数据时，将对带有“-bin”后缀键的值进行编码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">md := metadata.Pairs(<br>    <span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;string value&quot;</span>,<br>    <span class="hljs-string">&quot;key-bin&quot;</span>, <span class="hljs-type">string</span>([]<span class="hljs-type">byte</span>&#123;<span class="hljs-number">96</span>, <span class="hljs-number">102</span>&#125;), <span class="hljs-comment">// 二进制数据在发送前会进行(base64) 编码</span><br>                                        <span class="hljs-comment">// 收到后会进行解码</span><br>)<br></code></pre></td></tr></table></figure><h5 id="从上下文获取元数据"><a href="#从上下文获取元数据" class="headerlink" title="从上下文获取元数据"></a>从上下文获取元数据</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SomeRPC(ctx context.Context, in *pb.SomeRequest) (*pb.SomeResponse, err) &#123;<br>    md, ok := metadata.FromIncomingContext(ctx)<br>    <span class="hljs-comment">// do something with metadata</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><h6 id="发送metadata"><a href="#发送metadata" class="headerlink" title="发送metadata"></a>发送metadata</h6><p>有两种方法可以将元数据发送到服务端。推荐的方法是使用 <code>AppendToOutgoingContext</code> 将 kv 对附加到context。无论context中是否已经有元数据都可以使用这个方法。如果先前没有元数据，则添加元数据; 如果context中已经存在元数据，则将 kv 对合并进去。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建带有metadata的context</span><br>ctx := metadata.AppendToOutgoingContext(ctx, <span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>, <span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>)<br><br><span class="hljs-comment">// 添加一些 metadata 到 context (e.g. in an interceptor)</span><br>ctx := metadata.AppendToOutgoingContext(ctx, <span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;v4&quot;</span>)<br><br><span class="hljs-comment">// 发起普通RPC请求</span><br>response, err := client.SomeRPC(ctx, someRequest)<br><br><span class="hljs-comment">// 或者发起流式RPC请求</span><br>stream, err := client.SomeStreamingRPC(ctx)<br></code></pre></td></tr></table></figure><p>或者，可以使用 <code>NewOutgoingContext</code> 将元数据附加到context。但是，这将替换context中的任何已有的元数据，因此必须注意保留现有元数据(如果需要的话)。这个方法比使用 <code>AppendToOutgoingContext</code> 要慢。这方面的一个例子如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建带有metadata的context</span><br>md := metadata.Pairs(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>, <span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>)<br>ctx := metadata.NewOutgoingContext(context.Background(), md)<br><br><span class="hljs-comment">// 添加一些metadata到context (e.g. in an interceptor)</span><br>send, _ := metadata.FromOutgoingContext(ctx)<br>newMD := metadata.Pairs(<span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>)<br>ctx = metadata.NewOutgoingContext(ctx, metadata.Join(send, newMD))<br><br><span class="hljs-comment">// 发起普通RPC请求</span><br>response, err := client.SomeRPC(ctx, someRequest)<br><br><span class="hljs-comment">// 或者发起流式RPC请求</span><br>stream, err := client.SomeStreamingRPC(ctx)<br></code></pre></td></tr></table></figure><h6 id="接受metadata"><a href="#接受metadata" class="headerlink" title="接受metadata"></a>接受metadata</h6><p>客户端可以接收的元数据包括header和trailer。</p><blockquote><p>trailer可以用于服务器希望在处理请求后给客户端发送任何内容，例如在流式RPC中只有等所有结果都流到客户端后才能计算出负载信息，这时候就不能使用headers（header在数据之前，trailer在数据之后）。</p></blockquote><p>引申：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Trailer">HTTP trailer</a></p><p><strong>普通调用</strong></p><p>可以使用 <a href="https://godoc.org/google.golang.org/grpc#CallOption">CallOption</a> 中的 <a href="https://godoc.org/google.golang.org/grpc#Header">Header</a> 和 <a href="https://godoc.org/google.golang.org/grpc#Trailer">Trailer</a> 函数来获取普通RPC调用发送的header和trailer:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> header, trailer metadata.MD <span class="hljs-comment">// 声明存储header和trailer的变量</span><br>r, err := client.SomeRPC(<br>    ctx,<br>    someRequest,<br>    grpc.Header(&amp;header),    <span class="hljs-comment">// 将会接收header</span><br>    grpc.Trailer(&amp;trailer),  <span class="hljs-comment">// 将会接收trailer</span><br>)<br><br><span class="hljs-comment">// do something with header and trailer</span><br></code></pre></td></tr></table></figure><p><strong>流式调用</strong></p><p>使用接口 <a href="https://godoc.org/google.golang.org/grpc#ClientStream">ClientStream</a> 中的 <code>Header</code> 和 <code>Trailer</code> 函数，可以从返回的流中接收 Header 和 Trailer:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">stream, err := client.SomeStreamingRPC(ctx)<br><br><span class="hljs-comment">// 接收 header</span><br>header, err := stream.Header()<br><br><span class="hljs-comment">// 接收 trailer</span><br>trailer := stream.Trailer()<br></code></pre></td></tr></table></figure><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><h6 id="发送metadata-1"><a href="#发送metadata-1" class="headerlink" title="发送metadata"></a>发送metadata</h6><p><strong>普通调用</strong></p><p>在普通调用中，服务器可以调用 <a href="https://godoc.org/google.golang.org/grpc">grpc</a> 模块中的 <a href="https://godoc.org/google.golang.org/grpc#SendHeader">SendHeader</a> 和 <a href="https://godoc.org/google.golang.org/grpc#SetTrailer">SetTrailer</a> 函数向客户端发送header和trailer。这两个函数将context作为第一个参数。它应该是 RPC 处理程序的上下文或从中派生的上下文：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SomeRPC(ctx context.Context, in *pb.someRequest) (*pb.someResponse, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">// 创建和发送 header</span><br>    header := metadata.Pairs(<span class="hljs-string">&quot;header-key&quot;</span>, <span class="hljs-string">&quot;val&quot;</span>)<br>    grpc.SendHeader(ctx, header)<br>    <span class="hljs-comment">// 创建和发送 trailer</span><br>    trailer := metadata.Pairs(<span class="hljs-string">&quot;trailer-key&quot;</span>, <span class="hljs-string">&quot;val&quot;</span>)<br>    grpc.SetTrailer(ctx, trailer)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>流式调用</strong></p><p>对于流式调用，可以使用接口 <a href="https://godoc.org/google.golang.org/grpc#ServerStream">ServerStream</a> 中的 <code>SendHeader</code> 和 <code>SetTrailer</code> 函数发送header和trailer:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SomeStreamingRPC(stream pb.Service_SomeStreamingRPCServer) <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-comment">// 创建和发送 header</span><br>    header := metadata.Pairs(<span class="hljs-string">&quot;header-key&quot;</span>, <span class="hljs-string">&quot;val&quot;</span>)<br>    stream.SendHeader(header)<br>    <span class="hljs-comment">// 创建和发送 trailer</span><br>    trailer := metadata.Pairs(<span class="hljs-string">&quot;trailer-key&quot;</span>, <span class="hljs-string">&quot;val&quot;</span>)<br>    stream.SetTrailer(trailer)<br></code></pre></td></tr></table></figure><h6 id="接受metadata-1"><a href="#接受metadata-1" class="headerlink" title="接受metadata"></a>接受metadata</h6><p>要读取客户端发送的元数据，服务器需要从 RPC 上下文检索它。如果是普通RPC调用，则可以使用 RPC 处理程序的上下文。对于流调用，服务器需要从流中获取上下文。</p><p><strong>普通调用</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SomeRPC(ctx context.Context, in *pb.someRequest) (*pb.someResponse, <span class="hljs-type">error</span>) &#123;<br>    md, ok := metadata.FromIncomingContext(ctx)<br>    <span class="hljs-comment">// do something with metadata</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>流式调用</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SomeStreamingRPC(stream pb.Service_SomeStreamingRPCServer) <span class="hljs-type">error</span> &#123;<br>    md, ok := metadata.FromIncomingContext(stream.Context()) <span class="hljs-comment">// get context from stream</span><br>    <span class="hljs-comment">// do something with metadata</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="gRPC错误处理"><a href="#gRPC错误处理" class="headerlink" title="gRPC错误处理"></a>gRPC错误处理</h4><p>似于HTTP定义了一套响应状态码，gRPC也定义有一些状态码。Go语言中此状态码由<a href="https://pkg.go.dev/google.golang.org/grpc/codes">codes</a>定义，本质上是一个uint32。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Code <span class="hljs-type">uint32</span><br></code></pre></td></tr></table></figure><p>使用时需导入<code>google.golang.org/grpc/codes</code>包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;google.golang.org/grpc/codes&quot;</span><br></code></pre></td></tr></table></figure><p>目前已经定义的状态码有如下几种。</p><table><thead><tr><th align="center">Code</th><th align="center">值</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">OK</td><td align="center">0</td><td align="center">请求成功</td></tr><tr><td align="center">Canceled</td><td align="center">1</td><td align="center">操作已取消</td></tr><tr><td align="center">Unknown</td><td align="center">2</td><td align="center">未知错误。如果从另一个地址空间接收到的状态值属 于在该地址空间中未知的错误空间，则可以返回此错误的示例。 没有返回足够的错误信息的API引发的错误也可能会转换为此错误</td></tr><tr><td align="center">InvalidArgument</td><td align="center">3</td><td align="center">表示客户端指定的参数无效。 请注意，这与 FailedPrecondition 不同。 它表示无论系统状态如何都有问题的参数（例如，格式错误的文件名）。</td></tr><tr><td align="center">DeadlineExceeded</td><td align="center">4</td><td align="center">表示操作在完成之前已过期。对于改变系统状态的操作，即使操作成功完成，也可能会返回此错误。 例如，来自服务器的成功响应可能已延迟足够长的时间以使截止日期到期。</td></tr><tr><td align="center">NotFound</td><td align="center">5</td><td align="center">表示未找到某些请求的实体（例如，文件或目录）。</td></tr><tr><td align="center">AlreadyExists</td><td align="center">6</td><td align="center">创建实体的尝试失败，因为实体已经存在。</td></tr><tr><td align="center">PermissionDenied</td><td align="center">7</td><td align="center">表示调用者没有权限执行指定的操作。 它不能用于拒绝由耗尽某些资源引起的（使用 ResourceExhausted ）。 如果无法识别调用者，也不能使用它（使用 Unauthenticated ）。</td></tr><tr><td align="center">ResourceExhausted</td><td align="center">8</td><td align="center">表示某些资源已耗尽，可能是每个用户的配额，或者整个文件系统空间不足</td></tr><tr><td align="center">FailedPrecondition</td><td align="center">9</td><td align="center">指示操作被拒绝，因为系统未处于操作执行所需的状态。 例如，要删除的目录可能是非空的，rmdir 操作应用于非目录等。</td></tr><tr><td align="center">Aborted</td><td align="center">10</td><td align="center">表示操作被中止，通常是由于并发问题，如排序器检查失败、事务中止等。</td></tr><tr><td align="center">OutOfRange</td><td align="center">11</td><td align="center">表示尝试超出有效范围的操作。</td></tr><tr><td align="center">Unimplemented</td><td align="center">12</td><td align="center">表示此服务中未实施或不支持&#x2F;启用操作。</td></tr><tr><td align="center">Internal</td><td align="center">13</td><td align="center">意味着底层系统预期的一些不变量已被破坏。 如果你看到这个错误，则说明问题很严重。</td></tr><tr><td align="center">Unavailable</td><td align="center">14</td><td align="center">表示服务当前不可用。这很可能是暂时的情况，可以通过回退重试来纠正。 请注意，重试非幂等操作并不总是安全的。</td></tr><tr><td align="center">DataLoss</td><td align="center">15</td><td align="center">表示不可恢复的数据丢失或损坏</td></tr><tr><td align="center">Unauthenticated</td><td align="center">16</td><td align="center">表示请求没有用于操作的有效身份验证凭据</td></tr><tr><td align="center">_maxCode</td><td align="center">17</td><td align="center">-</td></tr></tbody></table><p>代码示例</p><ul><li>客户端</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;client/pb&quot;</span><br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/genproto/googleapis/rpc/errdetails&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>conn, err := grpc.Dial(<span class="hljs-string">&quot;127.0.0.1:8972&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;grpc.Dial failed,err:%v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-comment">//创建客户端</span><br>c := pb.NewGreeterClient(conn)<br><br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br>resp, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: <span class="hljs-string">&quot;YST&quot;</span>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">//收到带有detail的error</span><br>s := status.Convert(err)<br><span class="hljs-keyword">for</span> _, d := <span class="hljs-keyword">range</span> s.Details() &#123;<br><span class="hljs-keyword">switch</span> info := d.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *errdetails.QuotaFailure:<br>fmt.Printf(<span class="hljs-string">&quot;QuotaFailure:%s\n&quot;</span>, info)<br><span class="hljs-keyword">default</span>:<br>fmt.Printf(<span class="hljs-string">&quot;unexpected type:%v\n&quot;</span>, info)<br>&#125;<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;c.SayHello failed, err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;resp-&gt;&quot;</span>, resp.Reply)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>server端</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/genproto/googleapis/rpc/errdetails&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/codes&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;server/pb&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedGreeterServer<br>mu    sync.Mutex<br>count <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, <span class="hljs-type">error</span>) &#123;<br>s.mu.Lock()<br><span class="hljs-keyword">defer</span> s.mu.Unlock()<br><span class="hljs-comment">// 记录name的请求次数</span><br>s.count[in.Name]++<br><span class="hljs-keyword">if</span> s.count[in.GetName()] &gt; <span class="hljs-number">1</span> &#123;<br><span class="hljs-comment">// 返回请求次数限制的错误</span><br>st := status.New(codes.ResourceExhausted, <span class="hljs-string">&quot;reqest limited&quot;</span>)<br><span class="hljs-comment">// 添加错误详情信息，需要接收返回的status</span><br>ds, err := st.WithDetails(<br>&amp;errdetails.QuotaFailure&#123;<br>Violations: []*errdetails.QuotaFailure_Violation&#123;<br>&#123;<br>Subject:     fmt.Sprintf(<span class="hljs-string">&quot;name:%s&quot;</span>, in.GetName()),<br>Description: <span class="hljs-string">&quot;每个name只能调用一次SayHello&quot;</span>,<br>&#125;,<br>&#125;,<br>&#125;,<br>)<br><span class="hljs-comment">// WithDetails执行失败，返回原来status.Err</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, st.Err()<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, ds.Err()<br>&#125;<br>reply := <span class="hljs-string">&quot;hello &quot;</span> + in.GetName()<br><span class="hljs-keyword">return</span> &amp;pb.HelloResponse&#123;Reply: reply&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>l, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8972&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;net.Listen failed&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;begin to listen on addr %v\n&quot;</span>, l.Addr().String())<br>s := grpc.NewServer()<br>pb.RegisterGreeterServer(s, &amp;server&#123;count: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)&#125;)<br><br><span class="hljs-keyword">if</span> err = s.Serve(l); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;s.server failed,%v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="加密或认证"><a href="#加密或认证" class="headerlink" title="加密或认证"></a>加密或认证</h4><h5 id="使用服务器身份验证-SSL-TLS"><a href="#使用服务器身份验证-SSL-TLS" class="headerlink" title="使用服务器身份验证 SSL&#x2F;TLS"></a>使用服务器身份验证 SSL&#x2F;TLS</h5><p>gRPC 内置支持 SSL&#x2F;TLS，可以通过 SSL&#x2F;TLS 证书建立安全连接，对传输的数据进行加密处理。</p><p>这里我们演示如何使用自签名证书进行server端加密。</p><h5 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h5><h6 id="生成私钥"><a href="#生成私钥" class="headerlink" title="生成私钥"></a>生成私钥</h6><p>执行下面的命令生成私钥文件——<code>server.key</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl ecparam -genkey -name secp384r1 -out server.key<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----BEGIN EC PARAMETERS-----<br>BgUrgQQAIg==<br>-----END EC PARAMETERS-----<br>-----BEGIN EC PRIVATE KEY-----<br>MIGkAgEBBDD7h65GkT5/BTGxG8ZSPzxAyZQcQZeGYs+dcqYbxYVMh01cLG7Q9AfM<br>VMzdPWQSSVygBwYFK4EEACKhZANiAARXP8OxhpgV7JxFoCxY4byJ926gS6xXRX/d<br>EC4oGmbcvN46tsXI9CThGtLlzXbI73ICgqGy1iNiCf+2KHngyH//2VF06h5Zr1XX<br>vjAVBsBzjR648aCGFmG7j+j8TIPc5xU=<br>-----END EC PRIVATE KEY-----<br></code></pre></td></tr></table></figure><p>这段文本包含了一个椭圆曲线（Elliptic Curve）私钥的信息，同样以 “—–BEGIN EC PARAMETERS—–” 开头，以 “—–END EC PARAMETERS—–” 结尾。它还包含了相应的私钥，以 “—–BEGIN EC PRIVATE KEY—–” 开头，以 “—–END EC PRIVATE KEY—–” 结尾。这种格式同样是为了在文本之间传输方便而进行的 Base64 编码。</p><p>让我们对这两个部分进行解释：</p><ol><li><strong>椭圆曲线参数（EC PARAMETERS）：</strong><ul><li>在这个部分，包含了椭圆曲线的相关参数。具体的参数内容在这里是 Base64 编码的，如果需要详细了解，可能需要解码这部分内容。</li></ul></li><li><strong>椭圆曲线私钥（EC PRIVATE KEY）：</strong><ul><li>这一部分包含了使用椭圆曲线加密算法生成的私钥。</li><li>Base64 编码的私钥内容。</li></ul></li></ol><p>这段文本表示一个使用椭圆曲线加密算法的密钥对。椭圆曲线密码学在某些情况下相对于传统的 RSA 密码学更高效，因为它提供相同的安全性，但需要更短的密钥长度。这对于资源受限的环境，比如嵌入式设备或移动设备，是非常有利的。</p><p>这里生成的是ECC私钥，当然你也可以使用RSA。</p><h6 id="生成自签名的证书"><a href="#生成自签名的证书" class="headerlink" title="生成自签名的证书"></a>生成自签名的证书</h6><p>为了在证书中添加SANs信息，我们将下面自定义配置保存到<code>server.cnf</code>文件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs conf">[ req ]<br>default_bits       = 4096<br>default_md= sha256<br>distinguished_name = req_distinguished_name<br>req_extensions     = req_ext<br><br>[ req_distinguished_name ]<br>countryName                 = Country Name (2 letter code)<br>countryName_default         = CN<br>stateOrProvinceName         = State or Province Name (full name)<br>stateOrProvinceName_default = BEIJING<br>localityName                = Locality Name (eg, city)<br>localityName_default        = BEIJING<br>organizationName            = Organization Name (eg, company)<br>organizationName_default    = DEV<br>commonName                  = Common Name (e.g. server FQDN or YOUR name)<br>commonName_max              = 64<br>commonName_default          = liwenzhou.com<br><br>[ req_ext ]<br>subjectAltName = @alt_names<br><br>[alt_names]<br>DNS.1   = localhost<br>DNS.2   = liwenzhou.com<br>IP      = 127.0.0.1<br></code></pre></td></tr></table></figure><p>执行下面的命令生成自签名证书——<code>server.crt</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl req -nodes -new -x509 -sha256 -days 3650 -config server.cnf -extensions <span class="hljs-string">&#x27;req_ext&#x27;</span> -key server.key -out server.crt<br></code></pre></td></tr></table></figure><h6 id="建立安全连接"><a href="#建立安全连接" class="headerlink" title="建立安全连接"></a>建立安全连接</h6><p>Server端使用<code>credentials.NewServerTLSFromFile</code>函数分别加载证书<code>server.cert</code>和秘钥<code>server.key</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">creds, _ := credentials.NewServerTLSFromFile(certFile, keyFile)<br>s := grpc.NewServer(grpc.Creds(creds))<br>lis, _ := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8972&quot;</span>)<br><span class="hljs-comment">// error handling omitted</span><br>s.Serve(lis)<br></code></pre></td></tr></table></figure><p>而client端使用上一步生成的证书文件——<code>server.cert</code>建立安全连接。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">creds, _ := credentials.NewClientTLSFromFile(certFile, <span class="hljs-string">&quot;&quot;</span>)<br>conn, _ := grpc.Dial(<span class="hljs-string">&quot;127.0.0.1:8972&quot;</span>, grpc.WithTransportCredentials(creds))<br><span class="hljs-comment">// error handling omitted</span><br>client := pb.NewGreeterClient(conn)<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>除了这种自签名证书的方式外，生产环境对外通信时通常需要使用受信任的CA证书。</p><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><h3 id="服务注册与服务发现"><a href="#服务注册与服务发现" class="headerlink" title="服务注册与服务发现"></a>服务注册与服务发现</h3><p>服务及其调用方直接与注册中心交互</p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231212153923974.png" alt="image-20231212153923974"></p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231212153952711.png" alt="image-20231212153952711"></p><p>通过部署基础设施来处理服务发现</p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231212154358522.png" alt="image-20231212154358522"></p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231212154651038.png" alt="image-20231212154651038"></p><p>主流注册中心对比</p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231212221020154.png" alt="image-20231212221020154"></p><p>上图所说的CP是值CAP理论中的CP</p><p>CAP理论</p><ul><li>一致性（Consistency）：所有节点在同一个时间具有相同的数据</li><li>可用性（Availability）：保证每个请求不管成功或者失败都有相应</li><li>分区容忍性（Partotion tolerance）：系统中任意的信息丢失或者是失败都不会影响系统的继续运转</li></ul><p>​    </p><p>consul服务注册</p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231213134845364.png" alt="image-20231213134845364"></p><p>注册consul节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/hashicorp/consul/api&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/health&quot;</span><br>healthpb <span class="hljs-string">&quot;google.golang.org/grpc/health/grpc_health_v1&quot;</span><br><span class="hljs-string">&quot;hello_server/pb&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> serviceName = <span class="hljs-string">&quot;hello_server&quot;</span><br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedGreeterServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, <span class="hljs-type">error</span>) &#123;<br>reply := <span class="hljs-string">&quot;hello,&quot;</span> + in.Name<br><span class="hljs-keyword">return</span> &amp;pb.HelloResponse&#123;Reply: reply&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// GetOutboundIP 获取本机的出口IP</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetOutboundIP</span><span class="hljs-params">()</span></span> (net.IP, <span class="hljs-type">error</span>) &#123;<br>conn, err := net.Dial(<span class="hljs-string">&quot;udp&quot;</span>, <span class="hljs-string">&quot;8.8.8.8:80&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br>localAddr := conn.LocalAddr().(*net.UDPAddr)<br><span class="hljs-keyword">return</span> localAddr.IP, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>l, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:8977&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;failed to listen,err&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">//创建grpc服务</span><br>s := grpc.NewServer()<br><span class="hljs-comment">// 注册grpc服务</span><br>pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)<br><br>healthcheck := health.NewServer()<br>healthpb.RegisterHealthServer(s, healthcheck)<br><span class="hljs-comment">//注册consul节点</span><br>cc, err := api.NewClient(api.DefaultConfig())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;api.NewClient failed&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">//定义服务 配置健康检查</span><br>IP, err := GetOutboundIP()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;GetOutboundIP failed&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(IP.String())<br>check := &amp;api.AgentServiceCheck&#123;<br>GRPC:     fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, IP.String(), <span class="hljs-number">8977</span>), <span class="hljs-comment">// 这里一定是外部可以访问的地址</span><br>Timeout:  <span class="hljs-string">&quot;10s&quot;</span>,                                   <span class="hljs-comment">// 超时时间</span><br>Interval: <span class="hljs-string">&quot;10s&quot;</span>,                                   <span class="hljs-comment">// 运行检查的频率</span><br><span class="hljs-comment">// 指定时间后自动注销不健康的服务节点</span><br><span class="hljs-comment">// 最小超时时间为1分钟，收获不健康服务的进程每30秒运行一次，因此触发注销的时间可能略长于配置的超时时间。</span><br>DeregisterCriticalServiceAfter: <span class="hljs-string">&quot;1m&quot;</span>,<br>&#125;<br>srv := &amp;api.AgentServiceRegistration&#123;<br>ID:      fmt.Sprintf(<span class="hljs-string">&quot;%s-%s-%d&quot;</span>, serviceName, IP.String(), <span class="hljs-number">8977</span>), <span class="hljs-comment">// 服务唯一ID</span><br>Name:    serviceName,                                             <span class="hljs-comment">// 服务名称</span><br>Tags:    []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;sayhello&quot;</span>, <span class="hljs-string">&quot;Forrest&quot;</span>&#125;,                         <span class="hljs-comment">// 为服务打标签</span><br>Address: IP.String(),<br>Port:    <span class="hljs-number">8977</span>,<br>Check:   check,<br>&#125;<br><span class="hljs-comment">//将服务注册到consul中</span><br>err = cc.Agent().ServiceRegister(srv)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot; cc.Agent().ServiceRegister(srv) failed&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">//启动服务</span><br>err = s.Serve(l)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;failed to Serve,err&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务发现</p><p>gRPC支持自定义resolver，借助第三方的<a href="https://github.com/mbobakov/grpc-consul-resolver">grpc-consul-resolver</a>库，我们可以更便捷的实现基于consul的服务发现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> _ <span class="hljs-string">&quot;github.com/mbobakov/grpc-consul-resolver&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/Forrest/backend/yst/hello_client/pb&quot;</span><br>_ <span class="hljs-string">&quot;github.com/mbobakov/grpc-consul-resolver&quot;</span> <span class="hljs-comment">//服务发现</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> name = flag.String(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;yst&quot;</span>, <span class="hljs-string">&quot;通过 -name指定你的名字&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-comment">// 连接server</span><br><br><span class="hljs-comment">/*cc, err := api.NewClient(api.DefaultConfig())</span><br><span class="hljs-comment">if err != nil &#123;</span><br><span class="hljs-comment">fmt.Println(&quot;NewClient failed,err&quot;, err)</span><br><span class="hljs-comment">return</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">serviceMap, err := cc.Agent().ServicesWithFilter(&quot;Service==`hello_server`&quot;)</span><br><span class="hljs-comment">if err != nil &#123;</span><br><span class="hljs-comment">fmt.Println(&quot;ServicesWithFilter failed&quot;, err)</span><br><span class="hljs-comment">return</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">// 选一个服务机（这里选最后一个）</span><br><span class="hljs-comment">var addr string</span><br><span class="hljs-comment">for k, v := range serviceMap &#123;</span><br><span class="hljs-comment">fmt.Printf(&quot;%s:%#v\n&quot;, k, v)</span><br><span class="hljs-comment">addr = v.Address + &quot;:&quot; + strconv.Itoa(v.Port)</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-comment">/*conn, err := grpc.Dial(addr, grpc.WithTransportCredentials(insecure.NewCredentials()))*/</span><br><br>conn, err := grpc.Dial(<br><span class="hljs-string">&quot;consul://localhost:8500/hello_server&quot;</span>,<br>grpc.WithTransportCredentials(insecure.NewCredentials()),<br>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;grpc.Dail failed,err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br>c := pb.NewGreeterClient(conn)<br>ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">1</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br>resp, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;c.SayHrllo failed,err:%v&quot;</span>, err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;resp:&quot;</span>, resp.GetReply())<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>grpc.Dial</code>时直接使用类似 <code>consul://[user:password@]127.0.0.127:8555/my-service?[healthy=]&amp;[wait=]&amp;[near=]&amp;[insecure=]&amp;[limit=]&amp;[tag=]&amp;[token=]</code>的连接字符串来指定连接目标。</p><p>目前支持的参数：</p><table><thead><tr><th align="center">Name</th><th align="center">格式</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">tag</td><td align="center">string</td><td align="center">根据标签筛选</td></tr><tr><td align="center">healthy</td><td align="center">true&#x2F;false</td><td align="center">只返回通过所有健康检查的端点。默认值：false</td></tr><tr><td align="center">wait</td><td align="center">time.ParseDuration</td><td align="center">监控变更的等待时间。在这个时间段内，端点将强制刷新。默认值：继承agent的配置</td></tr><tr><td align="center">insecure</td><td align="center">true&#x2F;false</td><td align="center">允许与consul进行不安全的通信。默认值：true</td></tr><tr><td align="center">near</td><td align="center">string</td><td align="center">按响应持续时间对端点排序。可与“limit”参数有效结合。默认值：”_agent”</td></tr><tr><td align="center">limit</td><td align="center">int</td><td align="center">限制服务的端点数。默认值：无限制</td></tr><tr><td align="center">timeout</td><td align="center">time.ParseDuration</td><td align="center">Http-client超时。默认值：60s</td></tr><tr><td align="center">max-backoff</td><td align="center">time.ParseDuration</td><td align="center">重新连接到consul的最大后退时间。重连从10ms开始，成倍增长，直到到max-backoff。默认值：1s</td></tr><tr><td align="center">token</td><td align="center">string</td><td align="center">Consul token</td></tr><tr><td align="center">dc</td><td align="center">string</td><td align="center">consul数据中心。可选</td></tr><tr><td align="center">allow-stale</td><td align="center">true&#x2F;false</td><td align="center">允许agent返回过期读的结果 <a href="https://developer.hashicorp.com/consul/api-docs/features/consistency#stale">https://developer.hashicorp.com/consul/api-docs/features/consistency#stale</a></td></tr><tr><td align="center">require-consistent</td><td align="center">true&#x2F;false</td><td align="center">强制读取完全一致。这比较昂贵，但可以防止执行过期读操作</td></tr></tbody></table><h3 id="kratos-框架"><a href="#kratos-框架" class="headerlink" title="kratos 框架"></a>kratos 框架</h3><p>新建一个项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kratos new bubble <br></code></pre></td></tr></table></figure><p>kratos中使用 proto文件 来完成通信 ,新建一个proto文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kratos proto add api/bubble/v1/todo.proto<br></code></pre></td></tr></table></figure><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><span class="hljs-keyword">package</span> api.bubble.v1;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;google/api/annotations.proto&quot;</span>;<br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;bubble/api/bubble/v1;v1&quot;</span>;<br><span class="hljs-keyword">option</span> java_multiple_files = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">option</span> java_package = <span class="hljs-string">&quot;api.bubble.v1&quot;</span>;<br><span class="hljs-keyword">service </span><span class="hljs-title class_">Todo</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">rpc</span> CreateTodo (CreateTodoRequest) <span class="hljs-keyword">returns</span> (CreateTodoReply)</span>&#123;<br><span class="hljs-keyword">option</span> (google.api.http) = &#123;<br>post: <span class="hljs-string">&quot;/v1/todo&quot;</span>,<br>body: <span class="hljs-string">&quot;*&quot;</span>,<br>&#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">rpc</span> UpdateTodo (UpdateTodoRequest) <span class="hljs-keyword">returns</span> (UpdateTodoReply)</span>&#123;<br><span class="hljs-keyword">option</span> (google.api.http) = &#123;<br>put: <span class="hljs-string">&quot;/v1/todo/&#123;id&#125;&quot;</span>,<br>body: <span class="hljs-string">&quot;*&quot;</span>,<br>&#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">rpc</span> DeleteTodo (DeleteTodoRequest) <span class="hljs-keyword">returns</span> (DeleteTodoReply)</span>&#123;<br><span class="hljs-keyword">option</span> (google.api.http) = &#123;<br>delete: <span class="hljs-string">&quot;/v1/todo/&#123;id&#125;&quot;</span>,<br>&#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">rpc</span> GetTodo (GetTodoRequest) <span class="hljs-keyword">returns</span> (GetTodoReply)</span>&#123;<br><span class="hljs-keyword">option</span> (google.api.http) = &#123;<br>get: <span class="hljs-string">&quot;/v1/todo/&#123;id&#125;&quot;</span>,<br>&#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">rpc</span> ListTodo (ListTodoRequest) <span class="hljs-keyword">returns</span> (ListTodoReply)</span>&#123;<br><span class="hljs-keyword">option</span> (google.api.http) = &#123;<br>get: <span class="hljs-string">&quot;/v1/todos&quot;</span>,<br>&#125;;<br>&#125;<br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">todo</span> &#123;<br><span class="hljs-type">int64</span> id = <span class="hljs-number">1</span>;<br><span class="hljs-type">string</span> title = <span class="hljs-number">2</span>;<br><span class="hljs-type">bool</span> status = <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">CreateTodoRequest</span> &#123;<br><span class="hljs-type">string</span> title = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">CreateTodoReply</span> &#123;<br>todo todo = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">UpdateTodoRequest</span> &#123;<br><span class="hljs-type">int64</span> id = <span class="hljs-number">1</span>;<br><span class="hljs-type">string</span> title = <span class="hljs-number">2</span>;<br><span class="hljs-type">bool</span> status = <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">UpdateTodoReply</span> &#123;<br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">DeleteTodoRequest</span> &#123;<br><span class="hljs-type">int64</span> id = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">DeleteTodoReply</span>&#123;&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">GetTodoRequest</span> &#123;<br><span class="hljs-type">int64</span> id = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">GetTodoReply</span> &#123;<br>todo todo = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">ListTodoRequest</span> &#123;&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">ListTodoReply</span> &#123;<br><span class="hljs-keyword">repeated</span> todo data = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成proto代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kratos proto client api/bubble/v1/todo.proto<br></code></pre></td></tr></table></figure><p>通过proto文件，可以直接生成对应的Service实现代码；使用kratos命令并且通过 <code>-t</code> 指定生成代码的保存目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kratos proto server api/bubble/v1/todo.proto -t internal/service<br><br>kratos proto client api/review/v1/review_error.proto<br></code></pre></td></tr></table></figure><p>server 端完整实例</p><blockquote><p>服务注册 健康检查 接受退出服务信号服务注销</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/hashicorp/consul/api&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/health&quot;</span><br>healthpb <span class="hljs-string">&quot;google.golang.org/grpc/health/grpc_health_v1&quot;</span><br><span class="hljs-string">&quot;hello_server/pb&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/signal&quot;</span><br><span class="hljs-string">&quot;syscall&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> serviceName = <span class="hljs-string">&quot;hello_server&quot;</span><br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedGreeterServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, <span class="hljs-type">error</span>) &#123;<br>reply := <span class="hljs-string">&quot;hello,&quot;</span> + in.Name<br><span class="hljs-keyword">return</span> &amp;pb.HelloResponse&#123;Reply: reply&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">type</span> consul <span class="hljs-keyword">struct</span> &#123;<br>client *api.Client<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewConsul</span><span class="hljs-params">(addr <span class="hljs-type">string</span>)</span></span> (*consul, <span class="hljs-type">error</span>) &#123;<br>cfg := api.DefaultConfig()<br>client, err := api.NewClient(cfg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;consul&#123;client: client&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cc *consul)</span></span> RegisterService(serviceName <span class="hljs-type">string</span>, IP <span class="hljs-type">string</span>, port <span class="hljs-type">int</span>) <span class="hljs-type">error</span> &#123;<br>check := &amp;api.AgentServiceCheck&#123;<br>GRPC:     fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, IP, <span class="hljs-number">8972</span>), <span class="hljs-comment">// 这里一定是外部可以访问的地址</span><br>Timeout:  <span class="hljs-string">&quot;10s&quot;</span>,                          <span class="hljs-comment">// 超时时间</span><br>Interval: <span class="hljs-string">&quot;10s&quot;</span>,                          <span class="hljs-comment">// 运行检查的频率</span><br><span class="hljs-comment">// 指定时间后自动注销不健康的服务节点</span><br><span class="hljs-comment">// 最小超时时间为1分钟，收获不健康服务的进程每30秒运行一次，因此触发注销的时间可能略长于配置的超时时间。</span><br>DeregisterCriticalServiceAfter: <span class="hljs-string">&quot;1m&quot;</span>,<br>&#125;<br>srv := &amp;api.AgentServiceRegistration&#123;<br>ID:      fmt.Sprintf(<span class="hljs-string">&quot;%s-%s-%d&quot;</span>, serviceName, IP, port), <span class="hljs-comment">// 服务唯一ID</span><br>Name:    serviceName,                                    <span class="hljs-comment">// 服务名称</span><br>Tags:    []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;important&quot;</span>, <span class="hljs-string">&quot;Forrest&quot;</span>&#125;,               <span class="hljs-comment">// 为服务打标签</span><br>Address: IP,<br>Port:    port,<br>Check:   check,<br>&#125;<br><span class="hljs-comment">//将服务注册到consul中</span><br><span class="hljs-keyword">return</span> cc.client.Agent().ServiceRegister(srv)<br>&#125;<br><br><span class="hljs-comment">// GetOutboundIP 获取本机的出口IP</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetOutboundIP</span><span class="hljs-params">()</span></span> (net.IP, <span class="hljs-type">error</span>) &#123;<br>conn, err := net.Dial(<span class="hljs-string">&quot;udp&quot;</span>, <span class="hljs-string">&quot;8.8.8.8:80&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br>localAddr := conn.LocalAddr().(*net.UDPAddr)<br><span class="hljs-keyword">return</span> localAddr.IP, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// Deregister 注销服务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *consul)</span></span> Deregister(serviceID <span class="hljs-type">string</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> c.client.Agent().ServiceDeregister(serviceID)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>port := <span class="hljs-number">8972</span><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>s := grpc.NewServer() <span class="hljs-comment">// 创建gRPC服务器</span><br><span class="hljs-comment">// 开启健康检查</span><br>healthcheck := health.NewServer()<br>healthpb.RegisterHealthServer(s, healthcheck)<br>pb.RegisterGreeterServer(s, &amp;server&#123;&#125;) <span class="hljs-comment">// 在gRPC服务端注册服务</span><br><span class="hljs-comment">// 注册服务</span><br>consul, err := NewConsul(<span class="hljs-string">&quot;127.0.0.1:8500&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;NewConsul failed, err:%v\n&quot;</span>, err)<br>&#125;<br>ipObj, _ := GetOutboundIP()<br>ip := ipObj.String()<br>serviceId := fmt.Sprintf(<span class="hljs-string">&quot;%s-%s-%d&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>, ip, port)<br>fmt.Println(serviceId)<br>consul.RegisterService(serviceId, ip, port)<br><br><span class="hljs-comment">// 启动服务</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>err = s.Serve(lis)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;()<br><br>quit := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">1</span>)<br>signal.Notify(quit, syscall.SIGTERM, syscall.SIGINT)<br>&lt;-quit<br><span class="hljs-comment">// 退出时注销服务</span><br>consul.Deregister(serviceId)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="依赖注入工具-wire"><a href="#依赖注入工具-wire" class="headerlink" title="依赖注入工具 wire"></a>依赖注入工具 wire</h3><p>google开源，编译期间完成依赖注入。</p><p>provider（提供者） </p><p>可导出的</p><p>injector（注入器）</p><p>应用程序中使用一个注入器来提供 提供者，注入器就是一个按照依赖顺序调用提供者</p><p>使用  <code>wire</code> 时，只需要编写注入器的函数签名，然后 <code>wire</code>  会生成对应的 函数体</p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231210122219231.png" alt="image-20231210122219231"></p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231210122530841.png" alt="image-20231210122530841"></p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231210132453233.png" alt="image-20231210132453233"></p><h3 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h3><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231210140759957.png" alt="image-20231210140759957"></p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231210140750519.png" alt="image-20231210140750519"></p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231210141008431.png" alt="image-20231210141008431"></p><h4 id="系统分析"><a href="#系统分析" class="headerlink" title="系统分析"></a>系统分析</h4><h5 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h5><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231210155901691.png" alt="image-20231210155901691"></p><h5 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h5><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231210160346172.png" alt="image-20231210160346172"></p><blockquote><p>C端：用户端，包括发表评论和查看评论的用户</p><p>B端：商家端，店铺商家端，店铺管理者，商品发布者</p><p>O端：运营端，运营的同学在后台负责审核用户评论，处理商家申诉，以及评论进行运营活动</p></blockquote><h5 id="按照数据流动的角度去分析"><a href="#按照数据流动的角度去分析" class="headerlink" title="按照数据流动的角度去分析"></a>按照数据流动的角度去分析</h5><h6 id="电商"><a href="#电商" class="headerlink" title="电商"></a>电商</h6><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231210161129270.png" alt="image-20231210161129270"></p><p> 读多写少</p><h6 id="UGC评论系统"><a href="#UGC评论系统" class="headerlink" title="UGC评论系统"></a>UGC评论系统</h6><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231210161734299.png" alt="image-20231210161734299"></p><p>读多写多</p><p>管理项目于代码的方式</p><blockquote><ul><li><p>mono-repo （monolithic repository）</p></li><li><p>multi-repo +submodule</p></li></ul></blockquote><h3 id="项目中如何管理pb文件"><a href="#项目中如何管理pb文件" class="headerlink" title="项目中如何管理pb文件"></a>项目中如何管理pb文件</h3><ul><li>protobuf文件要一致</li><li>protoc版本一致</li></ul><p>通常公司中是把 proto文件和生成的不同语言的代码都放在一个独立的公用代码库</p><p>别的项目直接引用这个公用的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule add git@github.com:Q1mi/reviewapis.git ./api<br></code></pre></td></tr></table></figure><p>更新submodule</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update<br></code></pre></td></tr></table></figure><p>用来初始化本地 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule init<br></code></pre></td></tr></table></figure><p>添加到安全组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --add safe.directory D:/Go_WorkSpace/review-b<br></code></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h4><ul><li>创建新项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kratos new review<br></code></pre></td></tr></table></figure><ul><li>添加proto文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kratos proto add api/review/v1/review.proto<br></code></pre></td></tr></table></figure><ul><li><p>书写proto文件</p>  <figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">package</span> api.review.v1;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;google/api/annotations.proto&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;validate/validate.proto&quot;</span>;<br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;review/api/review/v1;v1&quot;</span>;<br><span class="hljs-keyword">option</span> java_multiple_files = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">option</span> java_package = <span class="hljs-string">&quot;api.review.v1&quot;</span>;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Review</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">rpc</span> CreateReview (CreateReviewRequest) <span class="hljs-keyword">returns</span> (CreateReviewReply)</span>&#123;<br><span class="hljs-keyword">option</span> (google.api.http) = &#123;<br>post: <span class="hljs-string">&quot;/v1/review&quot;</span>,<br>body: <span class="hljs-string">&quot;*&quot;</span><br>&#125;;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">rpc</span> UpdateReview (UpdateReviewRequest) <span class="hljs-keyword">returns</span> (UpdateReviewReply)</span>;<br><span class="hljs-function"><span class="hljs-keyword">rpc</span> DeleteReview (DeleteReviewRequest) <span class="hljs-keyword">returns</span> (DeleteReviewReply)</span>;<br><span class="hljs-function"><span class="hljs-keyword">rpc</span> GetReview (GetReviewRequest) <span class="hljs-keyword">returns</span> (GetReviewReply)</span>;<br><span class="hljs-function"><span class="hljs-keyword">rpc</span> ListReview (ListReviewRequest) <span class="hljs-keyword">returns</span> (ListReviewReply)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">CreateReviewRequest</span> &#123;<br><span class="hljs-type">int64</span> userID = <span class="hljs-number">1</span> [(validate.rules).<span class="hljs-type">int64</span> = &#123;gt: <span class="hljs-number">0</span>&#125;];<br><span class="hljs-type">int64</span> orderID = <span class="hljs-number">2</span> [(validate.rules).<span class="hljs-type">int64</span> = &#123;gt: <span class="hljs-number">0</span>&#125;];<br><span class="hljs-type">int32</span> score = <span class="hljs-number">3</span> [(validate.rules).<span class="hljs-type">int32</span> = &#123;in: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]&#125;];<br><span class="hljs-type">int32</span> serviceScore = <span class="hljs-number">4</span> [(validate.rules).<span class="hljs-type">int32</span> = &#123;in: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]&#125;];<br><span class="hljs-type">int32</span> expressScore = <span class="hljs-number">5</span> [(validate.rules).<span class="hljs-type">int32</span> = &#123;in: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]&#125;];<br><span class="hljs-type">string</span> content = <span class="hljs-number">6</span> [(validate.rules).<span class="hljs-type">string</span> = &#123;min_len: <span class="hljs-number">8</span>, max_len: <span class="hljs-number">255</span>&#125;];<br><span class="hljs-type">string</span> picInfo = <span class="hljs-number">7</span>;<br><span class="hljs-type">string</span> videoInfo = <span class="hljs-number">8</span>;<br><span class="hljs-type">bool</span> anonymous = <span class="hljs-number">9</span>;<br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">CreateReviewReply</span> &#123;<br><span class="hljs-type">int64</span> reviewID = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">UpdateReviewRequest</span> &#123;&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">UpdateReviewReply</span> &#123;&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">DeleteReviewRequest</span> &#123;&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">DeleteReviewReply</span> &#123;&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">GetReviewRequest</span> &#123;&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">GetReviewReply</span> &#123;&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">ListReviewRequest</span> &#123;&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">ListReviewReply</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>生成client代码</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kratos proto client api/review/v1/review.proto<br></code></pre></td></tr></table></figure><ul><li>生成service代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kratos proto server api/review/v1/review.proto  -t internal/service<br></code></pre></td></tr></table></figure><p>server- &gt; service -&gt; biz -&gt; data </p><p>wire</p><p>gen data层的配置</p><h4 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h4><ul><li><p>配置文件</p><ul><li>yaml</li><li>proto</li><li>生成 pb文件</li></ul></li><li><p>server 层</p><ul><li><p>写 Registry的构造函数</p></li><li><p>添加到 provider中</p></li><li><pre><code class="go">  // ProviderSet is server providers.  var ProviderSet = wire.NewSet(NewGRPCServer, NewHTTPServer, NewRegistrar)    func NewRegistrar(conf *conf.Registry) registry.Registrar &#123;      c := consulAPI.DefaultConfig()      c.Address = conf.Consul.Address      c.Scheme = conf.Consul.Scheme      cli, err := consulAPI.NewClient(c)      if err != nil &#123;         panic(err)      &#125;      r := consul.New(cli, consul.WithHealthCheck(false))      return r  &#125;  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>- cmd<br><br>    - <span class="hljs-type">Name</span> <span class="hljs-keyword">Version</span><br><br>        - ```go<br>            var (<br>                // <span class="hljs-type">Name</span> <span class="hljs-keyword">is</span> the <span class="hljs-type">name</span> <span class="hljs-keyword">of</span> the compiled software.<br>                <span class="hljs-type">Name</span> = &quot;review.service&quot;<br>                // <span class="hljs-keyword">Version</span> <span class="hljs-keyword">is</span> the <span class="hljs-keyword">version</span> <span class="hljs-keyword">of</span> the compiled software.<br>                <span class="hljs-keyword">Version</span> string = &quot;v0.1&quot;<br>                // flagconf <span class="hljs-keyword">is</span> the config flag.<br>                flagconf string<br>            <br>                id, _ = os.Hostname()<br>            )<br></code></pre></td></tr></table></figure></code></pre></li><li><p>newApp 参数填充</p><ul><li><pre><code class="go">  func newApp(logger log.Logger, rr registry.Registrar, gs *grpc.Server, hs *http.Server) *kratos.App &#123;      return kratos.New(         kratos.ID(id),         kratos.Name(Name),         kratos.Version(Version),         kratos.Metadata(map[string]string&#123;&#125;),         kratos.Logger(logger),         kratos.Server(            gs,            hs,         ),         kratos.Registrar(rr),      )  &#125;  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata"><br>- 解析 pb文件结构体<br><br>    - ```go<br>        <span class="hljs-keyword">var</span> rc <span class="hljs-keyword">conf</span>.Registry<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">err</span> := c.Scan(&amp;rc); <span class="hljs-keyword">err</span> != nil &#123;<br>        panic(<span class="hljs-keyword">err</span>)<br>        &#125;<br>        <br>        <span class="hljs-keyword">app</span>, cleanup, <span class="hljs-keyword">err</span> := wireApp(bc.Server, &amp;rc, bc.Data, logger)<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>填充 wireApp </p><ul><li><pre><code class="go">  // wireApp init kratos application.  func wireApp(*conf.Server, *conf.Registry, *conf.Data, log.Logger) (*kratos.App, func(), error) &#123;      panic(wire.Build(server.ProviderSet, data.ProviderSet, biz.ProviderSet, service.ProviderSet, newApp))  &#125;  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><br><br><br><br><br><br><br><br><br><br><br>#### 项目sql<br><br>```sql<br><span class="hljs-keyword">CREATE</span> TABLE review_info (<br>        <span class="hljs-symbol">`id`</span> bigint(<span class="hljs-number">32</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>        <span class="hljs-symbol">`create_by`</span> varchar(<span class="hljs-number">48</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;创建方标识&#x27;</span>,<br>        <span class="hljs-symbol">`update_by`</span> varchar(<span class="hljs-number">48</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;更新方标识&#x27;</span>,<br>        <span class="hljs-symbol">`create_at`</span> timestamp <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT CURRENT_TIMESTAMP COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>        <span class="hljs-symbol">`update_at`</span> timestamp <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT CURRENT_TIMESTAMP <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CURRENT_TIMESTAMP COMMENT <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>        <span class="hljs-symbol">`delete_at`</span> timestamp COMMENT <span class="hljs-string">&#x27;逻辑删除标记&#x27;</span>,<br>        <span class="hljs-symbol">`version`</span>   int(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;乐观锁标记&#x27;</span>,<br><br>        <span class="hljs-symbol">`review_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;评价id&#x27;</span>,<br>        <span class="hljs-symbol">`content`</span> varchar(<span class="hljs-number">512</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;评价内容&#x27;</span>,<br>        <span class="hljs-symbol">`score`</span> tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;评分&#x27;</span>,<br>        <span class="hljs-symbol">`service_score`</span> tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;商家服务评分&#x27;</span>,<br>        <span class="hljs-symbol">`express_score`</span> tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;物流评分&#x27;</span>,<br>        <span class="hljs-symbol">`has_media`</span> tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;是否有图或视频&#x27;</span>,<br>        <span class="hljs-symbol">`order_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;订单id&#x27;</span>,<br>        <span class="hljs-symbol">`sku_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;sku id&#x27;</span>,<br>        <span class="hljs-symbol">`spu_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;spu id&#x27;</span>,<br>        <span class="hljs-symbol">`store_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;店铺id&#x27;</span>,<br>        <span class="hljs-symbol">`user_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>        <span class="hljs-symbol">`anonymous`</span> tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;是否匿名&#x27;</span>,<br>        <span class="hljs-symbol">`tags`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;标签json&#x27;</span>,<br>        <span class="hljs-symbol">`pic_info`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;媒体信息：图片&#x27;</span>,<br>        <span class="hljs-symbol">`video_info`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;媒体信息：视频&#x27;</span>,<br>        <span class="hljs-symbol">`status`</span> tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;10&#x27;</span> COMMENT <span class="hljs-string">&#x27;状态:10待审核；20审核通过；30审核不通过；40隐藏&#x27;</span>,<br>        <span class="hljs-symbol">`is_default`</span> tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;是否默认评价&#x27;</span>,<br>        <span class="hljs-symbol">`has_reply`</span> tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;是否有商家回复:0无;1有&#x27;</span>,<br>        <span class="hljs-symbol">`op_reason`</span> varchar(<span class="hljs-number">512</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;运营审核拒绝原因&#x27;</span>,<br>        <span class="hljs-symbol">`op_remarks`</span> varchar(<span class="hljs-number">512</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;运营备注&#x27;</span>,<br>        <span class="hljs-symbol">`op_user`</span> varchar(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;运营者标识&#x27;</span>,<br><br>        <span class="hljs-symbol">`goods_snapshoot`</span> varchar(<span class="hljs-number">2048</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;商品快照信息&#x27;</span>,<br>        <span class="hljs-symbol">`ext_json`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;信息扩展&#x27;</span>,<br>        <span class="hljs-symbol">`ctrl_json`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;控制扩展&#x27;</span>,<br>        <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>),<br>        <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_delete_at`</span> (<span class="hljs-symbol">`delete_at`</span>) COMMENT <span class="hljs-string">&#x27;逻辑删除索引&#x27;</span>,<br>        <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`uk_review_id`</span> (<span class="hljs-symbol">`review_id`</span>) COMMENT <span class="hljs-string">&#x27;评价id索引&#x27;</span>,<br>        <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_order_id`</span> (<span class="hljs-symbol">`order_id`</span>) COMMENT <span class="hljs-string">&#x27;订单id索引&#x27;</span>,<br>        <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_user_id`</span> (<span class="hljs-symbol">`user_id`</span>) COMMENT <span class="hljs-string">&#x27;用户id索引&#x27;</span><br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=<span class="hljs-string">&#x27;评价表&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> TABLE review_reply_info (<br>        <span class="hljs-symbol">`id`</span> bigint(<span class="hljs-number">32</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>        <span class="hljs-symbol">`create_by`</span> varchar(<span class="hljs-number">48</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;创建方标识&#x27;</span>,<br>        <span class="hljs-symbol">`update_by`</span> varchar(<span class="hljs-number">48</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;更新方标识&#x27;</span>,<br>        <span class="hljs-symbol">`create_at`</span> timestamp <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT CURRENT_TIMESTAMP COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>        <span class="hljs-symbol">`update_at`</span> timestamp <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT CURRENT_TIMESTAMP <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CURRENT_TIMESTAMP COMMENT <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>        <span class="hljs-symbol">`delete_at`</span> timestamp COMMENT <span class="hljs-string">&#x27;逻辑删除标记&#x27;</span>,<br>        <span class="hljs-symbol">`version`</span> int(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;乐观锁标记&#x27;</span>,<br><br>        <span class="hljs-symbol">`reply_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;回复id&#x27;</span>,<br>        <span class="hljs-symbol">`review_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;评价id&#x27;</span>,<br>        <span class="hljs-symbol">`store_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;店铺id&#x27;</span>,<br>        <span class="hljs-symbol">`content`</span> varchar(<span class="hljs-number">512</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;评价内容&#x27;</span>,<br>        <span class="hljs-symbol">`pic_info`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;媒体信息：图片&#x27;</span>,<br>        <span class="hljs-symbol">`video_info`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;媒体信息：视频&#x27;</span>,<br><br>        <span class="hljs-symbol">`ext_json`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;信息扩展&#x27;</span>,<br>        <span class="hljs-symbol">`ctrl_json`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;控制扩展&#x27;</span>,<br>        <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>),<br>        <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_delete_at`</span> (<span class="hljs-symbol">`delete_at`</span>) COMMENT <span class="hljs-string">&#x27;逻辑删除索引&#x27;</span>,<br>        <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`uk_reply_id`</span> (<span class="hljs-symbol">`reply_id`</span>) COMMENT <span class="hljs-string">&#x27;回复id索引&#x27;</span>,<br>        <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_review_id`</span> (<span class="hljs-symbol">`review_id`</span>) COMMENT <span class="hljs-string">&#x27;评价id索引&#x27;</span>,<br>        <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_store_id`</span> (<span class="hljs-symbol">`store_id`</span>) COMMENT <span class="hljs-string">&#x27;店铺id索引&#x27;</span><br>)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=<span class="hljs-string">&#x27;评价商家回复表&#x27;</span>;<br><br><br><span class="hljs-keyword">CREATE</span> TABLE review_appeal_info (<br>        <span class="hljs-symbol">`id`</span> bigint(<span class="hljs-number">32</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>        <span class="hljs-symbol">`create_by`</span> varchar(<span class="hljs-number">48</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;创建方标识&#x27;</span>,<br>        <span class="hljs-symbol">`update_by`</span> varchar(<span class="hljs-number">48</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;更新方标识&#x27;</span>,<br>        <span class="hljs-symbol">`create_at`</span> timestamp <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT CURRENT_TIMESTAMP COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>        <span class="hljs-symbol">`update_at`</span> timestamp <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT CURRENT_TIMESTAMP <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CURRENT_TIMESTAMP COMMENT <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>        <span class="hljs-symbol">`delete_at`</span> timestamp COMMENT <span class="hljs-string">&#x27;逻辑删除标记&#x27;</span>,<br>        <span class="hljs-symbol">`version`</span> int(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;乐观锁标记&#x27;</span>,<br><br>        <span class="hljs-symbol">`appeal_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;回复id&#x27;</span>,<br>        <span class="hljs-symbol">`review_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;评价id&#x27;</span>,<br>        <span class="hljs-symbol">`store_id`</span> bigint(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;店铺id&#x27;</span>,<br>        <span class="hljs-symbol">`status`</span> tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;10&#x27;</span> COMMENT <span class="hljs-string">&#x27;状态:10待审核；20申诉通过；30申诉驳回&#x27;</span>,<br>        <span class="hljs-symbol">`reason`</span> varchar(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;申诉原因类别&#x27;</span>,<br>        <span class="hljs-symbol">`content`</span> varchar(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;申诉内容描述&#x27;</span>,<br>        <span class="hljs-symbol">`pic_info`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;媒体信息：图片&#x27;</span>,<br>        <span class="hljs-symbol">`video_info`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;媒体信息：视频&#x27;</span>,<br><br>        <span class="hljs-symbol">`op_remarks`</span> varchar(<span class="hljs-number">512</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;运营备注&#x27;</span>,<br>        <span class="hljs-symbol">`op_user`</span> varchar(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;运营者标识&#x27;</span>,<br><br>        <span class="hljs-symbol">`ext_json`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;信息扩展&#x27;</span>,<br>        <span class="hljs-symbol">`ctrl_json`</span> varchar(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;控制扩展&#x27;</span>,<br>        <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>),<br>        <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_delete_at`</span> (<span class="hljs-symbol">`delete_at`</span>) COMMENT <span class="hljs-string">&#x27;逻辑删除索引&#x27;</span>,<br>        <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_appeal_id`</span> (<span class="hljs-symbol">`appeal_id`</span>) COMMENT <span class="hljs-string">&#x27;申诉id索引&#x27;</span>,<br>        <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`uk_review_id`</span> (<span class="hljs-symbol">`review_id`</span>) COMMENT <span class="hljs-string">&#x27;评价id索引&#x27;</span>,<br>        <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_store_id`</span> (<span class="hljs-symbol">`store_id`</span>) COMMENT <span class="hljs-string">&#x27;店铺id索引&#x27;</span><br>)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=<span class="hljs-string">&#x27;评价商家申诉表&#x27;</span>;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><h4 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">desc</span> table_name;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># review_appeal_info</span><br>+------------+---------------------+------+-----+---------------------+-----------------------------+<br>| Field      | Type                | Null | Key | Default             | Extra                       |<br>+------------+---------------------+------+-----+---------------------+-----------------------------+<br>| <span class="hljs-built_in">id</span>         | bigint(32) unsigned | NO   | PRI | NULL                | auto_increment              |<br>| create_by  | varchar(48)         | NO   |     |                     |                             |<br>| update_by  | varchar(48)         | NO   |     |                     |                             |<br>| create_at  | timestamp           | NO   |     | CURRENT_TIMESTAMP   |                             |<br>| update_at  | timestamp           | NO   |     | CURRENT_TIMESTAMP   | on update CURRENT_TIMESTAMP |<br>| delete_at  | timestamp           | NO   | MUL | 0000-00-00 00:00:00 |                             |<br>| version    | int(10) unsigned    | NO   |     | 0                   |                             |<br>| appeal_id  | bigint(32)          | NO   | MUL | 0                   |                             |<br>| review_id  | bigint(32)          | NO   | UNI | 0                   |                             |<br>| store_id   | bigint(32)          | NO   | MUL | 0                   |                             |<br>| status     | tinyint(4)          | NO   |     | 10                  |                             |<br>| reason     | varchar(255)        | NO   |     | NULL                |                             |<br>| content    | varchar(255)        | NO   |     | NULL                |                             |<br>| pic_info   | varchar(1024)       | NO   |     |                     |                             |<br>| video_info | varchar(1024)       | NO   |     |                     |                             |<br>| op_remarks | varchar(512)        | NO   |     |                     |                             |<br>| op_user    | varchar(64)         | NO   |     |                     |                             |<br>| ext_json   | varchar(1024)       | NO   |     |                     |                             |<br>| ctrl_json  | varchar(1024)       | NO   |     |                     |                             |<br>+------------+---------------------+------+-----+---------------------+-----------------------------+<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># review_reply_info</span><br>+------------+---------------------+------+-----+---------------------+-----------------------------+<br>| Field      | Type                | Null | Key | Default             | Extra                       |<br>+------------+---------------------+------+-----+---------------------+-----------------------------+<br>| <span class="hljs-built_in">id</span>         | bigint(32) unsigned | NO   | PRI | NULL                | auto_increment              |<br>| create_by  | varchar(48)         | NO   |     |                     |                             |<br>| update_by  | varchar(48)         | NO   |     |                     |                             |<br>| create_at  | timestamp           | NO   |     | CURRENT_TIMESTAMP   |                             |<br>| update_at  | timestamp           | NO   |     | CURRENT_TIMESTAMP   | on update CURRENT_TIMESTAMP |<br>| delete_at  | timestamp           | NO   | MUL | 0000-00-00 00:00:00 |                             |<br>| version    | int(10) unsigned    | NO   |     | 0                   |                             |<br>| reply_id   | bigint(32)          | NO   | UNI | 0                   |                             |<br>| review_id  | bigint(32)          | NO   | MUL | 0                   |                             |<br>| store_id   | bigint(32)          | NO   | MUL | 0                   |                             |<br>| content    | varchar(512)        | NO   |     | NULL                |                             |<br>| pic_info   | varchar(1024)       | NO   |     |                     |                             |<br>| video_info | varchar(1024)       | NO   |     |                     |                             |<br>| ext_json   | varchar(1024)       | NO   |     |                     |                             |<br>| ctrl_json  | varchar(1024)       | NO   |     |                     |                             |<br>+------------+---------------------+------+-----+---------------------+-----------------------------+<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#review_info</span><br>+-----------------+---------------------+------+-----+---------------------+-----------------------------+<br>| Field           | Type                | Null | Key | Default             | Extra                       |<br>+-----------------+---------------------+------+-----+---------------------+-----------------------------+<br>| <span class="hljs-built_in">id</span>              | bigint(32) unsigned | NO   | PRI | NULL                | auto_increment              |<br>| create_by       | varchar(48)         | NO   |     |                     |                             |<br>| update_by       | varchar(48)         | NO   |     |                     |                             |<br>| create_at       | timestamp           | NO   |     | CURRENT_TIMESTAMP   |                             |<br>| update_at       | timestamp           | NO   |     | CURRENT_TIMESTAMP   | on update CURRENT_TIMESTAMP |<br>| delete_at       | timestamp           | NO   | MUL | 0000-00-00 00:00:00 |                             |<br>| version         | int(10) unsigned    | NO   |     | 0                   |                             |<br>| review_id       | bigint(32)          | NO   | UNI | 0                   |                             |<br>| content         | varchar(512)        | NO   |     | NULL                |                             |<br>| score           | tinyint(4)          | NO   |     | 0                   |                             |<br>| service_score   | tinyint(4)          | NO   |     | 0                   |                             |<br>| express_score   | tinyint(4)          | NO   |     | 0                   |                             |<br>| has_media       | tinyint(4)          | NO   |     | 0                   |                             |<br>| order_id        | bigint(32)          | NO   | MUL | 0                   |                             |<br>| sku_id          | bigint(32)          | NO   |     | 0                   |                             |<br>| spu_id          | bigint(32)          | NO   |     | 0                   |                             |<br>| store_id        | bigint(32)          | NO   |     | 0                   |                             |<br>| user_id         | bigint(32)          | NO   | MUL | 0                   |                             |<br>| anonymous       | tinyint(4)          | NO   |     | 0                   |                             |<br>| tags            | varchar(1024)       | NO   |     |                     |                             |<br>| pic_info        | varchar(1024)       | NO   |     |                     |                             |<br>| video_info      | varchar(1024)       | NO   |     |                     |                             |<br>| status          | tinyint(4)          | NO   |     | 10                  |                             |<br>| is_default      | tinyint(4)          | NO   |     | 0                   |                             |<br>| has_reply       | tinyint(4)          | NO   |     | 0                   |                             |<br>| op_reason       | varchar(512)        | NO   |     |                     |                             |<br>| op_remarks      | varchar(512)        | NO   |     |                     |                             |<br>| op_user         | varchar(64)         | NO   |     |                     |                             |<br>| goods_snapshoot | varchar(2048)       | NO   |     |                     |                             |<br>| ext_json        | varchar(1024)       | NO   |     |                     |                             |<br>| ctrl_json       | varchar(1024)       | NO   |     |                     |                             |<br>+-----------------+---------------------+------+-----+---------------------+-----------------------------+<br></code></pre></td></tr></table></figure><p>待续。。。</p><ul><li>gen实现数据库表和字段的映射</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// cmd/gen/generato</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">// gorm gen configure</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;gorm.io/driver/mysql&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br><br><span class="hljs-string">&quot;gorm.io/gen&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> MySQLDSN = <span class="hljs-string">&quot;root:571400yst@tcp(127.0.0.1:3306)/review_service?charset=utf8mb4&amp;parseTime=True&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connectDB</span><span class="hljs-params">(dsn <span class="hljs-type">string</span>)</span></span> *gorm.DB &#123;<br>db, err := gorm.Open(mysql.Open(dsn))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(fmt.Errorf(<span class="hljs-string">&quot;connect db fail: %w&quot;</span>, err))<br>&#125;<br><span class="hljs-keyword">return</span> db<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 指定生成代码的具体相对目录(相对当前文件)，默认为：./query</span><br><span class="hljs-comment">// 默认生成需要使用WithContext之后才可以查询的代码，但可以通过设置gen.WithoutContext禁用该模式</span><br>g := gen.NewGenerator(gen.Config&#123;<br><span class="hljs-comment">// 默认会在 OutPath 目录生成CRUD代码，并且同目录下生成 model 包</span><br><span class="hljs-comment">// 所以OutPath最终package不能设置为model，在有数据库表同步的情况下会产生冲突</span><br><span class="hljs-comment">// 若一定要使用可以通过ModelPkgPath单独指定model package的名称</span><br>OutPath: <span class="hljs-string">&quot;../../internal/data/query&quot;</span>,<br><span class="hljs-comment">/* ModelPkgPath: &quot;dal/model&quot;*/</span><br><br><span class="hljs-comment">// gen.WithoutContext：禁用WithContext模式</span><br><span class="hljs-comment">// gen.WithDefaultQuery：生成一个全局Query对象Q</span><br><span class="hljs-comment">// gen.WithQueryInterface：生成Query接口</span><br>Mode: gen.WithDefaultQuery | gen.WithQueryInterface,<br>&#125;)<br><br><span class="hljs-comment">// 通常复用项目中已有的SQL连接配置db(*gorm.DB)</span><br><span class="hljs-comment">// 非必需，但如果需要复用连接时的gorm.Config或需要连接数据库同步表信息则必须设置</span><br>g.UseDB(connectDB(MySQLDSN))<br><br><span class="hljs-comment">// 从连接的数据库为所有表生成Model结构体和CRUD代码</span><br><span class="hljs-comment">// 也可以手动指定需要生成代码的数据表</span><br>g.ApplyBasic(g.GenerateAllTable()...)<br><br><span class="hljs-comment">// 执行并生成代码</span><br>g.Execute()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="GEN的使用"><a href="#GEN的使用" class="headerlink" title="GEN的使用"></a>GEN的使用</h4><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><h4 id="snowflake算法"><a href="#snowflake算法" class="headerlink" title="snowflake算法"></a>snowflake算法</h4><h4 id="pb-的validate"><a href="#pb-的validate" class="headerlink" title="pb 的validate"></a>pb 的validate</h4><p><a href="https://go-kratos.dev/docs/component/middleware/validate">参数校验 | Kratos (go-kratos.dev)</a></p><ul><li>根据validate的规则给probuf文件写 validate</li><li>make validate，生成validate的pb文件</li><li>在 <code>grpc</code> <code>http</code>中插入 <code>validate.Validator(),</code></li></ul><h4 id="copier库"><a href="#copier库" class="headerlink" title="copier库"></a>copier库</h4><h4 id="分页处理"><a href="#分页处理" class="headerlink" title="分页处理"></a>分页处理</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">limit = size<br>offset = (page - <span class="hljs-number">1</span>) * size<br></code></pre></td></tr></table></figure><h4 id="C端"><a href="#C端" class="headerlink" title="C端"></a>C端</h4><ul><li>用户创建评价</li><li>用户查询根据userID查询自己的评价</li><li>用户根据OrderID查询评价</li><li>查询评价回复</li></ul><h4 id="B端"><a href="#B端" class="headerlink" title="B端"></a>B端</h4><ul><li>回复评价<ul><li>字段 reviewID、storeID、content、picInfo、vidInfo</li><li>查看评价是否存在</li><li>水平鉴权</li><li>保存到数据库中</li></ul></li><li>申诉评价<ul><li>查看该评论的申诉是否存在<ul><li><p>存在</p><ul><li>查看状态<ul><li><p>申诉通过 || 申诉驳回</p><ul><li>返回</li></ul></li><li><p>待审核</p><ul><li>update</li></ul></li></ul></li></ul></li><li><p>不存在</p><ul><li>insert</li></ul></li></ul></li></ul></li></ul><h4 id="O端"><a href="#O端" class="headerlink" title="O端"></a>O端</h4><ul><li><p>AuditReview</p><ul><li>更新review表的字段</li></ul></li><li><p>AuditAppeal</p><ul><li>更新 appeal表的状态</li><li>如果申诉成功，则更改info表的状态，显示为 隐藏</li></ul></li></ul><h4 id="review-job-review-task"><a href="#review-job-review-task" class="headerlink" title="review-job&#x2F; review-task"></a>review-job&#x2F; review-task</h4><p>后端服务的分类</p><ul><li>service :微服务，提供API RPC接口</li><li>job：流式服务，处理实时流<ul><li>检查数据的变更，将多张表的数据整合 加工 处理 组成成一个 document，存入ES中</li></ul></li><li>task 定时任务，定时处理任务</li></ul><p>start </p><p>stop</p><h4 id="go-kafaka"><a href="#go-kafaka" class="headerlink" title="go-kafaka"></a>go-kafaka</h4><h4 id="canal"><a href="#canal" class="headerlink" title="canal"></a>canal</h4><h5 id="配置操作"><a href="#配置操作" class="headerlink" title="配置操作"></a>配置操作</h5><ul><li><p>安装canal前我们先开启MySql的 binlog，在MySQL配置文件my.cnf设置如下信息：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld] <br><span class="hljs-comment"># 打开binlog </span><br>log-bin=mysql-bin <br><span class="hljs-comment"># 选择ROW(行)模式 </span><br>binlog-format=ROW <br><span class="hljs-comment"># 配置MySQL replaction需要定义，不要和canal的slaveId重复 </span><br>server_id=1<br></code></pre></td></tr></table></figure></li><li><p>查看是否有开启bin_log</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;log_bin&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>查看bin_log</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show binary logs;<br></code></pre></td></tr></table></figure></li><li><p>在mysql中给canal单独建一个用户，给全库全表的读，拷贝，复制的权限</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-- 使用命令登录：<br>mysql -u root -p <br>-- 创建用户 用户名：canal 密码：Canal@123456 <br>create user <span class="hljs-string">&#x27;canal&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;Canal@123456&#x27;</span>;<br>-- 授权 *.*表示所有库 <br>grant SELECT, REPLICATION SLAVE, REPLICATION CLIENT on *.* to <span class="hljs-string">&#x27;canal&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;Canal@123456&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="查询-操作"><a href="#查询-操作" class="headerlink" title="查询 操作"></a>查询 操作</h4><ul><li>通过singleFlight合并大量相同的并发查询<ul><li>使用redis查询<ul><li>缓存命中，直接返回</li><li>缓存未命中<ul><li>使用es查询</li><li>将查询存入cache中</li></ul></li></ul></li></ul></li></ul><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231231112216683.png" alt="image-20231231112216683"></p><h3 id="Canal-mysql的增量数据解析工具"><a href="#Canal-mysql的增量数据解析工具" class="headerlink" title="Canal mysql的增量数据解析工具"></a>Canal mysql的增量数据解析工具</h3><p>**canal [kə’næl]**，译意为水道&#x2F;管道&#x2F;沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费</p><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231222142823491.png" alt="image-20231222142823491"></p><h4 id="MySQL主备复制原理"><a href="#MySQL主备复制原理" class="headerlink" title="MySQL主备复制原理"></a>MySQL主备复制原理</h4><ul><li>MySQL master 将数据变更写入二进制日志( binary log, 其中记录叫做二进制日志事件binary log events，可以通过 show binlog events 进行查看)</li><li>MySQL slave 将 master 的 binary log events 拷贝到它的中继日志(relay log)</li><li>MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据</li></ul><h4 id="canal-工作原理"><a href="#canal-工作原理" class="headerlink" title="canal 工作原理"></a>canal 工作原理</h4><ul><li>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议</li><li>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</li><li>canal 解析 binary log 对象(原始为 byte 流)</li></ul><p>待续。。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;log_bin&#x27;;<br></code></pre></td></tr></table></figure><h3 id="CQRS架构和Elastic-Search"><a href="#CQRS架构和Elastic-Search" class="headerlink" title="CQRS架构和Elastic Search"></a>CQRS架构和Elastic Search</h3><h4 id="为什么要使用-ES来-实现O端的数据查询？"><a href="#为什么要使用-ES来-实现O端的数据查询？" class="headerlink" title="为什么要使用 ES来 实现O端的数据查询？"></a>为什么要使用 ES来 实现O端的数据查询？</h4><ul><li>O端需要 多条件的 复制查询（多字段 跨表 多数据 -&gt;超时）</li></ul><h4 id="CQRS架构是什么"><a href="#CQRS架构是什么" class="headerlink" title="CQRS架构是什么"></a>CQRS架构是什么</h4><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231222145336075.png" alt="image-20231222145336075"></p><p>是 命令查询职责分离 （command QueryResponsibility Segregation）的缩写，在基于CQRS 的系统中，命令（写操作）和查询操作（读操作）所使用的数据模型是由区别的。通过各种机制将命令模型中的变更传播到查询模型中，让两个模型保持一致。</p><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><p>ElasticSearch架构主要由三个组件构成：索引、分片和节点</p><ul><li>索引是文档的逻辑分组，类似于数据库的表</li><li>分片是索引的物理分区，用于提高数据库的分布和性能提升</li><li>节点是运行ElasticSearch的节点</li></ul><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231222152752038.png" alt="image-20231222152752038"></p><p><strong>工作原理</strong></p><ol><li>接受用户的查询请求：ElasticSearch通过RESTful API 或者是 JSON请求接受用户到查询请求</li><li>路由请求:接收到查询请求后，ElasticSearch根据请求中的索引和分区的信息，将请求路由到相应的节点</li><li>执行查询：节点执行查询请求,并在相应的索引中 查找匹配的文档</li><li>返回结果：结果以json的格式返回给用户，包括匹配的文档和相应字段信息</li></ol><h3 id="我的踩坑记录"><a href="#我的踩坑记录" class="headerlink" title="我的踩坑记录"></a>我的踩坑记录</h3><ul><li><p>mysql的DSN没加<code>charset=utf8mb4&amp;parseTime=True</code> 报错<code>gorm sql: Scan error on column index 3, name &quot;create_at&quot;: unsupported Scan, storing driver.Value type []uint8 into type *time.Time</code></p></li><li><p>makefile的插件 对空格的识别问题</p></li><li><p>记得在httpSrv和grpc中添加 <code> validate.Validator(),</code></p></li><li><p>server 层进行格式转换（proto的数据转为GEN的数据格式）</p></li><li><p>空指针异常 这行代码只是分配了内存空间，并没有为每个元素分配内存。因此，<code>reviewInfos</code> 中的每个元素都是 <code>nil</code>，即空指针。</p><ul><li><p>方法一</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">reviewInfos := <span class="hljs-built_in">make</span>([]*ReviewInfo, <span class="hljs-built_in">len</span>(reviews))<br><br>    <span class="hljs-comment">// 循环遍历切片，并为每个元素分配内存</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> reviews &#123;<br>        reviewInfos[i] = &amp;ReviewInfo&#123;&#125; <span class="hljs-comment">// 这里可以根据实际情况初始化 ReviewInfo 的字段</span><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>方法二<img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231223101615268.png" alt="image-20231223101615268"></p></li></ul></li><li><p>limit 因该在 offset前</p><ul><li><pre><code class="sql">  SELECT * FROM review_info ORDER BY id LIMIT 3 OFFSET 4;  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>    - 使用 `lmimit offset,rows` 也可也达到同样的效果<br><br><br><br>### GEN 的使用<br><br>#### 基本使用<br><br>安装依赖<br><br>```bash<br>go get -u gorm.io/gen<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>创建基本表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE book<br>(<br>    `id`     bigint unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,<br>    `title`  varchar(128) NOT NULL COMMENT &#x27;书籍名称&#x27;,<br>    `author` varchar(128) NOT NULL COMMENT &#x27;作者&#x27;,<br>    `price`  int NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;价格&#x27;,<br>    `publish_date` datetime COMMENT &#x27;出版日期&#x27;,<br>    PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;书籍表&#x27;;<br></code></pre></td></tr></table></figure><p>配置GEN，生成对应代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">// gorm gen configure</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;gorm.io/driver/mysql&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br><br><span class="hljs-string">&quot;gorm.io/gen&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> MySQLDSN = <span class="hljs-string">&quot;root:571400yst@tcp(127.0.0.1:3306)/testdb1?charset=utf8mb4&amp;parseTime=True&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connectDB</span><span class="hljs-params">(dsn <span class="hljs-type">string</span>)</span></span> *gorm.DB &#123;<br>db, err := gorm.Open(mysql.Open(dsn))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(fmt.Errorf(<span class="hljs-string">&quot;connect db fail: %w&quot;</span>, err))<br>&#125;<br><span class="hljs-keyword">return</span> db<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 指定生成代码的具体相对目录(相对当前文件)，默认为：./query</span><br><span class="hljs-comment">// 默认生成需要使用WithContext之后才可以查询的代码，但可以通过设置gen.WithoutContext禁用该模式</span><br>g := gen.NewGenerator(gen.Config&#123;<br><span class="hljs-comment">// 默认会在 OutPath 目录生成CRUD代码，并且同目录下生成 model 包</span><br><span class="hljs-comment">// 所以OutPath最终package不能设置为model，在有数据库表同步的情况下会产生冲突</span><br><span class="hljs-comment">// 若一定要使用可以通过ModelPkgPath单独指定model package的名称</span><br>OutPath: <span class="hljs-string">&quot;../../dal/query&quot;</span>,<br><span class="hljs-comment">/* ModelPkgPath: &quot;dal/model&quot;*/</span><br><br><span class="hljs-comment">// gen.WithoutContext：禁用WithContext模式</span><br><span class="hljs-comment">// gen.WithDefaultQuery：生成一个全局Query对象Q</span><br><span class="hljs-comment">// gen.WithQueryInterface：生成Query接口</span><br>Mode: gen.WithDefaultQuery | gen.WithQueryInterface,<br>&#125;)<br><br><span class="hljs-comment">// 通常复用项目中已有的SQL连接配置db(*gorm.DB)</span><br><span class="hljs-comment">// 非必需，但如果需要复用连接时的gorm.Config或需要连接数据库同步表信息则必须设置</span><br>g.UseDB(connectDB(MySQLDSN))<br><br><span class="hljs-comment">// 从连接的数据库为所有表生成Model结构体和CRUD代码</span><br><span class="hljs-comment">// 也可以手动指定需要生成代码的数据表</span><br>g.ApplyBasic(g.GenerateAllTable()...)<br><br><span class="hljs-comment">// 执行并生成代码</span><br>g.Execute()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── cmd<br>│   └── gen<br>│       └── generate.go<br>├── dal<br>│   ├── model<br>│   │   └── book.gen.go<br>│   └── query<br>│       ├── book.gen.go<br>│       └── gen.go<br>├── go.mod<br>└── go.sum<br></code></pre></td></tr></table></figure><p>用一用生成的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;gen_demo/dal/model&quot;</span><br><span class="hljs-string">&quot;gen_demo/dal/query&quot;</span><br><span class="hljs-string">&quot;gorm.io/gen/examples/dal&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// gen demo</span><br><br><span class="hljs-keyword">const</span> MySQLDSN = <span class="hljs-string">&quot;root:571400yst@tcp(127.0.0.1:3306)/testdb1?charset=utf8mb4&amp;parseTime=True&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>dal.DB = dal.ConnectDB(MySQLDSN).Debug()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 设置默认DB对象</span><br>query.SetDefault(dal.DB)<br>b1 := &amp;model.Book&#123;<br>Title:       <span class="hljs-string">&quot;book1&quot;</span>,<br>Author:      <span class="hljs-string">&quot;Forrest&quot;</span>,<br>Price:       <span class="hljs-number">100</span>,<br>PublishDate: time.Now(),<br>&#125;<br><span class="hljs-comment">// create</span><br>err := query.Book.WithContext(context.Background()).Create(b1)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Create book failed,err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">//update</span><br>ret, err := query.Book.WithContext(context.Background()).<br>Where(query.Book.ID.Eq(<span class="hljs-number">1</span>)).<br>Update(query.Book.Title, <span class="hljs-string">&quot;book-2&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;update book failed,err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;-&gt; ret:%#v\n&quot;</span>, ret)<br><br><span class="hljs-comment">//select</span><br>info, err := query.Book.WithContext(context.Background()).<br>Where(query.Book.ID.Eq(<span class="hljs-number">1</span>)).First()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;select book failed,err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;-&gt; info:%#v\n&quot;</span>, info)<br><br><span class="hljs-comment">//delete</span><br>ret, err = query.Book.WithContext(context.Background()).Where(query.Book.ID.Eq(<span class="hljs-number">1</span>)).Delete()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;select book failed,err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;-&gt; ret:%#v\n&quot;</span>, ret)<br><br>fmt.Printf(<span class="hljs-string">&quot;done...&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── cmd<br>│   └── gen<br>│       └── generate.go<br>├── dal<br>│   ├── model<br>│   │   ├── book.gen.go<br>│   │   └── db.go<br>│   └── query<br>│       ├── book.gen.go<br>│       └── gen.go<br>├── go.mod<br>├── go.sum<br>└── main.go<br></code></pre></td></tr></table></figure><h4 id="自定义SQL查询"><a href="#自定义SQL查询" class="headerlink" title="自定义SQL查询"></a><strong>自定义SQL查询</strong></h4><p>Gen框架使用模板注释的方法支持自定义SQL查询，我们只需要按对应规则将SQL语句注释到interface的方法上即可。Gen将对其进行解析，并为应用的结构生成查询API。</p><p>通常建议将自定义查询方法添加到<code>model</code>模块下</p><h5 id="注释语法"><a href="#注释语法" class="headerlink" title="注释语法"></a><strong>注释语法</strong></h5><p>Gen 为动态条件 SQL 支持提供了一些约定语法，分为三个方面：</p><ul><li>返回结果</li><li>模板占位符</li><li>模板表达式</li></ul><p>返回结果</p><table><thead><tr><th align="left">占位符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">gen.T</td><td align="left">用于返回数据的结构体，会根据生成结构体或者数据库表结构自动生成</td></tr><tr><td align="left">gen.M</td><td align="left">表示<code>map[string]interface&#123;&#125;</code>,用于返回数据</td></tr><tr><td align="left">gen.RowsAffected</td><td align="left">用于执行SQL进行更新或删除时候,用于返回影响行数</td></tr><tr><td align="left">error</td><td align="left">返回错误（如果有）</td></tr></tbody></table><p>示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// dal/model/querier.go</span><br><br><span class="hljs-keyword">package</span> model<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;gorm.io/gen&quot;</span><br><br><span class="hljs-comment">// 通过添加注释生成自定义方法</span><br><br><span class="hljs-keyword">type</span> Querier <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-comment">// SELECT * FROM @@table WHERE id=@id</span><br>GetByID(id <span class="hljs-type">int</span>) (gen.T, <span class="hljs-type">error</span>) <span class="hljs-comment">// 返回结构体和error</span><br><br><span class="hljs-comment">// GetByIDReturnMap 根据ID查询返回map</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// SELECT * FROM @@table WHERE id=@id</span><br>GetByIDReturnMap(id <span class="hljs-type">int</span>) (gen.M, <span class="hljs-type">error</span>) <span class="hljs-comment">// 返回 map 和 error</span><br><br><span class="hljs-comment">// SELECT * FROM @@table WHERE author=@author</span><br>GetBooksByAuthor(author <span class="hljs-type">string</span>) ([]*gen.T, <span class="hljs-type">error</span>) <span class="hljs-comment">// 返回数据切片和 error</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在cmd&#x2F;gen&#x2F;generate.go中添加自定义方法绑定关系</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 通过ApplyInterface添加为book表添加自定义方法</span><br>g.ApplyInterface(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(model.Querier)</span></span> &#123;&#125;, g.GenerateModel(<span class="hljs-string">&quot;book&quot;</span>))<br></code></pre></td></tr></table></figure><p><img src="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E4%BA%91%E5%8E%9F%E7%94%9F/image-20231211162235232.png" alt="image-20231211162235232"></p><p>重新生成代码后就能使用自定义方法了</p><table><thead><tr><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>@@table</code></td><td align="center">转义和引用表名</td></tr><tr><td align="center"><code>@@&lt;name&gt;</code></td><td align="center">从参数中转义并引用表&#x2F;列名</td></tr><tr><td align="center"><code>@&lt;name&gt;</code></td><td align="center">参数中的SQL查询参数</td></tr></tbody></table><h4 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 事务操作</span><br>err = r.data.query.Transaction(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(tx *query.Query)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 回复表插入一条数据</span><br><span class="hljs-keyword">if</span> err := tx.ReviewReplyInfo.<br>WithContext(ctx).<br>Save(reply); err != <span class="hljs-literal">nil</span> &#123;<br>r.log.WithContext(ctx).Errorf(<span class="hljs-string">&quot;SaveReply create reply fail, err:%v&quot;</span>, err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// 评价表更新hasReply字段</span><br><span class="hljs-keyword">if</span> _, err := tx.ReviewInfo.<br>WithContext(ctx).<br>Where(tx.ReviewInfo.ReviewID.Eq(reply.ReviewID)).<br>Update(tx.ReviewInfo.HasReply, <span class="hljs-number">1</span>); err != <span class="hljs-literal">nil</span> &#123;<br>r.log.WithContext(ctx).Errorf(<span class="hljs-string">&quot;SaveReply update review fail, err:%v&quot;</span>, err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>go</tag>
      
      <tag>云原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查看进程内存空间</title>
    <link href="/2023/12/02/%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4/"/>
    <url>/2023/12/02/%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h3 id="C语言的编译过程"><a href="#C语言的编译过程" class="headerlink" title="C语言的编译过程"></a>C语言的编译过程</h3><h3 id="逻辑地址和物理地址"><a href="#逻辑地址和物理地址" class="headerlink" title="逻辑地址和物理地址"></a>逻辑地址和物理地址</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> global_var = <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> static_var = <span class="hljs-number">6</span>;<br>    <span class="hljs-type">int</span> local_var = <span class="hljs-number">7</span>;<br>    <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br><br>    <span class="hljs-comment">// Be careful: we must use %lx to show a 64bits address!!</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the global_var address is %lx\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)&amp;global_var);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the static_var address is %lx\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)&amp;static_var);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the local_var address is %lx\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)&amp;local_var);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the address which the p points to %lx\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)p);<br><br>    <span class="hljs-built_in">free</span>(p);<br><br>    <span class="hljs-comment">// We need to watch the process state, so let it sleep deeply.</span><br>    sleep(<span class="hljs-number">1000</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="进程的内存映像"><a href="#进程的内存映像" class="headerlink" title="进程的内存映像"></a>进程的内存映像</h3>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web协议详解与抓包实战课程笔记</title>
    <link href="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="使用-ABNF-操作符来描述HTTP请求头"><a href="#使用-ABNF-操作符来描述HTTP请求头" class="headerlink" title="使用 ABNF 操作符来描述HTTP请求头"></a>使用 ABNF 操作符来描述HTTP请求头</h3><ul><li><p>空白字符：用来分隔定义中的各个元素</p><ul><li>method SP request-target SP HTTP-version CRLF·</li></ul></li><li><p><code>/</code> 表示选择</p><ul><li>start-line &#x3D; request-line&#x2F;status-line</li></ul></li><li><p>值范围 <code>%c##-##</code></p><ul><li>OCTAL &#x3D; “0” &#x2F; “1”  &#x2F;  “2” &#x2F;  “3” ..</li></ul></li><li><p>序列组合 <code>()</code>，视为单个元素</p></li><li><p>不定量重复</p><ul><li><code>*</code> 元素表示零个或者是多个 <code>*(header-filed CRLF)</code></li><li><code>1*</code> 表示一个或者更多的元素， <code>2*4</code> 表示两个到四个</li></ul></li><li><p>可选序列 <code>[]</code><br>  -<code>[message-body]</code></p></li></ul><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/ABNF-1.png" alt="image-20231127140324023"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/ABNF-2.png" alt="image-20231127140349248"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">telnet www.taohui.pub 80<br></code></pre></td></tr></table></figure><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/ABNF-3.png"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/unknown-1.png" alt="image-20231127143131761"></p><h3 id="评估web框架的关键属性"><a href="#评估web框架的关键属性" class="headerlink" title="评估web框架的关键属性"></a>评估web框架的关键属性</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127152402241.png" alt="image-20231127152402241"></p><ul><li><p>性能</p><p>  <img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127152634445.png" alt="image-20231127152634445"></p></li><li><p>可修改性</p><p>  <img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127152833129.png" alt="image-20231127152833129"></p></li></ul><h3 id="08-没听懂"><a href="#08-没听懂" class="headerlink" title="08 没听懂"></a>08 没听懂</h3><h3 id="09如何用network的面板分析HTTP报文"><a href="#09如何用network的面板分析HTTP报文" class="headerlink" title="09如何用network的面板分析HTTP报文"></a>09如何用network的面板分析HTTP报文</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127155402081.png" alt="image-20231127155402081"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127155738463.png" alt="image-20231127155738463"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127160449754.png" alt="image-20231127160449754"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127160923168.png" alt="image-20231127160923168"></p><h3 id="10URI的基本格式以及与RUL的区别"><a href="#10URI的基本格式以及与RUL的区别" class="headerlink" title="10URI的基本格式以及与RUL的区别"></a>10URI的基本格式以及与RUL的区别</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127162122395.png" alt="image-20231127162122395"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127162948143.png" alt="image-20231127162948143"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127163254389.png" alt="image-20231127163254389"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127163342328.png" alt=" "></p><h3 id="11-为什么要进行URI编码"><a href="#11-为什么要进行URI编码" class="headerlink" title="11 为什么要进行URI编码"></a>11 为什么要进行URI编码</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127172843274.png" alt="image-20231127172843274"></p><p>如何进行转换</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127173236014.png" alt="image-20231127173236014"></p><h3 id="12-详解-HTTP的请求行"><a href="#12-详解-HTTP的请求行" class="headerlink" title="12 详解 HTTP的请求行"></a>12 详解 HTTP的请求行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET / HTTP/1.1<br></code></pre></td></tr></table></figure><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127174454540.png" alt="image-20231127174454540"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127174513620.png" alt="image-20231127174513620"></p><p>常见的方法</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127174712658.png" alt="image-20231127174712658"></p><h4 id="什么是幂等"><a href="#什么是幂等" class="headerlink" title="什么是幂等"></a>什么是幂等</h4><p>具体来说，一个幂等操作满足以下条件：</p><ol><li><strong>相同输入产生相同结果：</strong> 无论执行多少次，给定相同的输入，操作的结果都是相同的。</li><li><strong>不会引起副作用：</strong> 操作的执行不会对系统的状态产生额外的影响。即使多次执行，系统的状态也保持一致。</li></ol><p>OPTION的作用，显示服务器对访问的资源支持的方法</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">curl <span class="hljs-keyword">static</span>.taohui.tech -X <span class="hljs-keyword">OPTIONS</span> -I<br></code></pre></td></tr></table></figure><h3 id="13-HTTP中的正确响应码"><a href="#13-HTTP中的正确响应码" class="headerlink" title="13 HTTP中的正确响应码"></a>13 HTTP中的正确响应码</h3><p>1XX表示请求已经被服务器正确接受到了，但需要进一步的处理才能完成</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127181156232.png" alt="image-20231127181156232"></p><p>2XX表示成功处理</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127181457413.png" alt="image-20231127181457413"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127181920435.png" alt="image-20231127181920435"></p><p>3XX表示重定向</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127182216611.png" alt="image-20231127182216611"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127182350634.png" alt="image-20231127182350634"></p><h3 id="14-HTTP的错误响应码"><a href="#14-HTTP的错误响应码" class="headerlink" title="14 HTTP的错误响应码"></a>14 HTTP的错误响应码</h3><p>4XX 表示客户端的错误</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127182916151.png" alt="image-20231127182916151"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl www.sina.com.cn -X TRACE -I<br></code></pre></td></tr></table></figure><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127183123388.png" alt="image-20231127183123388"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127183240109.png" alt="image-20231127183240109"></p><p> <img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127183421496.png" alt="image-20231127183421496"></p><p>5XX表示服务端出现错误</p><p>  <img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127183638071.png" alt="image-20231127183638071"></p><p>并发连接的限制 503</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127183820882.png" alt="image-20231127183820882"></p><p>注意： 若客户端接收到一个再RFC中不存的状态码，会返回一个该状态码的最大整百数,如 接收到<code>277</code>,返回<code>200</code></p><h3 id="15如何管理跨域代理服务器的长短连接"><a href="#15如何管理跨域代理服务器的长短连接" class="headerlink" title="15如何管理跨域代理服务器的长短连接"></a>15如何管理跨域代理服务器的长短连接</h3><p>使用 <code>Connection</code> 来表示长短连接的请求和响应，HTTP&#x2F;1.1 默认支持 长连接；若需要关闭长连接，使用 <code>Connection: close</code> </p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127185123310.png" alt="image-20231127185123310"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127185134825.png" alt="image-20231127185134825"></p><p>为了防止 过老版本的服务器不认识 <code>connection</code>字段，我们在连接代理服务器时，使用 <code>proxy-connectio</code> 来代替 <code>connction</code> 字段</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231127190017883.png" alt="image-20231127190017883"></p><h3 id="16HTTP消息在服务端的路由"><a href="#16HTTP消息在服务端的路由" class="headerlink" title="16HTTP消息在服务端的路由"></a>16HTTP消息在服务端的路由</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128081723777.png" alt="image-20231128081723777"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128082109951.png" alt="image-20231128082109951"></p><p>建立TCP连接</p><p>接受请求</p><p>寻找虚拟节点</p><p>寻找URI的处理代码</p><p>处理URI的处理代码</p><p>生成HTTP响应</p><p>发送HTTP响应</p><p>记录日志</p><h3 id="17代理服务器转发消息时的相关头部"><a href="#17代理服务器转发消息时的相关头部" class="headerlink" title="17代理服务器转发消息时的相关头部"></a>17代理服务器转发消息时的相关头部</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128083315310.png" alt="image-20231128083315310"></p><h4 id="正向代理和反向代理的区别"><a href="#正向代理和反向代理的区别" class="headerlink" title="正向代理和反向代理的区别"></a>正向代理和反向代理的区别</h4><ul><li>正向代理（Forward Proxy）：</li></ul><ol><li><strong>作用：</strong> 正向代理作为客户端的代理，代表客户端向服务器发起请求。客户端向正向代理发送请求，然后由正向代理将请求转发给目标服务器，最后将响应返回给客户端。客户端对目标服务器是透明的，目标服务器不知道请求的真正发起者是客户端。</li><li><strong>用途：</strong><ul><li><strong>访问控制：</strong> 正向代理可以用于实现访问控制，限制客户端对特定资源的访问。</li><li><strong>安全性：</strong> 可以用于隐藏客户端的真实IP地址，提高安全性。</li><li><strong>翻墙：</strong> 用户可以通过正向代理访问被封锁的内容，从而实现翻墙。</li></ul></li><li><strong>部署：</strong> 正向代理通常部署在客户端和目标服务器之间。</li></ol><ul><li>反向代理（Reverse Proxy）：</li></ul><ol><li><strong>作用：</strong> 反向代理作为服务器的代理，代表服务器向客户端提供服务。客户端向反向代理发送请求，然后由反向代理将请求转发给后端的真实服务器，最后将后端服务器的响应返回给客户端。客户端对后端服务器是透明的，后端服务器不知道请求的真正发起者是客户端。</li><li><strong>用途：</strong><ul><li><strong>负载均衡：</strong> 反向代理可以分发客户端的请求到多个后端服务器，实现负载均衡，提高性能和可用性。</li><li><strong>安全性：</strong> 可以用于隐藏后端服务器的真实IP地址，提高安全性。</li><li><strong>SSL 加速：</strong> 可以用于解密客户端发来的加密请求，将请求以明文形式转发给后端服务器，从而减轻后端服务器的负担。</li></ul></li><li><strong>部署：</strong> 反向代理通常部署在客户端和后端服务器之间。</li></ol><p>总体而言，正向代理和反向代理的主要区别在于代理的对象和作用方向。正向代理代表客户端发起请求，而反向代理代表服务器提供服务。它们在网络架构、安全性、性能优化等方面有不同的应用场景。</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128083413862.png" alt="image-20231128083413862"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128083813300.png" alt="image-20231128083813300"></p><h3 id="18请求与响应的上下文"><a href="#18请求与响应的上下文" class="headerlink" title="18请求与响应的上下文"></a>18请求与响应的上下文</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128085638018.png" alt="image-20231128085638018"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128085750173.png" alt="image-20231128085750173"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128085850807.png" alt="image-20231128085850807"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128085949904.png" alt="image-20231128085949904"></p><h3 id="19内容协商与资源表述"><a href="#19内容协商与资源表述" class="headerlink" title="19内容协商与资源表述"></a>19内容协商与资源表述</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128090221955.png" alt="image-20231128090221955"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128090323337.png" alt="image-20231128090323337"></p><p>主动式内容协商</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128090639414.png" alt="image-20231128090639414"></p><p>响应式内容协商</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128090730329.png" alt="image-20231128090730329"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128091341804.png" alt="image-20231128091341804"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128091441809.png" alt="image-20231128091441809"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128091610167.png" alt="image-20231128091610167"></p><h3 id="20HTTP包体的传输方式"><a href="#20HTTP包体的传输方式" class="headerlink" title="20HTTP包体的传输方式"></a>20HTTP包体的传输方式</h3><h4 id="定长包体"><a href="#定长包体" class="headerlink" title="定长包体"></a>定长包体</h4><p>HTTP的包体格式</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128093043300.png" alt="image-20231128093043300"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128093815465.png" alt="image-20231128093815465"></p><h4 id="不定长包体"><a href="#不定长包体" class="headerlink" title="不定长包体"></a>不定长包体</h4><p>没看懂</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128103753892.png" alt="image-20231128103753892"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Transfer-Encoding: chunked<br></code></pre></td></tr></table></figure><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128104752249.png" alt="image-20231128104752249"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128104811283.png" alt="image-20231128104811283"></p><p>MIME multipurpose Internet Mail Extensions</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128104928961.png" alt="image-20231128104928961"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128105238855.png" alt="image-20231128105238855"></p><h3 id="22HTML-form表单"><a href="#22HTML-form表单" class="headerlink" title="22HTML form表单"></a>22HTML form表单</h3><p>HTML中的表单元素</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128131655118.png" alt="image-20231128131655118"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128131918681.png" alt="image-20231128131918681"></p><p>multpart 的使用</p><h3 id="23断点续传与多线程下载时如何做到的？"><a href="#23断点续传与多线程下载时如何做到的？" class="headerlink" title="23断点续传与多线程下载时如何做到的？"></a>23断点续传与多线程下载时如何做到的？</h3><ol><li>客户端明确任务:从何处开始下载？<ul><li>本地是否已有部分文件？<ul><li>其中已有的部分文件是否被修改过？</li></ul></li><li>使用几个线程并发下载？</li></ul></li><li>下载文件的指定部分内容</li><li>下载完毕后拼装成统一的文件</li></ol><h4 id="使用range来获取文件的部分数据"><a href="#使用range来获取文件的部分数据" class="headerlink" title="使用range来获取文件的部分数据"></a>使用range来获取文件的部分数据</h4><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128112608337.png" alt="image-20231128112608337"></p><h4 id="range的请求范围"><a href="#range的请求范围" class="headerlink" title="range的请求范围"></a>range的请求范围</h4><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128112729575.png" alt="image-20231128112729575"></p><h4 id="range的条件请求"><a href="#range的条件请求" class="headerlink" title="range的条件请求"></a>range的条件请求</h4><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128113126596.png" alt="image-20231128113126596"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl protocol.taohui.tech/app/letter.txt -H `range: bytes=0-5` -H `if-Match: <span class="hljs-string">&quot;5cc78979-1b&quot;</span>` <br></code></pre></td></tr></table></figure><p>请求此资源的 <code>0-5</code> Bytes，并带上 <code>etag</code></p><h4 id="服务器的响应"><a href="#服务器的响应" class="headerlink" title="服务器的响应"></a>服务器的响应</h4><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128114522610.png" alt="image-20231128114522610"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128114656013.png" alt="image-20231128114656013"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128115049469.png" alt="image-20231128115049469"></p><h3 id="24Cookie的格式与约束"><a href="#24Cookie的格式与约束" class="headerlink" title="24Cookie的格式与约束"></a>24Cookie的格式与约束</h3><p>cookie <code>HTTP State Management Mechanism</code></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128143522856.png" alt="image-20231128143522856"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128144006093.png" alt=" "></p><p>set-ccokie 的属性</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128144414291.png" alt="image-20231128144414291"></p><p>cookie的问题</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128144614369.png" alt="image-20231128144614369"></p><h3 id="25session的工作原理以及第三方cookie的原理"><a href="#25session的工作原理以及第三方cookie的原理" class="headerlink" title="25session的工作原理以及第三方cookie的原理"></a>25session的工作原理以及第三方cookie的原理</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128160642287.png" alt="image-20231128160642287"></p><p>现在不是有JWT嘛，为什么还要使用 session，session不得需要服务端保存用户的数据嘛？</p><ul><li><p>Session 和 JSON Web Token (JWT) 都是在Web开发中用于管理用户状态和身份验证的工具</p><ul><li><h3 id="Session："><a href="#Session：" class="headerlink" title="Session："></a>Session：</h3><ol><li><strong>服务器端存储：</strong> Session 数据通常存储在服务器端。服务器为每个会话分配一个唯一的标识符（通常是通过 cookie 发送到客户端），而实际的数据则存储在服务器上。</li><li><strong>状态管理：</strong> Session 适用于需要在服务器端保持状态的情况，例如用户登录状态、购物车内容等。服务器可以灵活管理会话的生命周期和存储方式。</li><li><strong>简单性：</strong> Session 在某些情况下可能更容易实现和管理，特别是对于简单的 Web 应用程序。</li></ol></li><li><h3 id="JWT："><a href="#JWT：" class="headerlink" title="JWT："></a>JWT：</h3><ol><li><strong>无状态：</strong> JWT 是一种无状态的认证机制，信息被包装在令牌中，并由客户端负责存储。服务器无需在其端存储有关令牌的信息，因此可以更容易地进行水平扩展。</li><li><strong>跨域：</strong> JWT 适用于分布式系统和跨域通信，因为令牌本身包含了身份验证和授权信息。客户端在每个请求中携带令牌，而服务器只需验证令牌的签名而无需查询状态。</li><li><strong>可扩展性：</strong> JWT 可以包含任意 JSON 格式的信息，因此具有良好的可扩展性。令牌可以包含有关用户、角色、权限等的信息。</li><li><strong>前后端分离：</strong> JWT 适用于前后端分离的应用程序，因为前端可以存储并发送令牌，而后端只需验证令牌的有效性。</li></ol></li></ul></li><li><p>为什么还要使用 Session：</p></li></ul><p>尽管JWT在许多场景中非常有用，但Session仍然具有一些优势：</p><ol><li><strong>生命周期控制：</strong> Session 允许服务器更精细地控制会话的生命周期，可以在用户不活动一段时间后自动过期。</li><li><strong>撤销和管理：</strong> Session 使得撤销用户的访问权限更加容易，因为可以在服务器端集中管理会话状态。</li><li><strong>传输敏感数据：</strong> 有些情况下，特别是在涉及敏感数据传输的情况下，使用服务器端存储的 Session 数据可能更安全。</li><li><strong>适用于某些 Web 框架：</strong> 某些Web框架可能更适合使用Session，而不是JWT。</li></ol><h3 id="26浏览器同源策略"><a href="#26浏览器同源策略" class="headerlink" title="26浏览器同源策略"></a>26浏览器同源策略</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129083841286.png" alt="image-20231129083841286"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129084902875.png" alt="image-20231129084902875"></p><p>CSRF <code>Cross-Site Request Fogery</code> 跨域请求伪造</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129085240579.png" alt="image-20231129085240579"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129085507454.png" alt="image-20231129085507454"></p><h3 id="27-通过CORS实现跨域访问"><a href="#27-通过CORS实现跨域访问" class="headerlink" title="27 通过CORS实现跨域访问"></a>27 通过CORS实现跨域访问</h3><p>CORS <code>cross-origin resource sharing</code> </p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129090450875.png" alt="image-20231129090450875"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129091514805.png" alt="image-20231129091514805"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129091746588.png" alt="image-20231129091746588"></p><h3 id="30缓存新鲜度的四种计算方式"><a href="#30缓存新鲜度的四种计算方式" class="headerlink" title="30缓存新鲜度的四种计算方式"></a>30缓存新鲜度的四种计算方式</h3><h3 id="35网络爬虫的工作原理"><a href="#35网络爬虫的工作原理" class="headerlink" title="35网络爬虫的工作原理"></a>35网络爬虫的工作原理</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128094915269.png" alt="image-20231128094915269"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128095031015.png" alt="image-20231128095031015"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231128101213608.png" alt="image-20231128101213608"></p><h3 id="wireShark的使用"><a href="#wireShark的使用" class="headerlink" title="wireShark的使用"></a>wireShark的使用</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129102827785.png" alt="image-20231129102827785"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129104528133.png" alt="image-20231129104528133"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129104535899.png" alt="image-20231129104535899"></p><h4 id="捕获过滤器"><a href="#捕获过滤器" class="headerlink" title="捕获过滤器"></a>捕获过滤器</h4><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129112631320.png" alt="image-20231129112631320"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129133149534.png" alt="image-20231129133149534"></p><p>限定词</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129133209213.png" alt="image-20231129133209213"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129133224348.png" alt="image-20231129133224348"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129133254890.png" alt="image-20231129133254890"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129133348787.png" alt="image-20231129133348787"></p><h4 id="显示过滤器"><a href="#显示过滤器" class="headerlink" title="显示过滤器"></a>显示过滤器</h4><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129134157877.png" alt="image-20231129134157877"></p><p> <img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129134350628.png" alt="image-20231129134350628"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129134420593.png" alt="image-20231129134420593"></p><p>切片操作，但与go中的 slice有所区别</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129134550006.png" alt="image-20231129134550006"></p><p> 可用函数</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231129134622541.png" alt="image-20231129134622541"></p><p>可以看看显示过滤器</p><h3 id="41webSocket"><a href="#41webSocket" class="headerlink" title="41webSocket"></a>41webSocket</h3><p> websocket 用于服务端主动推送资源，实现双向通信</p><p>websocket具有良好的兼容性</p><p>支持扩展</p><p>WebSocket 在需要实现实时、低延迟、双向通信的场景中都可以发挥作用。由于它建立在单个持久的 TCP 连接上，相较于传统的轮询技术，WebSocket 可以减少通信开销，提高效率。</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/blog\myhexo\source_posts\web协议详解与抓包实战课程笔记\image-20231202102433545.png" alt="image-20231202102433545"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/blog\myhexo\source_posts\web协议详解与抓包实战课程笔记\image-20231202104805686.png" alt="image-20231202104805686"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/blog\myhexo\source_posts\web协议详解与抓包实战课程笔记\image-20231202110129615.png" alt="image-20231202110129615"></p><h3 id="70TLS的工作原理"><a href="#70TLS的工作原理" class="headerlink" title="70TLS的工作原理"></a>70TLS的工作原理</h3><p>TLS的设计目的</p><ul><li>身份验证</li><li>数据保密</li><li>完整性约束</li></ul><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/blog\myhexo\source_posts\web协议详解与抓包实战课程笔记\image-20231130150134251.png" alt="image-20231130150134251"></p><h3 id="71对称加密的工作原理"><a href="#71对称加密的工作原理" class="headerlink" title="71对称加密的工作原理"></a>71对称加密的工作原理</h3><p>加密过程</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130100134006.png" alt="image-20231130100134006"></p><p>XOR 异或运算，XOR的速度非常快，只需要便利一次即可</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130100327770.png" alt="image-20231130100327770"></p><p>明文不一定和密钥的长度一致，这时就需要进行分组加密</p><p>其次，若最后一个分组的block不够长时，这时需要进行填充</p><p>填充方法</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130100621046.png" alt="image-20231130100621046"></p><p> 上面是直接将明文分解为多个块，对每个快独立加密，但这存在一个问题: 无法隐藏数据的特征</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130104311863.png" alt="image-20231130104311863"></p><p>每一个明文块和前一个密文块进行亦或后，再进行加密</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130104907895.png" alt="image-20231130104907895"></p><p>实现串行化</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130103630336.png" alt="image-20231130103630336"></p><p>实现消息完整性的校验</p><ul><li><p>sender</p><ul><li>使用hash对源msg1进行处理得到mac1</li><li>使用CTR对数据进行加密</li></ul></li><li><p>receiver</p><ul><li>使用CTR对加密数据进行解密，得到msg2</li><li>使用hash对解密msg2进行处理得到mac2</li><li>对比mac1和mac2</li><li>若相等，则消息为完整的，可以使用msg2</li></ul></li></ul><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130105409189.png" alt="image-20231130105409189"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/blog\myhexo\source_posts\web协议详解与抓包实战课程笔记\image-20231130150504144.png" alt="image-20231130150504144"></p><h3 id="73AES对称加密算法"><a href="#73AES对称加密算法" class="headerlink" title="73AES对称加密算法"></a>73AES对称加密算法</h3><p>AES Advanced Encruption Standard </p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130111347305.png" alt="image-20231130111347305"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130111751753.png" alt="image-20231130111751753"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130112401456.png" alt="image-20231130112401456"></p><h3 id="74非对称加密-RSA"><a href="#74非对称加密-RSA" class="headerlink" title="74非对称加密 RSA"></a>74非对称加密 RSA</h3><p>如何将对称加密的密钥传递给双方？ 可以使用非对称加密来实现</p><p>RSA算法中的公钥私钥的产生</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130113512891.png" alt="image-20231130113512891"></p><p>即使 泄露了 公钥，即 <code>(k,n)</code> 若想推导 私钥中的<code>d</code>，则需要推导 <code>n</code>，而<code>n</code>是一个非常大的数字，对一个非常大的数字进行因式分解很难，这也就是为什么难以推导私钥的原因。</p><p>非对称加密和解密的过程</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/image-20231130114022510.png" alt="image-20231130114022510"></p><p>使用私钥进行加密，后用公钥进行解密，相当于私钥对明文进行了<code>数字签名</code></p><h3 id="76基于openssl验证RSA算法"><a href="#76基于openssl验证RSA算法" class="headerlink" title="76基于openssl验证RSA算法"></a>76基于openssl验证RSA算法</h3><h3 id="77PKI证书体系"><a href="#77PKI证书体系" class="headerlink" title="77PKI证书体系"></a>77PKI证书体系</h3><ul><li><p>基于私钥进行加密，只能使用公钥进行解密，起到身份验证的作用</p></li><li><p>公钥的管理 public key infrastructure 公钥基础设施</p><ul><li>由CA数字证书机构将用户个人身份与公开密钥关联在一起</li><li>公钥数字证书组成<ul><li>CA的信息、公钥用户的信息、公钥、权威机构的签名、有效期</li></ul></li><li>PKI用户<ul><li>向CA注册公钥的用户</li><li>希望使用已注册公钥的用户</li></ul></li></ul></li></ul><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/blog\myhexo\source_posts\web协议详解与抓包实战课程笔记\image-20231130143619054.png" alt="image-20231130143619054"></p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/blog\myhexo\source_posts\web协议详解与抓包实战课程笔记\image-20231130144434061.png" alt="image-20231130144434061"></p><p>证书类型</p><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/blog\myhexo\source_posts\web协议详解与抓包实战课程笔记\image-20231130144330888.png" alt="image-20231130144330888"></p><h3 id="77DH密钥交换协议"><a href="#77DH密钥交换协议" class="headerlink" title="77DH密钥交换协议"></a>77DH密钥交换协议</h3><p><img src="/2023/11/27/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/blog\myhexo\source_posts\web协议详解与抓包实战课程笔记\image-20231130145353116.png" alt="image-20231130145353116"></p><p>RSA密钥交换存在问题:若私钥一旦泄露，之前所有的通信内容都可以被解密</p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>web</tag>
      
      <tag>协议</tag>
      
      <tag>抓包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL总结</title>
    <link href="/2023/11/26/MySQL%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/26/MySQL%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​</p><p><img src="/2023/11/26/MySQL%E6%80%BB%E7%BB%93/image-20231126095209387.png" alt=""></p><p>​</p><h3 id="MySQL-执行一条查询语句的流程"><a href="#MySQL-执行一条查询语句的流程" class="headerlink" title="MySQL 执行一条查询语句的流程"></a>MySQL 执行一条查询语句的流程</h3><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/mysql%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B.png"></p><ul><li><p>客户端与服务端连接建立</p><ul><li>建立连接</li><li>管理连接</li><li>校验用户身份</li></ul></li><li><p>Serve层</p><ul><li><p>查询缓存</p><ul><li>查询语句如果命中查询缓存则直接返回，否则继续往下执行。MySQL 8.0 已删除该模块；</li></ul></li><li><p>进行词法分析</p></li><li><p>进行语法分析</p></li><li><p>执行SQL</p><ul><li>prepare 预处理<ul><li>检查 SQL 查询语句中的表或者字段是否存在；</li><li>将 <code>select *</code> 中的 <code>*</code> 符号，扩展为表上的所有列；</li></ul></li><li>optimize 优化<ul><li><strong>优化器主要负责将 SQL 查询语句的执行方案确定下来</strong>，比如在表里面有多个索引的时候，优化器会基于查询成本的考虑，来决定选择使用哪个索引。</li></ul></li></ul><p>  可以使用 <code>explain</code> 来解释 查询语句的执行过程</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li>execute 执行<ul><li>主键索引查询</li><li>全表扫描</li><li>索引下推</li></ul></li></ul></li></ul></li></ul><h3 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h3><p>数据库范式有 3 种：</p><ul><li>1NF(第一范式)：属性不可再分。</li><li>2NF(第二范式)：1NF 的基础之上，消除了非主属性对于码的部分函数依赖。</li><li>3NF(第三范式)：3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。</li></ul><hr><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>MySQL 中有多种数据类型，每种类型用于存储不同类型的数据。以下是一些常见的 MySQL 数据类型：</p><ol><li><strong>整数类型（Integer Types）:</strong><ul><li><code>TINYINT</code>: 1 字节，范围为 -128 到 127 或 0 到 255。</li><li><code>SMALLINT</code>: 2 字节，范围为 -32,768 到 32,767 或 0 到 65,535。</li><li><code>MEDIUMINT</code>: 3 字节，范围为 -8,388,608 到 8,388,607 或 0 到 16,777,215。</li><li><code>INT</code> 或 <code>INTEGER</code>: 4 字节，范围为 -2^31 到 2^31-1 或 0 到 2^32-1。</li><li><code>BIGINT</code>: 8 字节，范围为 -2^63 到 2^63-1 或 0 到 2^64-1。</li></ul></li><li><strong>浮点数类型（Floating-Point Types）:</strong><ul><li><code>FLOAT</code>: 单精度浮点数，4 字节。</li><li><code>DOUBLE</code> 或 <code>REAL</code>: 双精度浮点数，8 字节。</li></ul></li><li><strong>定点数类型（Fixed-Point Types）:</strong><ul><li><code>DECIMAL</code> 或 <code>NUMERIC</code>: 存储固定精度的小数，通常用于货币。</li></ul></li><li><strong>字符串类型（String Types）:</strong><ul><li><code>CHAR</code>: 固定长度字符串。</li><li><code>VARCHAR</code>: 变长字符串。</li><li><code>TEXT</code>: 较大的文本字段。</li><li><code>BINARY</code>: 固定长度二进制字符串。</li><li><code>VARBINARY</code>: 变长二进制字符串。</li><li><code>BLOB</code>: 较大的二进制对象。</li></ul></li><li><strong>日期和时间类型（Date and Time Types）:</strong><ul><li><code>DATE</code>: 日期，格式为 ‘YYYY-MM-DD’。</li><li><code>TIME</code>: 时间，格式为 ‘HH:MM:SS’。</li><li><code>DATETIME</code>: 日期和时间，格式为 ‘YYYY-MM-DD HH:MM:SS’。</li><li><code>TIMESTAMP</code>: 时间戳，与 <code>DATETIME</code> 类似，但受时区影响。</li><li><code>YEAR</code>: 年份，以四位数表示。</li></ul></li><li><strong>枚举和集合类型（Enum and Set Types）:</strong><ul><li><code>ENUM</code>: 用于存储枚举类型的值。</li><li><code>SET</code>: 用于存储多个枚举类型的值。</li></ul></li><li><strong>其他类型:</strong><ul><li><code>BOOLEAN</code> 或 <code>BOOL</code>: 布尔类型，MySQL 中通常用 TINYINT(1) 实现。</li><li><code>JSON</code>: 存储 JSON 数据。</li></ul></li></ol><h3 id="NULL-和-‘’-的区别是什么？"><a href="#NULL-和-‘’-的区别是什么？" class="headerlink" title="NULL 和 ‘’ 的区别是什么？"></a>NULL 和 ‘’ 的区别是什么？</h3><p><code>NULL</code> 跟 <code>&#39;&#39;</code>(空字符串)是两个完全不一样的值，区别如下：</p><ul><li><code>NULL</code> 代表一个不确定的值,就算是两个 <code>NULL</code>,它俩也不一定相等。例如，<code>SELECT NULL=NULL</code>的结果为 false，但是在我们使用<code>DISTINCT</code>,<code>GROUP BY</code>,<code>ORDER BY</code>时,<code>NULL</code>又被认为是相等的。</li><li><code>&#39;&#39;</code>的长度是 0，是不占用空间的，而<code>NULL</code> 是需要占用空间的。</li><li><code>NULL</code> 会影响聚合函数的结果。例如，<code>SUM</code>、<code>AVG</code>、<code>MIN</code>、<code>MAX</code> 等聚合函数会忽略 <code>NULL</code> 值。 <code>COUNT</code> 的处理方式取决于参数的类型。如果参数是 <code>*</code>(<code>COUNT(*)</code>)，则会统计所有的记录数，包括 <code>NULL</code> 值；如果参数是某个字段名(<code>COUNT(列名)</code>)，则会忽略 <code>NULL</code> 值，只统计非空值的个数。</li><li>查询 <code>NULL</code> 值时，必须使用 <code>IS NULL</code> 或 <code>IS NOT NULLl</code> 来判断，而不能使用 &#x3D;、!&#x3D;、 &lt;、&gt; 之类的比较运算符。而<code>&#39;&#39;</code>是可以使用这些比较运算符的。</li></ul><hr><p>著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：<a href="https://javaguide.cn/database/mysql/mysql-questions-01.html">https://javaguide.cn/database/mysql/mysql-questions-01.html</a></p><h3 id="drop、delete、truncate的区别"><a href="#drop、delete、truncate的区别" class="headerlink" title="drop、delete、truncate的区别"></a>drop、delete、truncate的区别</h3><ul><li><strong>drop</strong>(丢弃数据) ：<code>drop table table_name</code> 直接将表删除</li><li><strong>truncate</strong>（清空数据）： <code>truncate table table_name</code> 只删除表中的数据，但表的结构不发生变化。插入数据从第一行开始，自增id从1开始</li><li><strong>delete</strong>（删除数据）：<code>delete from tanble_name where coloum=xxx</code>删除行数据，如果不加where条件和truncate 作用类似，但id是从之前最大的开始增长</li></ul><h3 id="数据库设计通常分为哪几步"><a href="#数据库设计通常分为哪几步" class="headerlink" title="数据库设计通常分为哪几步?"></a>数据库设计通常分为哪几步?</h3><ol><li><strong>需求分析</strong> : 分析用户的需求，包括数据、功能和性能需求。</li><li><strong>概念结构设计</strong> : 主要采用 E-R 模型进行设计，包括画 E-R 图。</li><li><strong>逻辑结构设计</strong> : 通过将 E-R 图转换成表，实现从 E-R 模型到关系模型的转换。</li><li><strong>物理结构设计</strong> : 主要是为所设计的数据库选择合适的存储结构和存取路径。</li><li><strong>数据库实施</strong> : 包括编程、测试和试运行</li><li><strong>数据库的运行和维护</strong> : 系统的运行与数据库的日常维护。</li></ol><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><ul><li>atomicity 原子性  用undoLog (回滚)实现</li></ul><p>一个事务中的所有操作，要么全部完成，要么全都不完成，不回结束在中间某个状态。</p><ul><li>consistency 一致性 用 原子性+隔离性+持久性 实现</li></ul><p>是指事务操作前后，数据满足完整性约束，数据库保持一致性。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。</p><ul><li>isolation 隔离性 用MVCC （多版本并发控制）实现</li></ul><p>数据库允许多个并发事务同时对同一行数据进行读写，隔离性可以防止多个事务并发执行时由于交叉执行的数据不一致。</p><ul><li>durability 持久性 用redoLog（重做）实现</li></ul><p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p><h4 id="并发事务会引发什么问题"><a href="#并发事务会引发什么问题" class="headerlink" title="并发事务会引发什么问题"></a>并发事务会引发什么问题</h4><h5 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h5><p><strong>如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。</strong></p><h5 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h5><p><strong>在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。</strong></p><h5 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h5><p><strong>在一个事务中，由于其他事务的插入或删除操作，导致同一个查询在事务执行期间返回不同的行数</strong>；虽然可重复读可以保证同一事物内数据的一致性，但不能阻止其他满足要求事务对数据表进行插入和删除操作。要解决这个问题，可以使用更高级别的隔离级别，如串行化（Serializable），但这可能会导致性能下降。在实际应用中，需要权衡事务的隔离级别和性能需求，选择合适的隔离级别。此外，一些数据库系统还提供了特定的机制，如行级锁或MVCC（多版本并发控制），以减轻幻读的影响。</p><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：</p><ul><li>读未提交</li></ul><p>☞ 事务未提交，它的变更其他事务能看到</p><ul><li>读提交</li></ul><p>☞ 事务提交后，它的变更其他事务<strong>才</strong>能看到</p><ul><li>可重复读</li></ul><p> ☞ 事务执行过程中看到的数据和这个事务一开始是一致的 ，这也是MySQL InnoDB引擎的默认隔离级别</p><ul><li>串行化</li></ul><p>☞ 对记录加上读写锁，多个事务对这条记录进行读写操作时，如果发送了冲突，后访问的事务必须等待前一个事务执行完成，阻塞，才能继续执行</p><p><img src="https://cdn.xiaolincoding.com//mysql/other/4e98ea2e60923b969790898565b4d643.png"></p><h4 id="undoLog"><a href="#undoLog" class="headerlink" title="undoLog"></a>undoLog</h4><ul><li>是 Innodb 存储引擎层生成的日志，实现了事务中的<strong>原子性</strong>，主要<strong>用于事务回滚和 MVCC</strong>。</li></ul><p>每当 InnoDB 引擎对一条记录进行操作（修改、删除、新增）时，要把回滚时需要的信息都记录到 undo log 里，比如：</p><ul><li>在<strong>插入</strong>一条记录时，要把这条记录的主键值记下来，这样之后回滚时只需要把这个主键值对应的记录<strong>删掉</strong>就好了；</li><li>在<strong>删除</strong>一条记录时，要把这条记录中的内容都记下来，这样之后回滚时再把由这些内容组成的记录<strong>插入</strong>到表中就好了；</li><li>在<strong>更新</strong>一条记录时，要把被更新的列的旧值记下来，这样之后回滚时再把这些列<strong>更新为旧值</strong>就好了。</li></ul><ol><li><p><strong><code>undo log</code> 记录的格式：</strong></p> <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">sqlCopy code<span class="hljs-code">+------------------+</span>----------------------<span class="hljs-code">+-------------+</span>----------------<span class="hljs-code">+--------+</span><br><span class="hljs-section">| Transaction ID  | Transaction Pointer  | Table Space | Page Number    | Offset |</span><br><span class="hljs-section">+------------------+----------------------+-------------+----------------+--------+</span><br><span class="hljs-section">| 1234            | 0x00000123456789AB   | 5           | 123            | 45     |</span><br><span class="hljs-section">+------------------+----------------------+-------------+----------------+--------+</span><br></code></pre></td></tr></table></figure><ul><li><strong>Transaction ID（事务标识）：</strong> 标识执行修改的事务的唯一标识符。</li><li><strong>Transaction Pointer（事务指针）：</strong> 指向 <code>undo log</code> 页面的指针。</li><li><strong>Table Space（表空间）：</strong> 表示 <code>undo log</code> 所属的表空间。</li><li><strong>Page Number（页面编号）：</strong> 指向 <code>undo log</code> 存储位置的页码。</li><li><strong>Offset（偏移量）：</strong> 在指定页内的偏移位置。</li></ul></li><li><p><strong>示例的含义：</strong></p><ul><li>上述示例表示一个 <code>undo log</code> 记录，属于事务ID为 <code>1234</code> 的事务，存储在表空间 <code>5</code> 的页号 <code>123</code> 的偏移 <code>45</code> 处。</li><li>这个记录中可能包含了被该事务修改的一些数据，以便在需要时可以撤销或回滚这些修改。</li></ul></li></ol><h4 id="redoLog"><a href="#redoLog" class="headerlink" title="redoLog"></a>redoLog</h4><ul><li>redoLog 是Innodb引擎特有的日志，实现了事务的<strong>持久性</strong>，主要用于断电后的故障修复</li><li>redoLog 是物理日志，记录的是 <code>在某个数据页上做了什么修改</code> </li><li>redo log是循环写的，空间固定会用完</li></ul><p><del>GPT的说明</del></p><p>假设我们有一个包含两列的数据库表，表名为 <code>example_table</code>，结构如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">diffCopy code<span class="hljs-code">+----+</span>--------+<br><span class="hljs-section">| ID | Value  |</span><br><span class="hljs-section">+----+--------+</span><br>| 1  | A      |<br><span class="hljs-section">| 2  | B      |</span><br><span class="hljs-section">+----+--------+</span><br></code></pre></td></tr></table></figure><p>现在，我们执行一个事务，将 <code>Value</code> 列中 <code>ID</code> 为 1 的行的值从 “A” 修改为 “C”。这个操作将在 Redo Log 中被记录下来。以下是一个简化的表示，实际的 Redo Log 包含了更多的元信息和细节：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mathematicaCopy code|<span class="hljs-string"> Operation  </span>|<span class="hljs-string"> Table        </span>|<span class="hljs-string"> Column  </span>|<span class="hljs-string"> Row ID </span>|<span class="hljs-string"> Old Value </span>|<span class="hljs-string"> New Value </span>|<br>|<span class="hljs-string">------------</span>|<span class="hljs-string">--------------</span>|<span class="hljs-string">---------</span>|<span class="hljs-string">--------</span>|<span class="hljs-string">-----------</span>|<span class="hljs-string">-----------</span>|<br>|<span class="hljs-string"> UPDATE     </span>|<span class="hljs-string"> example_table </span>|<span class="hljs-string"> Value   </span>|<span class="hljs-string"> 1      </span>|<span class="hljs-string"> A         </span>|<span class="hljs-string"> C         </span>|<br></code></pre></td></tr></table></figure><p>在这个示例中：</p><ul><li><strong>Operation（操作）：</strong> 表示执行的操作类型，这里是一个更新操作（UPDATE）。</li><li><strong>Table（表）：</strong> 表示操作涉及的表，这里是 <code>example_table</code>。</li><li><strong>Column（列）：</strong> 表示操作涉及的列，这里是 <code>Value</code>。</li><li><strong>Row ID（行ID）：</strong> 表示操作涉及的行的唯一标识，这里是 <code>1</code>。</li><li><strong>Old Value（旧值）：</strong> 表示更新前的值，这里是 “A”。</li><li><strong>New Value（新值）：</strong> 表示更新后的值，这里是 “C”</li></ul><p>​</p><h4 id="binlLog"><a href="#binlLog" class="headerlink" title="binlLog"></a>binlLog</h4><ul><li>Server特有的日志，binLog实现了数据的备份和主从复制</li><li>binLog记录的是 逻辑日志，记录的是这个语句的原始逻辑</li><li>binlog是可以追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ul><p>Binlog有两种模式，statement 格式的话是记sql语句， row格式会记录行的内容，记两条，更新前和更新后都有。</p><p><del>GPT的解释</del></p><p>以下是一个简单的 Binlog 记录的示例，假设我们执行了一个插入操作：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">sqlCopy code<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> example_table (ID, <span class="hljs-keyword">Value</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;D&#x27;</span>);<br></code></pre></td></tr></table></figure><p>对应的 Binlog 记录可能类似于：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">sqlCopy code|<span class="hljs-string"> Event Type </span>|<span class="hljs-string"> SQL Statement                                   </span>|<br>|<span class="hljs-string">------------</span>|<span class="hljs-string">-------------------------------------------------</span>|<br>|<span class="hljs-string"> INSERT     </span>|<span class="hljs-string"> INSERT INTO example_table (ID, Value) VALUES (3, &#x27;D&#x27;) </span>|<br></code></pre></td></tr></table></figure><p>在这个示例中：</p><ul><li><strong>Event Type（事件类型）：</strong> 表示执行的操作类型，这里是一个插入操作（INSERT）。</li><li><strong>SQL Statement（SQL 语句）：</strong> 表示实际执行的 SQL 语句。</li></ul><p>与 Redo Log 不同，Binlog 记录的是逻辑层面的数据库更改。这使得 Binlog 具有以下特点：</p><ol><li><strong>跨数据库平台可用：</strong> Binlog 记录的是 SQL 语句，因此它可以更轻松地在不同的数据库平台之间迁移和复制数据。</li><li><strong>易读性：</strong> Binlog 记录可以相对容易地阅读，因为它记录的是实际执行的 SQL 语句，而不是物理层面的更改。</li><li><strong>灵活性：</strong> Binlog 记录的是逻辑操作，可以更好地支持对数据库的灵活操作，例如数据定义语言（DDL）操作。</li></ol><p>在 MySQL 中，Binlog 主要用于以下方面：</p><ul><li><strong>主从复制：</strong> Binlog 用于将数据从一个 MySQL 服务器复制到另一个，以实现主从复制的功能。</li><li><strong>数据恢复：</strong> Binlog 记录允许在发生故障时从备份中进行恢复，以最小化数据丢失。</li><li><strong>数据审计：</strong> Binlog 记录的 SQL 语句可以用于审计数据库的更改历史。</li></ul><h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><p>**multi-veriosn concurency control  **</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="索引的模式"><a href="#索引的模式" class="headerlink" title="索引的模式"></a>索引的模式</h4><ul><li><p>哈希表</p></li><li><p>有序表</p></li><li><p>搜索树</p></li></ul><p> B+ 树</p><p><img src="https://static001.geekbang.org/resource/image/dc/8d/dcda101051f28502bd5c4402b292e38d.png" alt="img"></p><p>从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。</p><p>主键索引的叶子节点存的是整行数据。在InnoDB里，主键索引也被称为聚簇索引（clustered index）。</p><p>非主键索引的叶子节点内容是主键的值。在InnoDB里，非主键索引也被称为二级索引（secondary index）。</p><ul><li>如果语句是select * from T where ID&#x3D;500，即主键查询方式，则只需要搜索ID这棵B+树；</li><li>如果语句是select * from T where k&#x3D;5，即普通索引查询方式，则需要先搜索k索引树，得到ID的值为500，再到ID索引树搜索一次。这个过程称为<strong>回表</strong>。</li></ul><h4 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h4><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E7%B4%A2%E5%BC%95/%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95.drawio.png" alt="联合索引"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在表创建时添加索引</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (<br>    id <span class="hljs-type">INT</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),<br>    department <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),<br>    INDEX idx_department (department)<br>);<br><br><span class="hljs-comment">-- 在已存在的表上添加唯一索引</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX idx_unique_name <span class="hljs-keyword">ON</span> employees (name);<br><span class="hljs-comment">-- 前缀索引</span><br><span class="hljs-keyword">CREATE</span> INDEX index_name <span class="hljs-keyword">ON</span> table_name (column_name(length));<br><span class="hljs-comment">-- 联合索引</span><br><span class="hljs-keyword">CREATE</span> INDEX index_product_no_name <span class="hljs-keyword">ON</span> product(product_no, name);<br></code></pre></td></tr></table></figure><h4 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h4><p>覆盖索引是指 SQL 中 query 的所有字段，在索引 B+Tree 的叶子节点上都能找得到的那些索引，从二级索引中查询得到记录，而不需要通过聚簇索引查询获得，可以避免回表的操作。</p><h4 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h4><p>使用联合索引时，存在<strong>最左匹配原则</strong>，也就是按照最左优先的方式进行索引的匹配。在使用联合索引进行查询的时候，如果不遵循「最左匹配原则」，联合索引会失效，这样就无法利用到索引快速查询的特性了。</p><p>比如，如果创建了一个 <code>(a, b, c)</code> 联合索引，如果查询条件是以下这几种，就可以匹配上联合索引：</p><ul><li>where a&#x3D;1；</li><li>where a&#x3D;1 and b&#x3D;2 and c&#x3D;3；</li><li>where a&#x3D;1 and b&#x3D;2；</li></ul><p><strong>需要注意的是，因为有查询优化器，所以 a 字段在 where 子句的顺序并不重要</strong></p><p>但是，如果查询条件是以下这几种，因为不符合最左匹配原则，所以就无法匹配上联合索引，联合索引就会失效:</p><ul><li>where b&#x3D;2；</li><li>where c&#x3D;3；</li><li>where b&#x3D;2 and c&#x3D;3；</li></ul><p>上面这些查询条件之所以会失效，是因为<code>(a, b, c)</code> 联合索引，是先按 a 排序，在 a 相同的情况再按 b 排序，在 b 相同的情况再按 c 排序。所以，<strong>b 和 c 是全局无序，局部相对有序的</strong>，这样在没有遵循最左匹配原则的情况下，是无法利用到索引的。</p><h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><p>对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表的次数</p><h4 id="什么时候需要-不需要索引"><a href="#什么时候需要-不需要索引" class="headerlink" title="什么时候需要&#x2F;不需要索引"></a>什么时候需要&#x2F;不需要索引</h4><p>索引是数据集合的目录</p><p>索引的最大好处是提高查询的速度，但索引也是有缺点的，比如：</p><ul><li>需要占用物理空间，数量越大，占用空间越大</li><li>创建索引和维护索引选哟耗费时间，这种时间随数据量的增大而增大</li><li>会影响数据表的增删改，因为每次增删改都需要维护B+ 树的有序性，这需要动态的维护</li></ul><h5 id="适合索引的场景"><a href="#适合索引的场景" class="headerlink" title="适合索引的场景"></a>适合索引的场景</h5><ul><li>字段唯一</li><li>经常用于 <code>where</code> 查询条件的字段</li><li>经常用于<code>group by</code> <code>order by</code> 的字段，这样查询的时候就可以直接利用 B+ tree 内部字段的有序性的特点</li></ul><h5 id="不适合实用索引的场景"><a href="#不适合实用索引的场景" class="headerlink" title="不适合实用索引的场景"></a>不适合实用索引的场景</h5><ul><li>使用不到  <code>where</code> <code>order by</code> <code>group by</code> 的场景</li><li>字段中存在大量的重复</li><li>数据量不够的场景，没必要去，费空间</li><li>经常用于更新的字段 ，比如不要对电商项目的用户余额建立索引，因为索引字段频繁修改，由于要维护 B+Tree的有序性，那么就需要频繁的重建索引，这个过程是会影响数据库性能的。</li></ul><h4 id="什么时候发生索引失效"><a href="#什么时候发生索引失效" class="headerlink" title="什么时候发生索引失效"></a>什么时候发生索引失效</h4><ul><li>当我们使用左或者左右模糊匹配的时候，也就是 <code>like %xx</code> 或者 <code>like %xx%</code>这两种方式都会造成索引失效；</li><li>当我们在查询条件中对索引列做了计算、函数、类型转换操作，这些情况下都会造成索引失效；</li><li>联合索引要能正确使用需要遵循最左匹配原则，也就是按照最左优先的方式进行索引的匹配，否则就会导致索引失效。</li><li>在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。</li></ul><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E6%80%BB%E7%BB%93.drawio.png" alt="img"></p><h4 id="mysql为什么有时候会选错索引"><a href="#mysql为什么有时候会选错索引" class="headerlink" title="mysql为什么有时候会选错索引"></a>mysql为什么有时候会选错索引</h4><p>优化器选择索引的目的，是找到一个最优的执行方案，并用最小的代价去执行语句。在数据库里面，扫描行数是影响执行代价的因素之一。扫描的行数越少，意味着访问磁盘数据的次数越少，消耗的CPU资源越少。</p><p>当然，扫描行数并不是唯一的判断标准，优化器还会结合是否使用临时表、是否排序等因素进行综合判断。</p><img src="https://static001.geekbang.org/resource/image/16/d4/16dbf8124ad529fec0066950446079d4.png" style="zoom: 200%;"><p>那么，<strong>MySQL是怎样得到索引的基数的呢？</strong>这里，我给你简单介绍一下MySQL采样统计的方法。</p><p>为什么要采样统计呢？因为把整张表取出来一行行统计，虽然可以得到精确的结果，但是代价太高了，所以只能选择“采样统计”。</p><p>采样统计的时候，InnoDB默认会选择N个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。</p><p>而数据表是会持续更新的，索引统计信息也不会固定不变。所以，当变更的数据行数超过1&#x2F;M的时候，会自动触发重新做一次索引统计。</p><p>在MySQL中，有两种存储索引统计的方式，可以通过设置参数innodb_stats_persistent的值来选择：</p><ul><li>设置为on的时候，表示统计信息会持久化存储。这时，默认的N是20，M是10。</li><li>设置为off的时候，表示统计信息只存储在内存中。这时，默认的N是8，M是16。</li></ul><p>由于是采样统计，所以不管N是20还是8，这个基数都是很容易不准的。</p><h4 id="字符串如何添加索引"><a href="#字符串如何添加索引" class="headerlink" title="字符串如何添加索引"></a>字符串如何添加索引</h4><ol><li>直接创建完整索引，这样可能比较占用空间；</li><li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引；</li><li>倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题；</li><li>创建hash字段索引，查询性能稳定，有额外的存储和计算消耗，跟第三种方式一样，都不支持范围扫描</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>八股</tag>
      
      <tag>mysql</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux指令收集</title>
    <link href="/2023/11/20/linux%E6%8C%87%E4%BB%A4%E6%94%B6%E9%9B%86/"/>
    <url>/2023/11/20/linux%E6%8C%87%E4%BB%A4%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><strong>好记性，不如烂笔头</strong></p><p>解压文件 </p><ul><li><code>-x</code> 表示 Extract </li><li><code>-z</code> 表示 Filter the archive through gzip</li><li><code>f</code>  表示 Use archive file.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xzf fileName<br></code></pre></td></tr></table></figure><p>在 <code>make</code> 命令中，<code>-C</code> 用于指定进入指定目录执行 make 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -C usr/src/redis <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker总结</title>
    <link href="/2023/11/20/docker%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/20/docker%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h2><p><strong>Docker</strong> 使用 <code>Google</code> 公司推出的 <a href="https://golang.google.cn/">Go 语言</a> 进行开发实现，基于 <code>Linux</code> 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces">namespace</a>，以及 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/">OverlayFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 <a href="https://linuxcontainers.org/lxc/introduction/">LXC</a>，从 <code>0.7</code> 版本以后开始去除 <code>LXC</code>，转而使用自行开发的 <a href="https://github.com/docker/libcontainer">libcontainer</a>，从 <code>1.11</code> 版本开始，则进一步演进为使用 <a href="https://github.com/opencontainers/runc">runC</a> 和 <a href="https://github.com/containerd/containerd">containerd</a>。</p><p>cgroup用来资源管控</p><ul><li>linux  Namespace 是linux kernel 提供的资源隔离方案<ul><li>系统可以为进程提供不同的Namespace</li><li>保证不同的Namespace资源独立分配、进程彼此隔离</li></ul></li></ul><p>隔离性：</p><ul><li>pid namespace <ul><li>不同的用户进程通过pid namespace 隔离开，且不同的namespace可以有相同的pid</li><li>有了pid namespace，每个namespace中的pid都能相互隔离</li></ul></li><li>net namespace<ul><li>网络隔离是通过net namespace 实现的，每个net namespace 有独立的 network address、IP address、routing tables、&#x2F;proc&#x2F;net 目录</li><li>Docker 默认使用 veth的·1方式将container 中的虚拟网卡同host上的一个dockers bridge: docker() 连接在一起</li></ul></li><li>ipc namespace <ul><li>container中的进程交互还是采用linux中常见的 进程交互方式（interprocess communication -IPC）。包括常见的信号量、消息队列和共享内存</li><li>container的进程间交互实际上还是host上具有相同Pid namespace 中的进程交互，因此需要在IPC资源申请时加入namespace 的信息 - 每个IPC子啊云有一个唯一的32位 ID</li></ul></li></ul><p>容器镜像本身是一个tar包 </p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>镜像 image</li></ul><p><strong>Docker 镜像</strong> 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 <strong>不包含</strong> 任何动态数据，其内容在构建之后也不会被改变。</p><p>镜像构建时，会一层一层的构建，前一层是后一层的基础。</p><ul><li>容器 container</li></ul><p>镜像（<code>image</code>）和容器（<code>container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的本质是进程，但与直接在宿主执行的进程不同，容器进程运行在属于自己的独立命名空间中。</p><p>因此，容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间、甚至自己的用户ID空间。</p><h2 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>从docker中获取镜像的命令是 <code>docker pull</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]<br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull ubuntu:18.04<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it ubuntu:18.04 bash<br></code></pre></td></tr></table></figure><ul><li><code>it</code> ：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 <code>bash</code> 执行一些命令并查看返回结果，因此我们需要交互式终端。</li></ul><p>退出</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><h3 id="列举镜像"><a href="#列举镜像" class="headerlink" title="列举镜像"></a>列举镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker image <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker image <span class="hljs-built_in">rm</span> [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...] (ID 或者是镜像名)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker image <span class="hljs-built_in">ls</span><br>REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE<br>centos                      latest              0584b3d2cf6d        3 weeks ago         196.5 MB<br>redis                       alpine              501ad78535f0        3 weeks ago         21.03 MB<br>docker                      latest              cf693ec9b5c7        3 weeks ago         105.1 MB<br>nginx                       latest              e43d811ce2f4        5 weeks ago         181.5 MB<br></code></pre></td></tr></table></figure><p>我们可以使用长 <code>ID</code> 来删除，但也可也使用短 <code>ID</code> 来删除，一般来说只需要输入前三位即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker image <span class="hljs-built_in">rm</span> 501<br>Untagged: redis:alpine<br>Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d<br>Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7<br>Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b<br>Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23<br>Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa<br>Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3<br>Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name bb -d busybox<br></code></pre></td></tr></table></figure><h3 id="使用dockerfile-定制镜像"><a href="#使用dockerfile-定制镜像" class="headerlink" title="使用dockerfile 定制镜像"></a>使用dockerfile 定制镜像</h3><ul><li>使用 FROM 指定基础镜像</li></ul><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。</p><p>在 <a href="https://hub.docker.com/search?q=&type=image&image_filter=official">Docker Hub</a> 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 <a href="https://hub.docker.com/_/nginx/"><code>nginx</code></a>、<a href="https://hub.docker.com/_/redis/"><code>redis</code></a>、<a href="https://hub.docker.com/_/mongo/"><code>mongo</code></a>、<a href="https://hub.docker.com/_/mysql/"><code>mysql</code></a>、<a href="https://hub.docker.com/_/httpd/"><code>httpd</code></a>、<a href="https://hub.docker.com/_/php/"><code>php</code></a>、<a href="https://hub.docker.com/_/tomcat/"><code>tomcat</code></a> 等。如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 <a href="https://hub.docker.com/_/ubuntu/"><code>ubuntu</code></a>、<a href="https://hub.docker.com/_/debian/"><code>debian</code></a>、<a href="https://hub.docker.com/_/centos/"><code>centos</code></a>、<a href="https://hub.docker.com/_/fedora/"><code>fedora</code></a>、<a href="https://hub.docker.com/_/alpine/"><code>alpine</code></a> 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 <code>scratch</code>。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM scratch<br></code></pre></td></tr></table></figure><ul><li>使用RUN 执行命令</li></ul><p>RUN指令在定制镜像是是最常用的指令之一，其格式有两种</p><ol><li><p>shell格式，<code>RUN &lt;命令&gt;</code> ，其中的命令就像在命令行中输入的命令一样</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;h1&gt;hello,Docker!&lt;h1&gt;&#x27;</span> &gt; a.log<br></code></pre></td></tr></table></figure></li><li><p>exec格式，<code>RUN [&quot;可执行文件&quot;,&quot;arg-1&quot;,&quot;arg-2&quot;]</code>，这会比较像函数调用的格式</p></li></ol><p>注意： Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。所以，要注意RUN的使用，写的时候尽量写一行，之间用 <code>&amp;&amp;</code> 连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM debian:stretch<br><br>RUN <span class="hljs-built_in">set</span> -x; buildDeps=<span class="hljs-string">&#x27;gcc libc6-dev make wget&#x27;</span> \<br>    &amp;&amp; apt-get update \<br>    &amp;&amp; apt-get install -y <span class="hljs-variable">$buildDeps</span> \<br>    &amp;&amp; wget -O redis.tar.gz <span class="hljs-string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> \<br>    &amp;&amp; <span class="hljs-built_in">mkdir</span> -p /usr/src/redis \<br>    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \<br>    &amp;&amp; make -C /usr/src/redis \<br>    &amp;&amp; make -C /usr/src/redis install \<br>    &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/* \<br>    &amp;&amp; <span class="hljs-built_in">rm</span> redis.tar.gz \<br>    &amp;&amp; <span class="hljs-built_in">rm</span> -r /usr/src/redis \<br>    &amp;&amp; apt-get purge -y --auto-remove <span class="hljs-variable">$buildDeps</span><br></code></pre></td></tr></table></figure><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build [选项] &lt;上下文路径/URL/-&gt;<br></code></pre></td></tr></table></figure><p>在Dockerfile 执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"> $ docker build -t nginx:v3 .<br>Sending build context to Docker daemon 2.048 kB<br>Step 1 : FROM nginx<br> ---&gt; e43d811ce2f4<br>Step 2 : RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html<br> ---&gt; Running <span class="hljs-keyword">in</span> 9cdc27646c7b<br> ---&gt; 44aa4490ce2c<br>Removing intermediate container 9cdc27646c7b<br>Successfully built 44aa4490ce2c<br></code></pre></td></tr></table></figure><p>其中的 <code>.</code> 表示当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">COPY ./package.json /app/<br></code></pre></td></tr></table></figure><p>这表示 复制上下文目录下的 <code>package.json</code> </p><p>实际上 <code>Dockerfile</code> 的文件名并不要求必须为 <code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为 <code>Dockerfile</code>。</p><h4 id="add-copy"><a href="#add-copy" class="headerlink" title="add | copy"></a>add | copy</h4><p>copy 用于将上下文目录中的源文件&#x2F;目录复制到新一层的镜像的目标位置中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">COPY [--<span class="hljs-built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">COPY --<span class="hljs-built_in">chown</span>=55:mygroup files* /mydir/<br>COPY --<span class="hljs-built_in">chown</span>=bin files* /mydir/<br>COPY --<span class="hljs-built_in">chown</span>=1 files* /mydir/<br>COPY --<span class="hljs-built_in">chown</span>=10:11 files* /mydir/<br></code></pre></td></tr></table></figure><p><code>ADD</code> 可以自动解压缩 压缩文件，压缩的格式为 gzip，bzip2以及XZ。ADD指令会自动解压缩这个压缩文件到目标目录中 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM scratch<br>ADD buntu-xenial-core-cloudimg-amd64-root.tar.gz /<br></code></pre></td></tr></table></figure><p>在 Docker 官方的 <a href>Dockerfile 最佳实践文档</a> 中要求，尽可能的使用 <code>COPY</code>，因为 <code>COPY</code> 的语义很明确，就是复制文件而已，而 <code>ADD</code> 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 <code>ADD</code> 的场合，就是所提及的需要自动解压缩的场合。</p><p>建议：</p><ul><li>单纯的复制场景，使用 COPY</li><li>需要自动解压缩的场景，使用 ADD</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ADD --<span class="hljs-built_in">chown</span>=55:mygroup files* /mydir/<br>ADD --<span class="hljs-built_in">chown</span>=bin files* /mydir/<br>ADD --<span class="hljs-built_in">chown</span>=1 files* /mydir/<br>ADD --<span class="hljs-built_in">chown</span>=10:11 files* /mydir/<br></code></pre></td></tr></table></figure><h4 id="其他docker-build的用法"><a href="#其他docker-build的用法" class="headerlink" title="其他docker build的用法"></a>其他docker build的用法</h4><h5 id="直接使用git-rep"><a href="#直接使用git-rep" class="headerlink" title="直接使用git rep"></a>直接使用git rep</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># $env:DOCKER_BUILDKIT=0</span><br><span class="hljs-comment"># export DOCKER_BUILDKIT=0</span><br><br>docker build -t hello-world https://github.com/docker-library/hello-world.git<span class="hljs-comment">#master:amd64/hello-world</span><br>....<br></code></pre></td></tr></table></figure><h5 id="使用指定的压缩包"><a href="#使用指定的压缩包" class="headerlink" title="使用指定的压缩包"></a>使用指定的压缩包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build http://server/context.tar.gz<br></code></pre></td></tr></table></figure><p>Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。</p><h5 id="从标准输入中读取-Dockerfile-压缩包-进行构建"><a href="#从标准输入中读取-Dockerfile-压缩包-进行构建" class="headerlink" title="从标准输入中读取 Dockerfile | 压缩包 进行构建"></a>从标准输入中读取 Dockerfile | 压缩包 进行构建</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> Dockerfile | docker build -<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build - &lt; context.tar.gz<br></code></pre></td></tr></table></figure><h4 id="CMD容器启动"><a href="#CMD容器启动" class="headerlink" title="CMD容器启动"></a>CMD容器启动</h4><p>之前有介绍过，docker不是虚拟机，容器就是进程，既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。<code>CMD</code>指令就是用于指定默认的容器主进程启动的命令</p><p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p><ul><li><code>shell</code> 格式：&#96;CMD &lt;命令&gt;&#96;&#96;</li><li>&#96;&#96;exec<code> 格式：</code>CMD [“可执行文件”, “参数1”, “参数2”…]<code> 参数列表格式：</code>CMD [“参数1”, “参数2”…]<code>。在指定了 </code>ENTRYPOINT<code>指令后，用</code>CMD&#96; 指定具体的参数。</li></ul><p><strong>错误的写法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CMD service nginx start<br></code></pre></td></tr></table></figure><p>然后发现容器执行后就立即退出了。甚至在容器内去使用 <code>systemctl</code> 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。</p><p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p><p>而使用 <code>service nginx start</code> 命令，则是希望 upstart 来以后台守护进程形式启动 <code>nginx</code> 服务。而刚才说了 <code>CMD service nginx start</code> 会被理解为 <code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]</code>，因此主进程实际上是 <code>sh</code>。那么当 <code>service nginx start</code> 命令结束后，<code>sh</code> 也就结束了，<code>sh</code> 作为主进程退出了，自然就会令容器退出。</p><p>正确的做法是直接执行 <code>nginx</code> 可执行文件，并且要求以前台形式运行。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CMD [<span class="hljs-string">&quot;nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h4><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p><p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;ENTRYPOINT&gt; <span class="hljs-string">&quot;&lt;CMD&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>场景一：让镜像变成像变量的命令一样使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM ubuntu:18.04<br>RUN apt-get update \<br>    &amp;&amp; apt-get install -y curl \<br>    &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*<br>ENTRYPOINT [ <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-s&quot;</span>, <span class="hljs-string">&quot;http://myip.ipip.net&quot;</span> ]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -t myip<br><br>docker run myip -i 等价于 docker run myip curl -s <span class="hljs-string">&quot;http://myip.ipip.net&quot;</span> -i<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run myip -i<br>HTTP/1.1 200 OK<br>Connection: close<br>Content-Length: 68<br>Accept-Ranges: bytes<br>Content-Type: text/plain; charset=utf-8<br>Date: Mon, 20 Nov 2023 13:57:24 GMT<br>Server: WAF<br>X-Cache: BYPASS<br>X-Request-Id: 3c3017cc86f1ca3499256cb036918c3b<br><br>当前 IP：59.46.213.219  来自于：中国 辽宁 大连  电信<br><br></code></pre></td></tr></table></figure><h4 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h4><p>格式有两种：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ENV VERSION=1.0<br><br>ENV TYPE String<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">RUN <span class="hljs-built_in">set</span> -x;ehco <span class="hljs-variable">$&#123;TYPE&#125;</span>&amp;&amp; ehco<span class="hljs-variable">$&#123;VERSION&#125;</span><br></code></pre></td></tr></table></figure><h4 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h4><p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p><p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p><p>灵活的使用 <code>ARG</code> 指令，能够在不修改 Dockerfile 的情况下，构建出不同的镜像。</p><p>ARG 指令有生效范围，如果在 <code>FROM</code> 指令之前指定，那么只能用于 <code>FROM</code> 指令中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">ARG DOCKER_USERNAME=library<br><br>FROM <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine<br><br><span class="hljs-comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span><br>ARG DOCKER_USERNAME=library<br><br>RUN <span class="hljs-built_in">set</span> -x ; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span><br><br>FROM <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine<br><br><span class="hljs-comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span><br>ARG DOCKER_USERNAME=library<br><br>RUN <span class="hljs-built_in">set</span> -x ; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;DOCKER_USERNAME&#125;</span><br></code></pre></td></tr></table></figure><h4 id="VOLUME-设置匿名卷"><a href="#VOLUME-设置匿名卷" class="headerlink" title="VOLUME 设置匿名卷"></a>VOLUME 设置匿名卷</h4><h4 id="EXPOSE暴露端口"><a href="#EXPOSE暴露端口" class="headerlink" title="EXPOSE暴露端口"></a>EXPOSE暴露端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">EXPOSE &lt;hostPort&gt;:&lt;containerPort&gt;<br></code></pre></td></tr></table></figure><p><code>expose</code>用来声明容器运行时提供服务的端口，<strong>这只是一个声明</strong>，在容器运行时，不会因为这个声明而去开启这个端口的服务。</p><p>用处</p><ul><li>便于镜像的使用者理解这个服务镜像的守护端口号是什么</li><li>使用 <code>docker run -p</code> 时，会自动随机映射<code>EXPOSE</code>的端口号</li></ul><h4 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">WORKDIR /a<br>WORKDIR b<br>WORKDIR c<br><br>RUN <span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p><code>/a/b/c</code></p><h4 id="HEALTHCHECK健康检查"><a href="#HEALTHCHECK健康检查" class="headerlink" title="HEALTHCHECK健康检查"></a>HEALTHCHECK健康检查</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM  nginx<br>RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*<br>HEALTHCHECK --interval=5s --<span class="hljs-built_in">timeout</span>=3s CMD curl -fs http://localhost/ || <span class="hljs-built_in">exit</span> 1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t healthcheck:1 .<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name web -p 80:80 -d  healthcheck:1 <br></code></pre></td></tr></table></figure><h4 id="ONBUILD-为他人作嫁衣裳"><a href="#ONBUILD-为他人作嫁衣裳" class="headerlink" title="ONBUILD 为他人作嫁衣裳"></a>ONBUILD 为他人作嫁衣裳</h4><p>构建基础镜像的时候，这<code>ONBUILD</code>三行并不会被执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM node:slim<br>RUN <span class="hljs-built_in">mkdir</span> /app<br>WORKDIR /app<br>ONBUILD COPY ./package.json /app<br>ONBUILD RUN [ <span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;install&quot;</span> ]<br>ONBUILD COPY . /app/<br>CMD [ <span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;start&quot;</span> ]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t my-node .<br></code></pre></td></tr></table></figure><p>前基础镜像的那三行 <code>ONBUILD</code> 会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 <code>npm install</code>，生成应用镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM my-node<br></code></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="set-eux"><a href="#set-eux" class="headerlink" title="set -eux"></a>set -eux</h5><p><code>RUN set -eux;</code> 是一种在 Dockerfile 中常见的用法，用于设置一些 shell 的行为，尤其是在构建过程中执行的命令。让我们逐步解释这个命令：</p><ul><li><p><code>set -e</code>：这个部分的含义是设置 shell 的执行模式为 “exit immediately if a simple command exits with a non-zero status”，也就是说，如果任何一个命令返回非零状态，那么整个构建过程就会立即失败，终止构建流程。这对于构建过程的可靠性和调试是很有用的，因为它能够确保任何构建阶段的错误都会导致构建过程终止。</p></li><li><p><code>set -u</code>：这个部分启用了 shell 的 “uninitialized variable check” 模式。如果你尝试使用未定义的变量，shell 会立即退出并报告错误。这可以帮助捕获一些潜在的编程错误，确保你的脚本中没有使用未赋值的变量。</p></li><li><p><code>set -x</code>：这个部分启用了 shell 的 “verbose mode”，也就是在执行每个命令之前，将该命令及其参数打印到标准错误输出。这对于调试和了解构建过程中究竟执行了哪些命令是非常有用的。</p></li></ul><p>将这三个选项结合在一起，<code>set -eux</code> 提供了一种强大的工具，能够使得构建过程更加健壮，并且在构建过程中发生错误时提供详细的信息以便于调试。当构建过程中的某个步骤失败时，容器构建过程会立即停止，并且输出的信息会显示详细的执行步骤，有助于快速定位问题。</p><p>整个命令的样式通常是在 Dockerfile 中的 <code>RUN</code> 指令的开始处使用，以确保在构建过程中的每个命令都遵循这些行为设置。</p><h3 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h3><h4 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h4><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UnionFS，可以提供很多有用的特性：</p><p>- </p><pre><code class="hljs">`数据卷` 可以在容器之间共享和重用</code></pre><p>- </p><pre><code class="hljs">对 `数据卷` 的修改会立马生效</code></pre><p>- </p><pre><code class="hljs">对 `数据卷` 的更新，不会影响镜像</code></pre><p>- </p><pre><code class="hljs">`数据卷` 默认会一直存在，即使容器被删除</code></pre><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p></blockquote><ul><li>创建数据卷</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker volume create my-vol<br></code></pre></td></tr></table></figure><ul><li>查看数据卷</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker volume <span class="hljs-built_in">ls</span><br><br>DRIVER              VOLUME NAME<br><span class="hljs-built_in">local</span>               my-vol<br></code></pre></td></tr></table></figure><ul><li>查看卷的信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker volume inspect my-vol<br>[<br>    &#123;<br>        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>,<br>        <span class="hljs-string">&quot;Labels&quot;</span>: &#123;&#125;,<br>        <span class="hljs-string">&quot;Mountpoint&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/volumes/my-vol/_data&quot;</span>,<br>        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;my-vol&quot;</span>,<br>        <span class="hljs-string">&quot;Options&quot;</span>: &#123;&#125;,<br>        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;local&quot;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>启动一个挂载数据卷的容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker run -d -P \<br>    --name web \<br>    <span class="hljs-comment"># -v my-vol:/usr/share/nginx/html \</span><br>    --mount <span class="hljs-built_in">source</span>=my-vol,target=/usr/share/nginx/html \<br>    nginx:alpine<br></code></pre></td></tr></table></figure><ul><li>删除数据卷的信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker volume <span class="hljs-built_in">rm</span> my-vol<br></code></pre></td></tr></table></figure><p>无主的数据卷可能会占据很多空间，要清理请使用以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker volume prune<br></code></pre></td></tr></table></figure><h4 id="挂载主机目录"><a href="#挂载主机目录" class="headerlink" title="挂载主机目录"></a>挂载主机目录</h4><h5 id="挂载一个主机目录作为数据卷"><a href="#挂载一个主机目录作为数据卷" class="headerlink" title="挂载一个主机目录作为数据卷"></a>挂载一个主机目录作为数据卷</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name web --mount <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bind</span>,<span class="hljs-built_in">source</span>=D:\dockerVol,target=/usr/shared/nginx/html nginx:alpine<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect web<br></code></pre></td></tr></table></figure><p><img src="/2023/11/20/docker%E6%80%BB%E7%BB%93/blog\myhexo\source_posts\docker总结\docker-inspect-XX.png" alt="image-20231121104215352"> </p><h5 id="挂载一个主机文件作为数据卷"><a href="#挂载一个主机文件作为数据卷" class="headerlink" title="挂载一个主机文件作为数据卷"></a>挂载一个主机文件作为数据卷</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run  --<span class="hljs-built_in">rm</span> -it --mount <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bind</span>,<span class="hljs-built_in">source</span>=<span class="hljs-variable">$home</span>/.bash_history,target=/root/.bash_history ubuntu:18.04 bash<br></code></pre></td></tr></table></figure><h3 id="使用网络"><a href="#使用网络" class="headerlink" title="使用网络"></a>使用网络</h3><p><a href="https://www.cnblogs.com/zuxing/articles/8780661.html">Docker：网络模式详解 - Gringer - 博客园 (cnblogs.com)</a></p><h3 id="高级网络配置"><a href="#高级网络配置" class="headerlink" title="高级网络配置"></a>高级网络配置</h3>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch_Stack的学习</title>
    <link href="/2023/11/20/Elasticsearch-Stack%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/11/20/Elasticsearch-Stack%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="beat"><a href="#beat" class="headerlink" title="beat:"></a>beat:</h2><p><a href="https://blog.csdn.net/UbuntuTouch/article/details/104432643?ops_request_misc=%7B%22request_id%22:%22170043906016800227413791%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=170043906016800227413791&biz_id=0&spm=1018.2226.3001.4450">【精选】Beats：Beats 入门教程 （一）_libbeat-CSDN博客</a></p><p><a href="https://elkguide.elasticsearch.cn/logstash/get-start/daemon.html">长期运行 · ELKstack 中文指南 (elasticsearch.cn)</a></p><p><a href="https://github.com/aneasystone/weekly-practice/blob/main/notes/week015-elk-in-action/README.md">weekly-practice&#x2F;notes&#x2F;week015-elk-in-action&#x2F;README.md at main · aneasystone&#x2F;weekly-practice (github.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>ELK</tag>
      
      <tag>组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo中如何添加图片</title>
    <link href="/2023/11/20/hexo%E4%B8%AD%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/"/>
    <url>/2023/11/20/hexo%E4%B8%AD%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h2 id="一般来说有两种方法"><a href="#一般来说有两种方法" class="headerlink" title="一般来说有两种方法"></a>一般来说有两种方法</h2><ol><li>使用互联网中已存在URL的图片,即通过URL可以访问到的图片，这种情况只需要直接粘贴对应的URL即可</li><li>使用本地的图片，将图片上传到图床中，这里我们使用github作为图床</li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>下载对应的插件 </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install https://github.com/CodeFalling/hexo-asset-image --save<br></code></pre></td></tr></table></figure></li><li><p>查看<code>_config.yml</code>文件 查找 <code>post_asset_folder</code> 字段,将<code>post_asset_folder</code> 设置为 <code>true</code></p></li><li><p>此时，我们使用</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new newpage<br></code></pre></td></tr></table></figure><p> 创建一个新的文章，可以在其对应的目录下找到一个同名的文件夹，我们可以在这个文件夹中放入本地的图片</p></li><li><p>插入图片</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">!(图片对应的注释)[newpage/image.png]<br></code></pre></td></tr></table></figure></li></ol><p><img src="/2023/11/20/hexo%E4%B8%AD%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/2023-11-20-1.png" alt="image-20231120102455920"></p><p>完成！</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker-compose搭建elk集群</title>
    <link href="/2023/11/19/%E4%BD%BF%E7%94%A8docker-compose%E6%90%AD%E5%BB%BAelk%E9%9B%86%E7%BE%A4/"/>
    <url>/2023/11/19/%E4%BD%BF%E7%94%A8docker-compose%E6%90%AD%E5%BB%BAelk%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<p>docker-compose file and detailed tutorial </p><p><a href="https://github.com/deviantony/docker-elk/tree/main#setting-up-user-authentication">ELK dokcer-compose  deviantony&#x2F;docker-elk: The Elastic stack (ELK) powered by Docker and Compose. (github.com)</a></p><p><a href="https://www.elastic.co/cn/downloads/past-releases/filebeat-8-11-0">Filebeat 8.11.0 | Elastic download</a></p><p>这里推荐ES 的 CSDN 官方博客 </p><p><a href="https://elasticstack.blog.csdn.net/?type=blog">Elastic 中国社区官方博客_Elastic,Elasticsearch,Kibana-CSDN博客</a></p><p>ELK 的工作流程</p><ol><li>Logstash用于收集、处理、转换多种来源的各种类型的数据，其中包括日志文件、消息队列、数据库、网络流量等。</li><li>Elasticsearch  它用于进行索引和存储</li><li>Kibana提供了一个用户友好的界面，用于搜索、分析、<strong>可视化</strong>这些数据</li></ol><p>修改完配置文件后使用一下命令来检测是否有语法错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">filebeat.exe <span class="hljs-built_in">test</span> config<br>filebeat.exe <span class="hljs-built_in">test</span> output<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">filebeat.exe -e<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>elk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>etcd实现服务注册与发现</title>
    <link href="/2023/11/19/etcd%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <url>/2023/11/19/etcd%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是服务发现"><a href="#什么是服务发现" class="headerlink" title="什么是服务发现"></a>什么是服务发现</h1><p>服务发现是一种在分布式系统中识别和定位可用服务的机制。在微服务架构中，系统被分割成多个小型服务，服务发现允许这些服务相互发现和通信。而etcd这个工具提供了一种集中管理和协调服务的方式，从而提高了分布式系统的灵活性、可扩展性和可靠性。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50a6fc20d70d46be9794f7635dcb29c9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="服务注册与发现"></p><p>服务发现需要实现以下的基本功能</p><ul><li><strong>服务注册</strong>： 同一个service的所有节点注册到相同目录下，节点启动后，将自己的信息注册到所属的服务目录中</li><li><strong>健康检查</strong> ：服务节点定时进行健康检查，注册到服务目录中的信息设置一个较短的TTL，若连接失败，则节点不可用</li><li><strong>服务发现</strong>： 通过服务节点能查询到服务提供外部访问的 IP 和端口号。比如网关代理服务时能够及时的发现服务中新增节点、丢弃不可用的服务节点。</li></ul><h2 id="服务注册及健康检查"><a href="#服务注册及健康检查" class="headerlink" title="服务注册及健康检查"></a>服务注册及健康检查</h2><p>根据etcd的<code>v3 API</code>，当启动一个服务时候，我们把服务的地址写进etcd，注册服务。同时绑定租约（lease），并以续租约（keep leases alive）的方式检测服务是否正常运行，从而实现健康检查。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;go.etcd.io/etcd/clientv3&quot;</span><br>)<br><br><span class="hljs-comment">//ServiceRegister 创建租约注册服务</span><br><span class="hljs-keyword">type</span> ServiceRegister <span class="hljs-keyword">struct</span> &#123;<br>cli     *clientv3.Client <span class="hljs-comment">//etcd client</span><br>leaseID clientv3.LeaseID <span class="hljs-comment">//租约ID</span><br><span class="hljs-comment">//租约keepalieve相应chan</span><br>keepAliveChan &lt;-<span class="hljs-keyword">chan</span> *clientv3.LeaseKeepAliveResponse<br>key           <span class="hljs-type">string</span> <span class="hljs-comment">//key</span><br>val           <span class="hljs-type">string</span> <span class="hljs-comment">//value</span><br>&#125;<br><br><span class="hljs-comment">//NewServiceRegister 新建注册服务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServiceRegister</span><span class="hljs-params">(endpoints []<span class="hljs-type">string</span>, key, val <span class="hljs-type">string</span>, lease <span class="hljs-type">int64</span>)</span></span> (*ServiceRegister, <span class="hljs-type">error</span>) &#123;<br>cli, err := clientv3.New(clientv3.Config&#123;<br>Endpoints:   endpoints,<br>DialTimeout: <span class="hljs-number">5</span> * time.Second,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>ser := &amp;ServiceRegister&#123;<br>cli: cli,<br>key: key,<br>val: val,<br>&#125;<br><br><span class="hljs-comment">//申请租约设置时间keepalive</span><br><span class="hljs-keyword">if</span> err := ser.putKeyWithLease(lease); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br><span class="hljs-keyword">return</span> ser, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">//设置租约</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *ServiceRegister)</span></span> putKeyWithLease(lease <span class="hljs-type">int64</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">//设置租约时间</span><br>resp, err := s.cli.Grant(context.Background(), lease)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">//注册服务并绑定租约</span><br>_, err = s.cli.Put(context.Background(), s.key, s.val, clientv3.WithLease(resp.ID))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">//设置续租 定期发送需求请求</span><br>leaseRespChan, err := s.cli.KeepAlive(context.Background(), resp.ID)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>s.leaseID = resp.ID<br>log.Println(s.leaseID)<br>s.keepAliveChan = leaseRespChan<br>log.Printf(<span class="hljs-string">&quot;Put key:%s  val:%s  success!&quot;</span>, s.key, s.val)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">//ListenLeaseRespChan 监听 续租情况</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *ServiceRegister)</span></span> ListenLeaseRespChan() &#123;<br><span class="hljs-keyword">for</span> leaseKeepResp := <span class="hljs-keyword">range</span> s.keepAliveChan &#123;<br>log.Println(<span class="hljs-string">&quot;续约成功&quot;</span>, leaseKeepResp)<br>&#125;<br>log.Println(<span class="hljs-string">&quot;关闭续租&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// Close 注销服务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *ServiceRegister)</span></span> Close() <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">//撤销租约</span><br><span class="hljs-keyword">if</span> _, err := s.cli.Revoke(context.Background(), s.leaseID); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>log.Println(<span class="hljs-string">&quot;撤销租约&quot;</span>)<br><span class="hljs-keyword">return</span> s.cli.Close()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> endpoints = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;localhost:2379&quot;</span>&#125;<br>ser, err := NewServiceRegister(endpoints, <span class="hljs-string">&quot;/web/node1&quot;</span>, <span class="hljs-string">&quot;localhost:8000&quot;</span>, <span class="hljs-number">5</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br><span class="hljs-comment">//监听续租相应chan</span><br><span class="hljs-keyword">go</span> ser.ListenLeaseRespChan()<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-comment">// case &lt;-time.After(20 * time.Second):</span><br><span class="hljs-comment">// ser.Close()</span><br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><p>根据etcd的<code>v3 API</code>，很容易想到使用<code>Watch</code>监视某类服务，通过<code>Watch</code>感知服务的<code>添加</code>，<code>修改</code>或<code>删除</code>操作，修改服务列表。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;github.com/coreos/etcd/mvcc/mvccpb&quot;</span><br><span class="hljs-string">&quot;go.etcd.io/etcd/clientv3&quot;</span><br>)<br><br><span class="hljs-comment">// ServiceDiscovery 服务发现</span><br><span class="hljs-keyword">type</span> ServiceDiscovery <span class="hljs-keyword">struct</span> &#123;<br>cli        *clientv3.Client  <span class="hljs-comment">//etcd client</span><br>serverList <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span> <span class="hljs-comment">//服务列表</span><br>lock       sync.Mutex<br>&#125;a<br><br><span class="hljs-comment">// NewServiceDiscovery  新建发现服务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServiceDiscovery</span><span class="hljs-params">(endpoints []<span class="hljs-type">string</span>)</span></span> *ServiceDiscovery &#123;<br>cli, err := clientv3.New(clientv3.Config&#123;<br>Endpoints:   endpoints,<br>DialTimeout: <span class="hljs-number">5</span> * time.Second,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-keyword">return</span> &amp;ServiceDiscovery&#123;<br>cli:        cli,<br>serverList: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>),<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// WatchService 初始化服务列表和监视</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *ServiceDiscovery)</span></span> WatchService(prefix <span class="hljs-type">string</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">//根据前缀获取现有的key</span><br>resp, err := s.cli.Get(context.Background(), prefix, clientv3.WithPrefix())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-keyword">for</span> _, ev := <span class="hljs-keyword">range</span> resp.Kvs &#123;<br>s.SetServiceList(<span class="hljs-type">string</span>(ev.Key), <span class="hljs-type">string</span>(ev.Value))<br>&#125;<br><br><span class="hljs-comment">//监视前缀，修改变更的server</span><br><span class="hljs-keyword">go</span> s.watcher(prefix)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// watcher 监听前缀</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *ServiceDiscovery)</span></span> watcher(prefix <span class="hljs-type">string</span>) &#123;<br>rch := s.cli.Watch(context.Background(), prefix, clientv3.WithPrefix())<br>log.Printf(<span class="hljs-string">&quot;watching prefix:%s now...&quot;</span>, prefix)<br><span class="hljs-keyword">for</span> wresp := <span class="hljs-keyword">range</span> rch &#123;<br><span class="hljs-keyword">for</span> _, ev := <span class="hljs-keyword">range</span> wresp.Events &#123;<br><span class="hljs-keyword">switch</span> ev.Type &#123;<br><span class="hljs-keyword">case</span> mvccpb.PUT: <span class="hljs-comment">//修改或者新增</span><br>s.SetServiceList(<span class="hljs-type">string</span>(ev.Kv.Key), <span class="hljs-type">string</span>(ev.Kv.Value))<br><span class="hljs-keyword">case</span> mvccpb.DELETE: <span class="hljs-comment">//删除</span><br>s.DelServiceList(<span class="hljs-type">string</span>(ev.Kv.Key))<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// SetServiceList 新增服务地址</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *ServiceDiscovery)</span></span> SetServiceList(key, val <span class="hljs-type">string</span>) &#123;<br>s.lock.Lock()<br><span class="hljs-keyword">defer</span> s.lock.Unlock()<br>s.serverList[key] = <span class="hljs-type">string</span>(val)<br>log.Println(<span class="hljs-string">&quot;put key :&quot;</span>, key, <span class="hljs-string">&quot;val:&quot;</span>, val)<br>&#125;<br><br><span class="hljs-comment">// DelServiceList 删除服务地址</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *ServiceDiscovery)</span></span> DelServiceList(key <span class="hljs-type">string</span>) &#123;<br>s.lock.Lock()<br><span class="hljs-keyword">defer</span> s.lock.Unlock()<br><span class="hljs-built_in">delete</span>(s.serverList, key)<br>log.Println(<span class="hljs-string">&quot;del key:&quot;</span>, key)<br>&#125;<br><br><span class="hljs-comment">// GetServices 获取服务地址</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *ServiceDiscovery)</span></span> GetServices() []<span class="hljs-type">string</span> &#123;<br>s.lock.Lock()<br><span class="hljs-keyword">defer</span> s.lock.Unlock()<br>addrs := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s.serverList &#123;<br>addrs = <span class="hljs-built_in">append</span>(addrs, v)<br>&#125;<br><span class="hljs-keyword">return</span> addrs<br>&#125;<br><br><span class="hljs-comment">// Close 关闭服务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *ServiceDiscovery)</span></span> Close() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> s.cli.Close()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> endpoints = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;localhost:2379&quot;</span>&#125;<br>ser := NewServiceDiscovery(endpoints)<br><span class="hljs-keyword">defer</span> ser.Close()<br>ser.WatchService(<span class="hljs-string">&quot;/web/&quot;</span>)<br>ser.WatchService(<span class="hljs-string">&quot;/gRPC/&quot;</span>)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-time.Tick(<span class="hljs-number">10</span> * time.Second):<br>log.Println(ser.GetServices())<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>etcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序方法</title>
    <link href="/2023/11/19/%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/"/>
    <url>/2023/11/19/%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>influxDB的使用</title>
    <link href="/2023/11/18/influxDB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/11/18/influxDB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.influxdata.com/">InfluxDB</a>是一个开源分布式时序、事件和指标数据库。使用Go语言编写，无需外部依赖。其设计目标是实现分布式和水平伸缩扩展。</p><h2 id="win-使用docker-安装-influxDB"><a href="#win-使用docker-安装-influxDB" class="headerlink" title="win  使用docker 安装 influxDB"></a>win  使用docker 安装 influxDB</h2><p><a href="https://dl.influxdata.com/influxdb/releases/influxdb-1.7.7_windows_amd64.zip">https://dl.influxdata.com/influxdb/releases/influxdb-1.7.7_windows_amd64.zip</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull influxdb:latest<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>    --name influxdb \<br>    -p 8086:8086 \<br>    --volume /var/docker/influxdb2.0:/var/lib/influxdb2 \<br>    influxdb:latest<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span>  -it 9a78e3803fda /bin/bash<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231118224557414.png" alt="image-20231118224557414"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231118213142006.png" alt="image-20231118213142006"> </p><p>token</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">7I2YKdt2QXHLeNu72LSkTp-MloUTTE5rhVDXL8gFmL95NO7C-5Ot4-bZon8PJwgrcsDamNWeIUOXPdVN90lwjA==<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">influx auth create -o org-name -all-access<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">O3TZy1oUlst_lzWhPbc4Fg9BNKb3HYNY_0g1S5E6liGghZTEpSgJgdKtQ2OHdXHtKl2_Uj4SVPc7OsL7t-x0Lg==<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">influx config <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><a href="https://testerhome.com/column_channels/38060?order_by=like&">怎么部署性能监控平台，大佬指定一下 · TesterHome</a></p><p><a href="https://testerhome.com/topics/36405">Docker-Compose 轻松搭建 Grafana+InfluxDb 实用 Jmeter 监控面板 · TesterHome</a></p><p>查看配置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>influxdb2 <span class="hljs-string">&quot;github.com/influxdata/influxdb-client-go/v2&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// Create a new client using an InfluxDB server base URL and an authentication token</span><br>client := influxdb2.NewClient(<span class="hljs-string">&quot;http://localhost:8086&quot;</span>, <span class="hljs-string">&quot;Ki-3lIwR1A8WIJuXIa1od_nH2B164qs0i4_yS7H1mJ_NqiAs_6AIJ8ZUYAtT69eWvx9RIVSGFVtzZyPQ7DgdgA==&quot;</span>)<br><span class="hljs-comment">// Use blocking write client for writes to desired bucket</span><br>writeAPI := client.WriteAPIBlocking(<span class="hljs-string">&quot;initOrgName&quot;</span>, <span class="hljs-string">&quot;initBucketName&quot;</span>)<br><span class="hljs-comment">// Create point using full params constructor</span><br>p := influxdb2.NewPoint(<span class="hljs-string">&quot;stat&quot;</span>,<br><span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;unit&quot;</span>: <span class="hljs-string">&quot;temperature&quot;</span>&#125;,<br><span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;avg&quot;</span>: <span class="hljs-number">24.5</span>, <span class="hljs-string">&quot;max&quot;</span>: <span class="hljs-number">45.0</span>&#125;,<br>time.Now())<br><span class="hljs-comment">// write point immediately</span><br>writeAPI.WritePoint(context.Background(), p)<br><span class="hljs-comment">// Create point using fluent style</span><br>p = influxdb2.NewPointWithMeasurement(<span class="hljs-string">&quot;stat&quot;</span>).<br>AddTag(<span class="hljs-string">&quot;unit&quot;</span>, <span class="hljs-string">&quot;temperature&quot;</span>).<br>AddField(<span class="hljs-string">&quot;avg&quot;</span>, <span class="hljs-number">23.2</span>).<br>AddField(<span class="hljs-string">&quot;max&quot;</span>, <span class="hljs-number">45.0</span>).<br>SetTime(time.Now())<br>err := writeAPI.WritePoint(context.Background(), p)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-comment">// Or write directly line protocol</span><br>line := fmt.Sprintf(<span class="hljs-string">&quot;stat,unit=temperature avg=%f,max=%f&quot;</span>, <span class="hljs-number">23.5</span>, <span class="hljs-number">45.0</span>)<br>err = writeAPI.WriteRecord(context.Background(), line)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// Get query client</span><br>queryAPI := client.QueryAPI(<span class="hljs-string">&quot;initOrgName&quot;</span>)<br><span class="hljs-comment">// Get parser flux query result</span><br>result, err := queryAPI.Query(context.Background(), <span class="hljs-string">`from(bucket:&quot;initBucketName&quot;)|&gt; range(start: -1h) |&gt; filter(fn: (r) =&gt; r._measurement == &quot;stat&quot;)`</span>)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// Use Next() to iterate over query result lines</span><br><span class="hljs-keyword">for</span> result.Next() &#123;<br><span class="hljs-comment">// Observe when there is new grouping key producing new table</span><br><span class="hljs-keyword">if</span> result.TableChanged() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;table: %s\n&quot;</span>, result.TableMetadata().String())<br>&#125;<br><span class="hljs-comment">// read result</span><br>fmt.Printf(<span class="hljs-string">&quot;row: %s\n&quot;</span>, result.Record().String())<br>&#125;<br><span class="hljs-keyword">if</span> result.Err() != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Query error: %s\n&quot;</span>, result.Err().Error())<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-comment">// Ensures background processes finishes</span><br><span class="hljs-keyword">defer</span> client.Close()<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="概念（总结自StackOverflow）"><a href="#概念（总结自StackOverflow）" class="headerlink" title="概念（总结自StackOverflow）"></a>概念（总结自StackOverflow）</h2><ul><li>A <strong>bucket</strong> is named location with retention policy where time-series data is stored.</li><li>A <strong>series</strong> is a logical grouping of data defined by shared measurement, tag and field.</li><li>A <strong>measurement</strong> is similar to an SQL <strong>database</strong> table.</li><li>A <strong>tag</strong> is similar to <strong>indexed columns</strong> in an SQL database.</li><li>A <strong>field</strong> is similar to <strong>unindexed columns</strong> in an SQL database.</li><li>A <strong>point</strong> is similar to SQL <strong>row</strong>.</li></ul><p>For example, a SQL table <code>workdone</code>:</p><table><thead><tr><th><strong><code>Email</code></strong></th><th><strong><code>Status</code></strong></th><th><strong><code>time</code></strong></th><th><strong><code>Completed</code></strong></th></tr></thead><tbody><tr><td><a href="mailto:&#108;&#x6f;&#x72;&#114;&#64;&#x69;&#110;&#x66;&#x6c;&#x75;&#120;&#x64;&#98;&#46;&#x63;&#111;&#x6d;">&#108;&#x6f;&#x72;&#114;&#64;&#x69;&#110;&#x66;&#x6c;&#x75;&#120;&#x64;&#98;&#46;&#x63;&#111;&#x6d;</a></td><td>start</td><td>1636775801000000000</td><td>76</td></tr><tr><td><a href="mailto:&#108;&#111;&#x72;&#x72;&#x40;&#x69;&#x6e;&#x66;&#108;&#x75;&#x78;&#100;&#x62;&#46;&#99;&#111;&#109;">&#108;&#111;&#x72;&#x72;&#x40;&#x69;&#x6e;&#x66;&#108;&#x75;&#x78;&#100;&#x62;&#46;&#99;&#111;&#109;</a></td><td>finish</td><td>1636775868000000000</td><td>120</td></tr><tr><td><a href="mailto:&#x6d;&#97;&#x72;&#x76;&#x40;&#105;&#110;&#x66;&#108;&#x75;&#x78;&#x64;&#x62;&#46;&#x63;&#111;&#x6d;">&#x6d;&#97;&#x72;&#x76;&#x40;&#105;&#110;&#x66;&#108;&#x75;&#x78;&#x64;&#x62;&#46;&#x63;&#111;&#x6d;</a></td><td>start</td><td>1636775801000000000</td><td>0</td></tr><tr><td><a href="mailto:&#x6d;&#x61;&#114;&#x76;&#x40;&#x69;&#x6e;&#x66;&#x6c;&#117;&#120;&#100;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#x6d;&#x61;&#114;&#x76;&#x40;&#x69;&#x6e;&#x66;&#x6c;&#117;&#120;&#100;&#x62;&#46;&#x63;&#x6f;&#x6d;</a></td><td>finish</td><td>1636775868000000000</td><td>20</td></tr><tr><td><a href="mailto:&#99;&#x6c;&#x69;&#x66;&#x66;&#x40;&#105;&#x6e;&#102;&#108;&#x75;&#x78;&#100;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#99;&#x6c;&#x69;&#x66;&#x66;&#x40;&#105;&#x6e;&#102;&#108;&#x75;&#x78;&#100;&#x62;&#x2e;&#x63;&#111;&#x6d;</a></td><td>start</td><td>1636775801000000000</td><td>54</td></tr><tr><td><a href="mailto:&#x63;&#x6c;&#x69;&#102;&#x66;&#64;&#105;&#x6e;&#102;&#x6c;&#x75;&#120;&#100;&#x62;&#46;&#99;&#111;&#109;">&#x63;&#x6c;&#x69;&#102;&#x66;&#64;&#105;&#x6e;&#102;&#x6c;&#x75;&#120;&#100;&#x62;&#46;&#99;&#111;&#109;</a></td><td>finish</td><td>1636775868000000000</td><td>56</td></tr></tbody></table><p>The columns <code>Email</code> and <code>Status</code> are indexed.</p><p>Hence:</p><ul><li>Measurement: <code>workdone</code></li><li>Tags: <code>Email</code>, <code>Status</code></li><li>Field: <code>Completed</code></li><li>Series (Cardinality &#x3D; 3 x 2 &#x3D; 6):<ol><li>Measurement: <code>workdone</code>; Tags: <code>Email</code>: <code>lorr@influxdb.com</code>, <code>Status</code>: <code>start</code>; Field: <code>Completed</code></li><li>Measurement: <code>workdone</code>; Tags: <code>Email</code>: <code>lorr@influxdb.com</code>, <code>Status</code>: <code>finish</code>; Field: <code>Completed</code></li><li>Measurement: <code>workdone</code>; Tags: <code>Email</code>: <code>marv@influxdb.com</code>, <code>Status</code>: <code>start</code>; Field: <code>Completed</code></li><li>Measurement: <code>workdone</code>; Tags: <code>Email</code>: <code>marv@influxdb.com</code>, <code>Status</code>: <code>finish</code>; Field: <code>Completed</code></li><li>Measurement: <code>workdone</code>; Tags: <code>Email</code>: <code>cliff@influxdb.com</code>, <code>Status</code>: <code>start</code>; Field: <code>Completed</code></li><li>Measurement: <code>workdone</code>; Tags: <code>Email</code>: <code>cliff@influxdb.com</code>, <code>Status</code>: <code>finish</code>; Field: <code>Completed</code></li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.\influx.exe bucket list -o initOrgName -t Ki-3lIwR1A8WIJuXIa1od_nH2B164qs0i4_yS7H1mJ_NqiAs_6AIJ8ZUYAtT69eWvx9RIVSGFVtzZyPQ7DgdgA==<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">config create --config-name example-config-name --host-url https://us-west-2-1.aws.cloud2.influxdata.com --org example-org --token 3lIwR1A8WIJuXIa1od_nH2B164qs0i4_yS7H1mJ_NqiAs_6AIJ8ZUYAtT69eWvx9RIVSGFVtzZyPQ7DgdgA==<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>influxDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>索引总结</title>
    <link href="/2023/11/06/%E7%B4%A2%E5%BC%95%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/06/%E7%B4%A2%E5%BC%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么mysql-的-innoDB-选择-使用-B-tree作为索引的数据结构"><a href="#为什么mysql-的-innoDB-选择-使用-B-tree作为索引的数据结构" class="headerlink" title="为什么mysql 的 innoDB 选择 使用 B+ tree作为索引的数据结构"></a>为什么mysql 的 innoDB 选择 使用 B+ tree作为索引的数据结构</h3><h4 id="B-tree-VS-B-tree"><a href="#B-tree-VS-B-tree" class="headerlink" title="B + tree VS B tree"></a>B + tree VS B tree</h4><ul><li>存储相同数量级别的情况下，B+ tree 的树高比B tree低，磁盘IO次数少</li><li>B+ tree叶子节点用双向链表串联起来，适合范围查询</li></ul><h4 id="B-tree-VS-Hash"><a href="#B-tree-VS-Hash" class="headerlink" title="B + tree VS Hash"></a>B + tree VS Hash</h4><ul><li>虽然hash的等值查询效率很高，但无法做到范围长查询</li><li>hash会有hash碰撞发生</li></ul><h3 id="什么时候适合使用索引"><a href="#什么时候适合使用索引" class="headerlink" title="什么时候适合使用索引"></a>什么时候适合使用索引</h3><ul><li>字段具有唯一性，比如商品的编码</li><li>常用于 Where 查询的字段</li><li>经常用于 <code>group by</code>和 <code>order by</code>的字段</li></ul><h3 id="什么时候不需要索引"><a href="#什么时候不需要索引" class="headerlink" title="什么时候不需要索引"></a>什么时候不需要索引</h3><ul><li>数据量少</li><li>索引字段常更新</li><li>字段中存在大量重复的数据</li><li><code>where</code> <code>order by</code>  <code> group by</code> 用不到的字段</li></ul><h3 id="什么时候索引会失效"><a href="#什么时候索引会失效" class="headerlink" title="什么时候索引会失效"></a>什么时候索引会失效</h3><ul><li>使用 左或者是左右模糊匹配的时候 <code>like %xxx</code> <code>like%xx%</code> </li><li>查询条件中存在计算、函数、类型转化操作</li><li>没能遵循最左匹配原则</li><li>在where字句中，如果 or 前的条件 是索引列，而在 or 之后为非索引列</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>八股</tag>
      
      <tag>索引</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程间的通信方式</title>
    <link href="/2023/11/06/%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/"/>
    <url>/2023/11/06/%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>进程间的通信方式有多种，可以按照，主机内部和主机与主机间的通信来划分。</p><ol><li><p>pipe</p></li><li><p>信号量</p></li><li><p>信号</p></li><li><p>消息队列</p></li><li><p>Socket</p></li><li><p>webSocket</p></li><li><p>RPC</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>八股</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql中的事务</title>
    <link href="/2023/11/06/mysql%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
    <url>/2023/11/06/mysql%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><p>ACID</p><ul><li><p>atomic</p></li><li><p>consistency</p></li><li><p>isolation</p></li><li><p>durability</p></li></ul><p>并发事务会引发什么问题</p><ul><li>脏读</li></ul><p>读到了另一个未提交事务修改过的数据</p><p><img src="https://cdn.xiaolincoding.com//mysql/other/10b513008ea35ee880c592a88adcb12f.png"></p><ul><li>不可重复读</li></ul><p>在一个事务中多次读取同一个数据，前后两次读取到的数据不一样的情况</p><p><img src="https://cdn.xiaolincoding.com//mysql/other/f5b4f8f0c0adcf044b34c1f300a95abf.png"></p><ul><li>幻读</li></ul><p>在一个事务中多次查询某个符合条件的记录数量，出现前后两次查询到的记录数量不一致</p><p><img src="https://cdn.xiaolincoding.com//mysql/other/d19a1019dc35dfe8cfe7fbff8cd97e31.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>事务，八股</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hash函数</title>
    <link href="/2023/11/05/hash%E5%87%BD%E6%95%B0/"/>
    <url>/2023/11/05/hash%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>WIKIPEDIA</p><blockquote><p>A <strong>hash function</strong> is any <a href="https://en.wikipedia.org/wiki/Function_(mathematics)">function</a> that can be used to map <a href="https://en.wikipedia.org/wiki/Data_(computing)">data</a> of arbitrary size to fixed-size values, though there are some hash functions that support variable length output.[<a href="https://en.wikipedia.org/wiki/Hash_function#cite_note-1">1]</a> The values returned by a hash function are called <em>hash values</em>, <em>hash codes</em>, <em>digests</em>, or simply <em>hashes</em>. The values are usually used to index a fixed-size table called a <em><a href="https://en.wikipedia.org/wiki/Hash_table">hash table</a></em>. Use of a hash function to index a hash table is called <em>hashing</em> or <em>scatter storage addressing</em>.</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>input可以是一个变长的字符串，output为一个固定长度的输出，该值称为散列值，长度固定</li><li>hash function的计算时间不应该过长</li><li>不可逆性</li><li>冲突性较低，抗碰撞性强</li><li>映射相对均匀</li></ol><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><p>错误验证，数据验证，完整性校验</p></li><li><p>数据加密，密码加盐</p></li><li><p>语音识别</p><blockquote><p>对于像从一个已知列表中匹配一个MP3文件这样的应用，一种可能的方案是使用传统的散列函数——例如<a href="https://zh.wikipedia.org/wiki/MD5">MD5</a>，但是这种方案会对时间平移、CD读取错误、不同的音频压缩算法或者音量调整的实现机制等情况非常敏感。使用一些类似于MD5的方法有利于迅速找到那些严格相同（从音频文件的二进制数据来看）的音频文件，但是要找到全部相同（从音频文件的内容来看）的音频文件就需要使用其他更高级的算法了。</p><p>那些并不紧随IT工业潮流的人往往能反其道而行之，对于那些微小差异足够健壮的散列函数确实存在。现存的绝大多数散列算法都是不够健壮的，但是有少数散列算法能够达到辨别从嘈杂房间里的扬声器里播放出来的音乐的健壮性。有一个实际的例子是<a href="https://zh.wikipedia.org/w/index.php?title=Shazam_Entertainment&action=edit&redlink=1">Shazam</a>[<a href="http://www.shazam.com/">1]</a> （<a href="https://web.archive.org/web/20080821140538/http://www.shazam.com/">页面存档备份</a>，存于<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%A1%A3%E6%A1%88%E9%A6%86">互联网档案馆</a>） 服务。用户可以用手机打开其app，并将话筒靠近用于播放音乐的扬声器。该项服务会分析正在播放的音乐，并将它于存储在数据库中的已知的散列值进行比较。用户就能够收到被识别的音乐的曲名。</p></blockquote></li></ul><h3 id="常见的hash-算法"><a href="#常见的hash-算法" class="headerlink" title="常见的hash 算法"></a>常见的hash 算法</h3><h4 id="SHA-2"><a href="#SHA-2" class="headerlink" title="SHA-2"></a>SHA-2</h4><p><strong>secure Hash Algorithm 2</strong> </p><p>先留一个坑位，慢慢看hash function</p><p>MD系列</p><p><strong>Message-Digest Algorithm</strong>  </p>]]></content>
    
    
    
    <tags>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各种锁</title>
    <link href="/2023/11/05/%E5%90%84%E7%A7%8D%E9%94%81/"/>
    <url>/2023/11/05/%E5%90%84%E7%A7%8D%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h2 id="各种锁🔒"><a href="#各种锁🔒" class="headerlink" title="各种锁🔒"></a>各种锁🔒</h2><p>当有多个线程同时访问共享资源时，该共享资源可能会数据错乱，此时，锁就有了作用。</p><p>加锁的目的是为了保证共享资源在任意时间里，只有一个线程访问，这样可以避免多线程导致共享数据错乱的问题。</p><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><ul><li>当线程加锁成功后，该线程会占用该共享资源，直到该线程解锁，这期间其他线程无法访问该共享资源</li><li>当互斥锁加锁失败后，线程会释放CPU，把资源给其他线程，进入阻塞状态</li></ul><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%94%81/%E4%BA%92%E6%96%A5%E9%94%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p><p>互斥锁加锁失败后，会从用户态陷入内核态，让内核来切换线程，这存在一定的<strong>性能开销</strong></p><ul><li>加锁失败，内核把线程的状态从【运行】-&gt;【阻塞】状态，把资源让给洽谈线程</li><li>当锁被释放后，该线程有机会拿到该锁。从【阻塞】状态转为【就绪】状态</li></ul><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>自旋锁是通过 CPU 提供的 <code>CAS</code> 函数（<em>Compare And Swap</em>），在「用户态」完成加锁和解锁操作，不会主动产生线程上下文切换，所以相比互斥锁来说，会快一些，开销也小一些。</p><p>一般加锁的过程，包含两个步骤：</p><ul><li>第一步，查看锁的状态，如果锁是空闲的，则执行第二步；</li><li>第二步，将锁设置为当前线程持有；</li></ul><p>CAS 函数就把这两个步骤合并成一条硬件级指令，形成<strong>原子指令</strong>，这样就保证了这两个步骤是不可分割的，要么一次性执行完两个步骤，要么两个步骤都不执行。</p><p>比如，设锁为变量 lock，整数 0 表示锁是空闲状态，整数 pid 表示线程 ID，那么 CAS(lock, 0, pid) 就表示自旋锁的加锁操作，CAS(lock, pid, 0) 则表示解锁操作。</p><p>加锁失败后，一直忙等待，直到获取锁</p><p>自旋锁是最比较简单的一种锁，一直自旋，利用 CPU 周期，直到锁可用。<strong>需要注意，在单核 CPU 上，需要抢占式的调度器（即不断通过时钟中断一个线程，运行其他线程）。否则，自旋锁在单 CPU 上无法使用，因为一个自旋的线程永远不会放弃 CPU。</strong></p><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><p>读写锁适用于能明确区分读操作和写操作的场景。</p><h4 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h4><p>悲观锁做事比较悲观，它认为<strong>多线程同时修改共享资源的概率比较高，于是很容易出现冲突，所以访问共享资源前，先要上锁</strong>。</p><p>乐观锁做事比较乐观，它假定冲突的概率很低，它的工作方式是：<strong>先修改完共享资源，再验证这段时间内有没有发生冲突，如果没有其他线程在修改资源，那么操作完成，如果发现有其他线程已经修改过这个资源，就放弃本次操作</strong>。</p><p>其中读写锁、互斥锁、自旋锁都是悲观锁</p><p>实际上，我们常见的git 也是用了乐观锁的思想，先让用户编辑代码，然后提交的时候，通过版本号来判断是否产生了冲突，发生了冲突的地方，需要我们自己修改后，再重新提交。</p><p>乐观锁虽然去除了加锁解锁的操作，但是一旦发生冲突，重试的成本非常高，所以<strong>只有在冲突概率非常低，且加锁成本非常高的场景时，才考虑使用乐观锁。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个nil可能不相等吗？</title>
    <link href="/2023/11/05/%E4%B8%A4%E4%B8%AAnil%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9B%B8%E7%AD%89%E5%90%97%EF%BC%9F/"/>
    <url>/2023/11/05/%E4%B8%A4%E4%B8%AAnil%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9B%B8%E7%AD%89%E5%90%97%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="两个nil可能不相等吗？"><a href="#两个nil可能不相等吗？" class="headerlink" title="两个nil可能不相等吗？"></a>两个nil可能不相等吗？</h3><p>接口时对非接口之（例如指针，struct等）的封装，内部实现包含两个字段，类型<code>T</code>和值<code>V</code> 。一个接口为nil，当且仅当T和V都处于unset的状态（T&#x3D;nil，V is unset）</p><ul><li><p>两个接口比较时，会先比较T，再比较V</p></li><li><p>接口值和非接口值相比比较时，会将非接口值转为接口值，再比较</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">var</span> p *<span class="hljs-type">int</span> =<span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; =p<span class="hljs-comment">//会将i转为 （type=*int，v=nil）</span><br>    fmt.Println(p==i)<span class="hljs-comment">//true</span><br>    fmt.Println(p==<span class="hljs-literal">nil</span>)<span class="hljs-comment">//true</span><br>    fmt.Println(i==<span class="hljs-literal">nil</span>)<span class="hljs-comment">//false</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol><li><code>fmt.Println(p==i)</code>  ,接口值与非接口值相比较时，会将i转为 （type&#x3D;* int，v&#x3D;nil）,此时p为（type&#x3D;*int，v&#x3D;nil），所以 p&#x3D;&#x3D;i ,返回true</li><li>p的V为nil，p&#x3D;&#x3D;nil，返回true</li><li>接口值与非接口值相比较时，会将非接口值转为接口值,再比较,(type&#x3D;* int,v&#x3D;nil)!&#x3D;(type&#x3D;nil,v&#x3D;nil),返回false</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>GO</tag>
      
      <tag>八股</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go的逃逸分析</title>
    <link href="/2023/11/05/Go%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"/>
    <url>/2023/11/05/Go%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="Go语言的局部变量是分配到栈上还是堆上？"><a href="#Go语言的局部变量是分配到栈上还是堆上？" class="headerlink" title="Go语言的局部变量是分配到栈上还是堆上？"></a>Go语言的局部变量是分配到栈上还是堆上？</h3><p>这由编译器决定。GO语言的编译器会决定分配到栈上还是堆上，编译器会做逃逸分析（escape analysis），当发现变量的作用域没有超出函数的范围，可以在栈上，反之必须在堆上。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> *<span class="hljs-type">int</span> &#123;<br>v := <span class="hljs-number">100</span><br><span class="hljs-keyword">return</span> &amp;v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>m := foo()<br><span class="hljs-built_in">println</span>(*m)<br>&#125;<br></code></pre></td></tr></table></figure><p>foo函数中，如果v分配在栈上，foo函数返回时，&amp;v就会不存在，但这段程序是可以正常运行的。Go编译器会发现v的引用脱离了foo的作用域，会将其分配到堆上。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>逃逸分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读sync包</title>
    <link href="/2023/11/02/%E8%AF%BBsync%E5%8C%85/"/>
    <url>/2023/11/02/%E8%AF%BBsync%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h3 id="Sync-Cond"><a href="#Sync-Cond" class="headerlink" title="Sync.Cond"></a>Sync.Cond</h3><h3 id="Sync-Once"><a href="#Sync-Once" class="headerlink" title="Sync.Once"></a>Sync.Once</h3><h3 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面试记录</title>
    <link href="/2023/10/30/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/10/30/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="格林深瞳-一面"><a href="#格林深瞳-一面" class="headerlink" title="格林深瞳 一面"></a>格林深瞳 一面</h3><p>一面时间：2023.11.1 </p><ul><li><p>用之前的笔试题开场，问我的处理逻辑，为什么这么想</p></li><li><p>通过第二道笔试题（报警响应），问了email的具体逻辑，有什么输出，有什么输入，还需要什么其他参数吗？</p></li><li><p>报警信息的来源</p></li><li><p>http的请求</p></li><li><p>http中 content type 有哪些 ?</p><ol><li><strong>text&#x2F;plain</strong>: 表示文本内容，通常是纯文本，不含任何格式化，如纯文本文件或普通文本消息。</li><li><strong>text&#x2F;html</strong>: 表示HTML文档，通常用于Web页面。</li><li><strong>text&#x2F;css</strong>: 表示Cascading Style Sheets（CSS）文件，用于定义文档的样式和布局。</li><li><strong>application&#x2F;json</strong>: 表示JSON（JavaScript Object Notation）数据，常用于数据交换。</li><li><strong>application&#x2F;xml</strong>: 表示XML（eXtensible Markup Language）数据，用于数据交换和配置文件等。</li><li><strong>application&#x2F;pdf</strong>: 表示Adobe PDF文档，通常用于电子文档的传输和显示。</li><li><strong>image&#x2F;jpeg</strong>: 表示JPEG图像，一种常见的图像格式。</li><li><strong>image&#x2F;png</strong>: 表示PNG图像，另一种常见的图像格式。</li><li><strong>image&#x2F;gif</strong>: 表示GIF图像，一种支持动画的图像格式。</li><li><strong>audio&#x2F;mpeg</strong>: 表示MPEG音频文件，如MP3音频文件。</li><li><strong>video&#x2F;mp4</strong>: 表示MP4视频文件，一种常见的视频格式。</li><li><strong>application&#x2F;octet-stream</strong>: 表示二进制数据，通常不指定特定的媒体类型。</li><li><strong>multipart&#x2F;form-data</strong>: 通常用于HTML表单文件上传，允许传输二进制文件数据。</li><li><strong>application&#x2F;x-www-form-urlencoded</strong>: 通常用于HTML表单提交，编码表单字段的键值对。</li></ol></li><li><p>http 中参数传递的方式</p><ol><li><strong>URL查询字符串（Query Parameters）</strong>：参数直接附加在URL的末尾，以问号（?）开头，不同参数之间使用“&amp;”符号分隔。例如：<code>https://example.com/page?param1=value1&amp;param2=value2</code>。</li><li><strong>表单（Form）</strong>：表单是HTML中的一种元素，可以包含各种输入字段（文本框、下拉列表、单选框等），用户可以在浏览器中填写表单字段，然后提交给服务器。这些字段的值通常以键值对的形式传递，可以使用不同的HTTP方法，如POST和GET，来提交表单数据。</li><li><strong>HTTP头部（HTTP Headers）</strong>：HTTP头部可以包含自定义的键值对，以传递一些元信息或参数。例如，可以在HTTP请求的头部中包含自定义的<code>X-My-Header: value</code>头部字段，服务器可以根据这些字段来处理请求。</li><li><strong>URL路径参数（Path Parameters）</strong>：有时，参数信息可以包含在URL的路径中，通过在路径中使用占位符来传递参数。例如，RESTful API通常使用这种方式，如<code>https://example.com/users/123</code>中的<code>123</code>是用户ID。</li><li><strong>请求正文（Request Body）</strong>：对于HTTP POST、PUT、PATCH等方法，数据可以包含在请求的正文中，通常以JSON、XML、或其他自定义格式进行编码。这种方式适用于传递复杂的数据结构，例如提交表单数据或上传文件。</li><li><strong>Cookie（HTTP Cookies）</strong>：Cookie 是一种在客户端和服务器之间传递数据的方式，通常用于跟踪用户的会话状态。服务器可以在HTTP响应中设置Cookie，然后浏览器会在后续请求中自动包含Cookie数据。</li><li><strong>会话（Session）</strong>：在某些情况下，参数可以存储在会话中，用户的会话状态在多个HTTP请求之间保持一致。</li><li><strong>URL重写（URL Rewriting）</strong>：在URL中将参数信息进行编码，通常使用URL路径的方式，以便将参数传递给服务器。</li></ol></li><li><p>开始笔试</p><ul><li>无缓冲的channel的读和写 （被卡脖子了~~，写了一个死锁，后来debug出来了）</li><li>有限容量队列的实现<ul><li>先是这么写 <code>arr:=arr[1:]</code>，发现arr的长度会变短</li><li>后来不敢偷懒了，共用了一块内存，过了</li></ul></li></ul><p></p></li><li><p>问项目</p><ul><li><code>特殊词过滤和防止循环转链</code>的具体逻辑</li><li>MD5的实现，hash是什么…</li><li>Snowflake 怎么实现，具体的参数有哪些<br>         1. 开始时间+机器ID构成node<br>             1. 使用来generate Int64的值</li><li>JWT 怎么使用的，具体的参数有哪些<ol><li>自定义的字段，如username，userID + standardClaims，构成了最终的Claims</li><li>其中StandardClaims 包括了expirationAt、Audience、ID、IssureAt、Subject、NotBefore</li></ol></li><li><code>随时间权重下降的算法评论系统</code> 的具体逻辑</li></ul></li><li><p>我开始反问</p><ul><li>有没有相应的ld，mt</li><li>面试会有几轮，会有HR面吗？</li><li><code>健康体育</code>的版块在公司中属于什么地位，开始研发多久了</li><li>公司的主要技术栈</li><li>可以讲讲我的面试表现吗</li></ul><p>我没了~~</p><p>2023.11.2 我收到了第一份感谢信，我被打回了人才库~~~</p></li></ul><h3 id="字节后端一面"><a href="#字节后端一面" class="headerlink" title="字节后端一面"></a>字节后端一面</h3><p>​    面试时间：2023.11.7 </p><p>​    2023.11.14，也就是7天后我开始反思自己，调整心态，一方面项目自己没能把握机会，另一方面自己的简历有夸大的部分，面试官基本围绕你的项目和简历来进行提问。</p><p>总结：</p><ul><li>主动，你要主动把自己的知识面和特性展现出来，不要等面试官来找你的优点，你要牵引面试官跟着你的思路走，而不是他牵着你的鼻子走</li></ul><ol start="2"><li>自己不是很熟练的东西就不要往简历中写，面试官的问题思路来源大部分都是来自你的项目和个人介绍的技术栈中</li></ol><h3 id="字节AI编辑实习生"><a href="#字节AI编辑实习生" class="headerlink" title="字节AI编辑实习生"></a>字节AI编辑实习生</h3><p>2023.11.13 </p><h4 id="总结转链项目："><a href="#总结转链项目：" class="headerlink" title="总结转链项目："></a>总结转链项目：</h4><h5 id="Convert"><a href="#Convert" class="headerlink" title="Convert"></a>Convert</h5><pre><code class="hljs"> 1. 校验数据 - 数据不为空 - 链接可访问 - 不是之前已经转过的长链接（用MD5计算长链接的值，去数据库中查询） - 不是数据库中存在的短链接 2. 取号 - 号码转链接 - 查看是否为blackList 3. 存入bloom filter 4. 存储长短连接的对应关系 5. 返回响应</code></pre><p>​    </p><h5 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h5><ol><li>查询布隆过滤器 （若短链接不存在，访问失败）</li><li>用go-zero 查询短链接和长链接的对应关系</li><li>返回响应</li></ol><p>http中的常见字段：</p><ul><li>connection</li><li>content-type </li><li>content-length</li><li>host</li><li>content-encoding</li></ul><p>get 和 post的区别</p><ul><li>幂等</li><li>数据传送方式</li><li>语义</li><li>数据长度</li><li>缓存</li><li>安全性</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB的使用</title>
    <link href="/2023/10/26/MongoDB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/10/26/MongoDB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h3><ul><li>拉取最新镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker pull mongo:latest<br></code></pre></td></tr></table></figure><ul><li>查看本地镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker images<br></code></pre></td></tr></table></figure><ul><li>运行容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker run -itd --name mongo -p 27017:27017 mongo --auth<br></code></pre></td></tr></table></figure><p>​参数说明 ：</p><ol><li><strong>p 27017:27017</strong> ：映射容器服务的 27017 端口到宿主机的 27017 端口。外部可以直接通过 宿主机 ip:27017 访问到 mongo 的服务。</li></ol><p>​2. <strong>–auth</strong>：需要密码才能访问容器服务。</p><ul><li><p>添加用户和设置密码</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker <span class="hljs-built_in">exec</span> -it mongo mongosh admin<br><span class="hljs-comment"># 创建一个名为 admin，密码为 123456 的用户。</span><br>&gt;  db.createUser(&#123; user:<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-built_in">pwd</span>:<span class="hljs-string">&#x27;123456&#x27;</span>,roles:[ &#123; role:<span class="hljs-string">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class="hljs-string">&#x27;admin&#x27;</span>&#125;,<span class="hljs-string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);<br><span class="hljs-comment"># 尝试使用上面创建的用户信息进行连接。</span><br>&gt; db.auth(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>连接到 MongoDB 容器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mongo bash<br></code></pre></td></tr></table></figure><p>使用MongoShell</p>]]></content>
    
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令行积累</title>
    <link href="/2023/10/26/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A7%AF%E7%B4%AF/"/>
    <url>/2023/10/26/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<p> <strong>移动光标</strong></p><table><thead><tr><th align="center">按键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ctrl-a</td><td align="center">移动光标到行首</td></tr><tr><td align="center">ctrl-e</td><td align="center">移动光标到行尾</td></tr><tr><td align="center">ctrl-f</td><td align="center">-&gt;</td></tr><tr><td align="center">ctrl-b</td><td align="center">&lt;-</td></tr></tbody></table><p><strong>修改文本</strong></p><table><thead><tr><th align="center">按键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ctrl-d</td><td align="center">删除光标位置的字符</td></tr><tr><td align="center">ctrl-t</td><td align="center">光标前元素与当前光标位置的字符互换位置</td></tr><tr><td align="center">Alt-u</td><td align="center">把光标位置到字尾的字符转为大写字母</td></tr><tr><td align="center">Alt-l</td><td align="center">把光标位置到字尾的字符转为小写字母</td></tr><tr><td align="center">Alt-t</td><td align="center">把光标位置的字 和 其前方的字位置互换</td></tr></tbody></table><p><strong>剪切和粘贴</strong></p><table><thead><tr><th align="center">按键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ctrl-k</td><td align="center">剪切从光标位置到行尾的文本</td></tr><tr><td align="center">ctrl-u</td><td align="center">剪切从光标到行首的文本</td></tr><tr><td align="center">Alt-d</td><td align="center">剪切从光标位置到词尾的文本</td></tr><tr><td align="center">Ctrl-y</td><td align="center">将剪切的文本粘贴到光标位置</td></tr></tbody></table><p>用于表示页面表中的每一项，包含了页号、标志、主存块号、修改标志和磁盘位置等信息。用于表示页面表中的每一项，包含了页号、标志、主存块号、修改标志和磁盘位置等信息。用于表示页面表中的每一项，包含了页号、标志、主存块号、修改标志和磁盘位置等信息。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>makefile Tutorial</title>
    <link href="/2023/10/25/Tutorial/"/>
    <url>/2023/10/25/Tutorial/</url>
    
    <content type="html"><![CDATA[<p>Makefile是一种用于构建和编译项目的工具，通常用于C&#x2F;C++项目，但也可以用于其他编程语言。Makefile使用一种特定的语法来定义项目中的规则和依赖关系。以下是Makefile的基本语法要点：</p><ol><li><p><strong>目标（Targets）</strong>：目标是您要构建的文件或任务的名称。通常，第一个目标是默认目标，可以通过运行<code>make</code>命令来构建。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">target: dependencies</span><br>    command<br></code></pre></td></tr></table></figure><ul><li><code>target</code>是目标的名称。</li><li><code>dependencies</code>是目标的依赖项，可以是其他目标或文件。</li><li><code>command</code>是构建目标的命令。</li></ul></li><li><p><strong>规则（Rules）</strong>：规则定义了如何构建目标以及它的依赖项。规则通常出现在Makefile中。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">target: dependencies</span><br>    command<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">build: main.go </span><br>go build -o bin/main main.go<br></code></pre></td></tr></table></figure></li><li><p><strong>变量（Variables）</strong>：您可以在Makefile中定义变量，以便更轻松地重用值。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">BINARY = <span class="hljs-string">&quot;BINARYFileName&quot;</span><br><br><span class="hljs-section">build: main.go</span><br>    go build -o bin/$&#123;BINARY&#125; main.go<br></code></pre></td></tr></table></figure></li><li><p><strong>条件语句（Conditionals）</strong>：Makefile支持条件语句，您可以根据条件执行不同的命令。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile">BINARY = <span class="hljs-string">&quot;BINARYFileName&quot;</span><br><br><span class="hljs-section">clean:</span><br>@if [ -f $&#123;BINARY&#125; ]; then<br>    rm $&#123;BINARY&#125;<br>fi<br></code></pre></td></tr></table></figure></li><li><p><strong>伪目标（Phony Targets）</strong>：伪目标不代表实际的文件，而是表示特定任务。它们通常用于指定清理（<code>clean</code>）或其他非文件生成任务。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: clean</span><br><span class="hljs-section">clean:</span><br>    rm -f my_program<br></code></pre></td></tr></table></figure></li></ol><p><strong>案例</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 声明变量</span><br>BINARY=<span class="hljs-string">&quot;BIANRYFileName&quot;</span><br><span class="hljs-comment"># 使用make指令时，执行all中的所用target</span><br><span class="hljs-section">all: goTool build</span><br><br><span class="hljs-section">goTool:</span><br>go fmt ./<br>go vet ./<br><br><span class="hljs-section">build:</span><br>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ./bin/$&#123;BIANRYFileName&#125;<br><span class="hljs-comment">#go build -o bin/main main.go</span><br><br><span class="hljs-section">run:</span><br>go run main.go<br><br><span class="hljs-section">clean:</span><br>@if [ -f $&#123;BINARY&#125; ]; then<br>    rm $&#123;BINARY&#125;<br>fi<br><br><span class="hljs-section">compile:</span><br>echo <span class="hljs-string">&quot;Compiling for every OS and platform&quot;</span><br><span class="hljs-comment">#GOOS=freebsd GOARCH=386 go build -o bin/main-freebsd-386 main.go</span><br>GOOS=linux GOARCH=386 go build -o bin/main-linux-386 main.go<br><span class="hljs-comment">#GOOS=windows GOARCH=386 go build -o bin/main-windows-386 main.go</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Makefile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读Go专家编程】之Context篇</title>
    <link href="/2023/10/20/%E3%80%90%E8%AF%BBGo%E4%B8%93%E5%AE%B6%E7%BC%96%E7%A8%8B%E3%80%91%E4%B9%8BContext%E7%AF%87/"/>
    <url>/2023/10/20/%E3%80%90%E8%AF%BBGo%E4%B8%93%E5%AE%B6%E7%BC%96%E7%A8%8B%E3%80%91%E4%B9%8BContext%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>Context的注意事项</p><ul><li>不要把Context放在结构体中，要以参数的方式显示传递</li><li>以Context作为参数传递的函数方法，应该发Context作为第一个参数</li><li>给一个函数方法传递Context的时候，不要传递nil，如果不知道要传递什么，可以传递 contex.TODO（）</li><li>context 的Value相关方法应该传递爱请求域的必要参数，不应该用于传递可选参数</li><li>Context是线程安全的，可以放心的在goroutine中传递</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git总结</title>
    <link href="/2023/10/20/git%E6%80%BB%E7%BB%93/"/>
    <url>/2023/10/20/git%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="使用-git-commit-来提交文件"><a href="#使用-git-commit-来提交文件" class="headerlink" title="使用 git commit 来提交文件"></a>使用 git commit 来提交文件</h3><p>git commit -am  “first commit “</p><h3 id="使用git-reset-回退版本"><a href="#使用git-reset-回退版本" class="headerlink" title="使用git reset 回退版本"></a>使用git reset 回退版本</h3><p>git reset 有三个版本 –soft –hard –mixed </p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231020090358533.png" alt="image-20231020090358533"></p><p>git ls-files 查看暂存区中的内容</p><p>假如有误操作，可以使用一下命令，进行回溯</p><p><strong>git reflog 查看历史版本号</strong></p><p>git reset –hard 版本号</p><h3 id="使用-git-diff-查看差异"><a href="#使用-git-diff-查看差异" class="headerlink" title="使用 git diff 查看差异"></a>使用 git diff 查看差异</h3><ul><li>git diff 默认查看working Directory 和 Stage Area 的差异</li><li>git diff –cached&#x2F;staged 查看 Stage Area 和 Local Area的差异</li><li>git diff  HEAD查看 working Directory 和 Local Area的差异</li><li>git diff 【版本号1】 【版本号2】 查看两个版本之间的差异<ul><li>HEAD 表示当前版本</li><li>HEAD~ 表示上一个版本</li><li>HEAD~2 表示上一个版本</li><li>git diff HEAD~2 HEAD file.txt 查看 file.txt 当前版本和上两个版本间的差异</li></ul></li></ul><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231020080808149.png" alt="image-20231020080808149"></p><h3 id="使用-git-rm-来删除文件"><a href="#使用-git-rm-来删除文件" class="headerlink" title="使用 git rm 来删除文件"></a>使用 git rm 来删除文件</h3><p>用 <code>git rm fileName</code> <strong>取代</strong> <code>rm fileName + git add fileName</code></p><p>git rm fileName 会删除 本地文件 和 版本库文件</p><p>git rm –cached 只会删除 版本库文件</p><h3 id="使用-gitignore忽视文件"><a href="#使用-gitignore忽视文件" class="headerlink" title="使用.gitignore忽视文件"></a>使用.gitignore忽视文件</h3><p>.gitignore 有一个奏效前提，文件不能是已经被提交到版本库中的文件</p><ul><li>将需要忽视的文件加入 .gitignore 中</li><li>可以使用 通配符 <code>*</code> 来适配所有文件</li><li>可以将需要忽略的文件夹放入 .gitignore 中，文件夹以<code>/</code> 结尾  <code>eg: temp/</code>，这将忽视temp文件夹下的所有文件。 <strong>注意</strong>：需要忽视的文件夹不能为空，如果为空，gitignore不会生效</li></ul><h4 id="gitignore的匹配规则"><a href="#gitignore的匹配规则" class="headerlink" title="gitignore的匹配规则"></a>gitignore的匹配规则</h4><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231020103715140.png" alt="image-20231020103715140"></p><h3 id="本地仓库与远程仓库关联"><a href="#本地仓库与远程仓库关联" class="headerlink" title="本地仓库与远程仓库关联"></a>本地仓库与远程仓库关联</h3><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231020215250344.png" alt="image-20231020215250344"></p><p>添加远程仓库  </p><p>git remote add &lt;远程仓库别名&gt;  &lt;远程仓库地址&gt;  其中 github默认分支名字为 origin（远程仓库别名） </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin git@github.com:Forrest-Tao/gitTest.git<br></code></pre></td></tr></table></figure><p>将本地文件推送到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u &lt;remote&gt; &lt;remote&gt;<br>git push origin main<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>&lt;remote&gt;</code> 是指定远程仓库的名称，通常是 <code>origin</code>，但也可以是其他已配置的远程仓库的名称。</li><li><code>&lt;remote&gt;</code> 是指定要推送的本地分支的名称。</li></ul><p>拉取远程仓库内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull &lt;远程仓库名&gt; &lt;远程分支名&gt; :&lt;本地分支名&gt;<br></code></pre></td></tr></table></figure><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231020224632232.png" alt="image-20231020224632232"></p><ul><li><p>git branch 查看分支，其中用  *  表示的为当前分支</p></li><li><p>git branch brachName 新建分支</p></li><li><p>git checkout branchName 用来切换到相应的分支</p><ul><li>由于 git checkout 有双重含义（恢复文件到相应的状态 | 切换分支，在git的2.23中我们可以使用语义更加明确的 switch）</li><li>推荐使用 <code>git switch branchName</code></li></ul></li><li><p>如果一个分支不再需要，我们可以使用 git  brach -d 来删除分支</p></li></ul><p>使用 git merge 将不同的分支内容进行合并</p><p>可以使用 <code>git  log --graph --oneline --decorate --all</code> 来查看合并分支详情</p><h3 id="解决合并冲突"><a href="#解决合并冲突" class="headerlink" title="解决合并冲突"></a>解决合并冲突</h3><ul><li>当两个分支 没有冲突时，git merge branchName 会非常丝滑的完成，将branchName 中的文件和当前分支的文件进行合并；并且会自动提交</li><li>当两个分支发生冲突时，git merger branchName 会提示我们自动合并发生错误，需要我们手动合并；此时会将branchName中的数据写入当前发生冲突的文件的那个位置，并且显示的提示什么什么是当前分支的内容，而什么什么是branchName的内容，我们需要手动将冲突解决；并由我们手动 git add 和 git commit</li></ul><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021101119181.png" alt="image-20231021101119181"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021091150448.png" alt="image-20231021091150448"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021091243478.png" alt="image-20231021091243478"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021103001369.png" alt="image-20231021103001369"></p><p>使用 alias 来代替  git log –oneline –all –graph</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> graph=<span class="hljs-string">&quot; git log --oneline --all --graph&quot;</span><br></code></pre></td></tr></table></figure><h3 id="分支管理和工作流模型"><a href="#分支管理和工作流模型" class="headerlink" title="分支管理和工作流模型"></a>分支管理和工作流模型</h3><p><img src="C:\Users\Forrest\OneDrive\桌面\image-20231021104124209.png" alt="image-20231021104124209"></p><ul><li><code>master/main</code> 代表项目的稳定版本，每个提交到主分支的代码都应该是经过测试和审核的</li><li><code>dev</code> 用于日常开发。所有的功能分支、发布分支、修改分支都应该从开发分支派生。</li><li><code>feat</code> 用于开发单独的功能或特性。 每个功能分支都应该从开发分支派生，并在开发完成后合并回 <strong>dev</strong></li><li><code>relaese</code> 用于准备项目发布。发布分支应该从开发分支派生，并在准备好发布版本后合并回主分支和开发分支</li><li><code>hotfix</code> 用于修改主分支上的紧急问题。热修复分支应该从主分支派生，并在修复完成后，合并回主分支和开发分支</li></ul>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>王道计算机组成原理</title>
    <link href="/2023/10/18/%E7%8E%8B%E9%81%93%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <url>/2023/10/18/%E7%8E%8B%E9%81%93%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="done-1-10"><a href="#done-1-10" class="headerlink" title="done  1-10"></a>done  1-10</h2><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231018224323278.png" alt="image-20231018224323278"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231019091343092.png" alt="image-20231019091343092"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231019092506455.png" alt="image-20231019092506455"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231019092907677.png" alt="image-20231019092907677"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231019111416514.png" alt="image-20231019111416514"></p><h2 id="11-20"><a href="#11-20" class="headerlink" title="11-20"></a>11-20</h2><h3 id="带符号整数"><a href="#带符号整数" class="headerlink" title="带符号整数"></a>带符号整数</h3><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231020111421887.png" alt="image-20231020111421887"></p><h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231020111826533.png" alt="image-20231020111826533"></p><h3 id="源码和补码的快速转换"><a href="#源码和补码的快速转换" class="headerlink" title="源码和补码的快速转换"></a>源码和补码的快速转换</h3><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231020112159999.png" alt="image-20231020112159999"></p><h3 id="补码的运算"><a href="#补码的运算" class="headerlink" title="补码的运算"></a>补码的运算</h3><p>源码转补码 进行运算，运算结果再转为源码，得到运算结果（补码的运算过程中，符号位参与运算）</p><p>已知一数字的补码，求其负值的补码表示</p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231020120440469.png" alt="image-20231020120440469"></p><p><strong>重点</strong>  原码 和补码  补码与其负值的补码间的关系</p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231020121658541.png" alt="image-20231020121658541"></p><h3 id="各种码的基本特性比较"><a href="#各种码的基本特性比较" class="headerlink" title="各种码的基本特性比较"></a>各种码的基本特性比较</h3><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231020122354358.png" alt="image-20231020122354358"></p><h3 id="移码"><a href="#移码" class="headerlink" title="移码"></a>移码</h3><p>补码的基础上将符号位取反</p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021142921215.png" alt="image-20231021142921215"></p><h3 id="考题"><a href="#考题" class="headerlink" title="考题"></a><strong>考题</strong></h3><ol><li>求一个真值的原码 反码 补码 移码</li><li>用一个已知的原码 | 反码 | 补码 |  移码 求其真值</li></ol><p>其中 移码 求 真值的方法如下：</p><ul><li>正数相同</li><li>负数从第一个1开始，从右向左所有的<strong>数值位</strong>取反</li></ul><p><strong>eg:</strong></p><p>[x]补&#x3D;1000 1101 </p><p>从第一个1开始，从右向左所有的数值位取反 得: 1111 0011 ，得（64+32+16+2+1）*-1&#x3D;-115</p><h3 id="定点小数"><a href="#定点小数" class="headerlink" title="定点小数"></a>定点小数</h3><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021200644577.png" alt="image-20231021200644577"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021200631457.png" alt="image-20231021200631457"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021200919981.png" alt="image-20231021200919981"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021201754179.png" alt="image-20231021201754179"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021204937931.png" alt="image-20231021204937931"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021204923740.png" alt="image-20231021204923740"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231021205324117.png" alt="image-20231021205324117"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>腾讯云文件上传</title>
    <link href="/2023/10/18/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/10/18/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/document/product/598/37140">访问管理 子账号访问密钥管理-用户指南-文档中心-腾讯云 (tencent.com)</a></p><p><a href="https://www.vpsss.net/21684.html">腾讯云API密钥APPID&#x2F;SecretId&#x2F;SecretKey如何获取？-魏艾斯笔记 (vpsss.net)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Go实现验证码发送服务</title>
    <link href="/2023/10/17/%E4%BD%BF%E7%94%A8Go%E5%AE%9E%E7%8E%B0%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%91%E9%80%81%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/10/17/%E4%BD%BF%E7%94%A8Go%E5%AE%9E%E7%8E%B0%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%91%E9%80%81%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Go实现验证码发送服务"><a href="#使用Go实现验证码发送服务" class="headerlink" title="使用Go实现验证码发送服务"></a>使用Go实现验证码发送服务</h1><h2 id="邮箱服务配置"><a href="#邮箱服务配置" class="headerlink" title="邮箱服务配置"></a>邮箱服务配置</h2><p>这里我们选择qq邮箱作为案例</p><ul><li><a href="https://service.mail.qq.com/detail/0/141">帮助系统 (qq.com)</a></li></ul><h2 id="使用第三包实现邮件服务配置"><a href="#使用第三包实现邮件服务配置" class="headerlink" title="使用第三包实现邮件服务配置"></a>使用第三包实现邮件服务配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get github.com/jordan-wright/email<br></code></pre></td></tr></table></figure><h2 id="利用Redis中的string的可设置过期这一特性"><a href="#利用Redis中的string的可设置过期这一特性" class="headerlink" title="利用Redis中的string的可设置过期这一特性"></a>利用Redis中的string的可设置过期这一特性</h2><h3 id="配置-Redis"><a href="#配置-Redis" class="headerlink" title="配置 Redis"></a>配置 Redis</h3><h4 id="导入redis的包"><a href="#导入redis的包" class="headerlink" title="导入redis的包"></a>导入redis的包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get github.com/go-redis/redis/v8<br></code></pre></td></tr></table></figure><h4 id="初始化redis"><a href="#初始化redis" class="headerlink" title="初始化redis"></a>初始化redis</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> RDB = InitRedis(<span class="hljs-string">&quot;localhost:6379&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitRedis</span><span class="hljs-params">(addr <span class="hljs-type">string</span>)</span></span> *redis.Client &#123;<br>   <span class="hljs-keyword">return</span> redis.NewClient(&amp;redis.Options&#123;<br>      Addr:     addr,<br>      Password: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// no password set</span><br>      DB:       <span class="hljs-number">0</span>,  <span class="hljs-comment">// use default DB</span><br>   &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Go验证码服务逻辑"><a href="#Go验证码服务逻辑" class="headerlink" title="Go验证码服务逻辑"></a>Go验证码服务逻辑</h2><p>我们使用Redis存储<code>邮箱-验证码</code>的键值对，并设置过期时间。</p><p>如将过期时间设置为5分钟，那么在一对键值对插入数据库的5分钟后Redis就会将其删除。这样就实现了验证码在一定时间后过期失效的功能。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestEmail</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>e := email.NewEmail()<br>e.From = <span class="hljs-string">&quot;yansaitao@qq.com&quot;</span><br>e.To = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;2674978072@qq.com&quot;</span>&#125;<br><br>e.Subject = <span class="hljs-string">&quot;Validation Code Sending Test&quot;</span><br>e.HTML = []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&lt;h1&gt;Your Validation Code is &quot;</span> + helper.GenerateRandomCode() + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>)<br>err := e.SendWithTLS(<span class="hljs-string">&quot;smtp.qq.com:465&quot;</span>, smtp.PlainAuth(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;yansaitao@qq.com&quot;</span>, defined.MailPassword, <span class="hljs-string">&quot;smtp.qq.com&quot;</span>),<br>&amp;tls.Config&#123;InsecureSkipVerify: <span class="hljs-literal">true</span>, ServerName: <span class="hljs-string">&quot;smtp.qq.com&quot;</span>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>t.Fatal(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这里我们注意</strong></p><ul><li>smtp的端口号为25，但这里需要安全登录，所以我们需要使用 465端口来实现加密通信，以满足安全需求</li><li>defined.MailPassword 为第一步中设置qq邮箱，所得到的授权码</li></ul><p>生成随机验证码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateRandomCode</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br>s := <span class="hljs-string">&quot;1234567890&quot;</span><br>code := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">// import random seed, or that random code will always be the same one</span><br>rand.Seed(time.Now().UnixNano())<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; defined.CodeLength; i++ &#123;<br>code += <span class="hljs-type">string</span>(s[rand.Intn(<span class="hljs-built_in">len</span>(s))])<br>&#125;<br><span class="hljs-keyword">return</span> code<br>&#125;<br></code></pre></td></tr></table></figure><p>其中的 defined.CodeLength为自定义验证码长度</p><h2 id="具体的业务逻辑实现"><a href="#具体的业务逻辑实现" class="headerlink" title="具体的业务逻辑实现"></a>具体的业务逻辑实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *MailCodeSendRegisterLogic)</span></span> MailCodeSendRegister(req *types.MailCodeSendRequest) (resp *types.MailCodeSendReply, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// check whether the email has been registered</span><br>cnt, err := l.svcCtx.Engine.Where(<span class="hljs-string">&quot;email = ?&quot;</span>, req.Email).Count(<span class="hljs-built_in">new</span>(model.UserBasic))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> cnt &gt; <span class="hljs-number">0</span> &#123;<br>err = errors.New(<span class="hljs-string">&quot;this Email has registered before&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// generate random validation code</span><br>code := helper.GenerateRandomCode()<br><br><span class="hljs-comment">// store the email-code kv pair into</span><br>l.svcCtx.RDB.Set(l.ctx, req.Email, code, time.Second*time.Duration(defined.CodeExpirationTime))<br><br>err = helper.MailSendCode(req.Email, code)<br>resp = &amp;types.MailCodeSendReply&#123;Code: code&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中 CodeExpirationTime为过期的时间，单位为秒</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>邮箱</tag>
      
      <tag>web</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读Go专家编程】之String篇</title>
    <link href="/2023/10/15/%E3%80%90%E8%AF%BBGo%E4%B8%93%E5%AE%B6%E7%BC%96%E7%A8%8B%E3%80%91%E4%B9%8BString%E7%AF%87/"/>
    <url>/2023/10/15/%E3%80%90%E8%AF%BBGo%E4%B8%93%E5%AE%B6%E7%BC%96%E7%A8%8B%E3%80%91%E4%B9%8BString%E7%AF%87/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【奇思妙想】</title>
    <link href="/2023/10/14/%E3%80%90%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%E3%80%91/"/>
    <url>/2023/10/14/%E3%80%90%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%E3%80%91/</url>
    
    <content type="html"><![CDATA[<p>我想写一个图床</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【读Go专家编程】之Channel篇</title>
    <link href="/2023/10/13/%E3%80%90%E8%AF%BBGo%E4%B8%93%E5%AE%B6%E7%BC%96%E7%A8%8B%E3%80%91%E4%B9%8BChannel%E7%AF%87/"/>
    <url>/2023/10/13/%E3%80%90%E8%AF%BBGo%E4%B8%93%E5%AE%B6%E7%BC%96%E7%A8%8B%E3%80%91%E4%B9%8BChannel%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>channel是Golang在语言层面提供的goroutine间的通信方式，比Unix管道更易用也更轻便。</li><li>channel主要用于进程内各goroutine间通信，如果需要跨进程通信，建议使用分布式系统的方法来解决。</li></ul><h3 id="Chan-数据结构"><a href="#Chan-数据结构" class="headerlink" title="Chan 数据结构"></a>Chan 数据结构</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> hchan <span class="hljs-keyword">struct</span> &#123;<br>    qcount   <span class="hljs-type">uint</span>           <span class="hljs-comment">// 当前队列中剩余元素个数</span><br>    dataqsiz <span class="hljs-type">uint</span>           <span class="hljs-comment">// 环形队列长度，即可以存放的元素个数</span><br>    buf      unsafe.Pointer <span class="hljs-comment">// 环形队列指针</span><br>    elemsize <span class="hljs-type">uint16</span>         <span class="hljs-comment">// 每个元素的大小</span><br>    closed   <span class="hljs-type">uint32</span>            <span class="hljs-comment">// 标识关闭状态</span><br>    elemtype *_type         <span class="hljs-comment">// 元素类型</span><br>    sendx    <span class="hljs-type">uint</span>           <span class="hljs-comment">// 队列下标，指示元素写入时存放到队列中的位置</span><br>    recvx    <span class="hljs-type">uint</span>           <span class="hljs-comment">// 队列下标，指示元素从队列的该位置读出</span><br>    recvq    waitq          <span class="hljs-comment">// 等待读消息的goroutine队列</span><br>    sendq    waitq          <span class="hljs-comment">// 等待写消息的goroutine队列</span><br>    lock mutex              <span class="hljs-comment">// 互斥锁，chan不允许并发读写</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，Chan由 队列、信息类型、goroutine等灯盖队列组成</p><h4 id="环形队列"><a href="#环形队列" class="headerlink" title="环形队列"></a>环形队列</h4><p>chan内部实现了一个环形队列作为其缓冲区，队列的长度是创建Chan时指定的。</p><h4 id="等待队列"><a href="#等待队列" class="headerlink" title="等待队列"></a>等待队列</h4><ul><li>从Channel中读取数据时，如果缓冲区为空，此时的G被阻塞</li><li>从Channel中写数据时，如果缓冲区满了，此时的G被阻塞</li></ul><p>被阻塞的G会挂在Channel的等待队列中</p><ul><li>因为读阻塞的G会被向Channel写的G唤醒</li><li>因为写阻塞的G会被向Channel读的G唤醒</li></ul><h4 id="信息类型"><a href="#信息类型" class="headerlink" title="信息类型"></a>信息类型</h4><p>一个Channel只能传递一种类型的值，类型信息存储在hchan的数据结构中</p><ul><li>elemtype代表类型，用于数据传递过程中的赋值；</li><li>elemsize代表类型大小，用于在buf中定位元素位置。</li></ul><h4 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h4><ul><li>一个channel仅同时允许被一个goroutine读写</li></ul><h3 id="从Channel中写数据"><a href="#从Channel中写数据" class="headerlink" title="从Channel中写数据"></a>从Channel中写数据</h3><ul><li>如果等待接受队列recvq不为空，说明缓冲区没有数据或者没有缓冲区，此时直接将recvq 取出G,把数据写入其中，最后把该G唤醒，结束发送过程（Channel大小为0的情形）</li><li>如果缓冲区中还有空余位置，直接将数据写入缓存区，结束发送过程（Channel没满，还可以继续写）</li><li>如果缓冲区中没有空余位置，将待发送的数据写入G中，将当前G加入sendq，进入睡眠，等待读G唤醒（Channel满了）</li></ul><h3 id="从Channel中读数据"><a href="#从Channel中读数据" class="headerlink" title="从Channel中读数据"></a>从Channel中读数据</h3><ul><li>如果等待发送队列sendq不为空&amp;&amp;没有缓冲区，直接从sendq中读取G，把阻塞的G唤醒，结束读取过程（Channel大小为0的情形）</li><li>如果等待发送队列不为空，则缓冲区已满，从缓冲区首部读取出数据，把G中数据写入缓冲区尾部，等待发送队列的首部元素唤醒，结束读取过程（Channel满了，并且还有一大堆的G等待着给Channel发送数据，在那块阻塞等待着）</li><li>如果缓存区中有数据，则从缓冲区中读取数据，结束读取过程（Channel还没满，正常读取队列的首部）</li><li>如果sendq为空，等待，进入睡眠，等待被写G唤醒（没数据了，等着有人写数据进来）</li></ul><h3 id="Channel的用法"><a href="#Channel的用法" class="headerlink" title="Channel的用法"></a>Channel的用法</h3><ul><li>channel的只读和只写</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-comment">// &lt;-chan 只读</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readChan</span><span class="hljs-params">(chanName &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(&lt;-chanName)<br>&#125;<br><span class="hljs-comment">//chan&lt;- 只写</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeChan</span><span class="hljs-params">(chanName <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">int</span>)</span></span> &#123;<br>chanName &lt;- <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> mychan = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br>writeChan(mychan)<br>readChan(mychan)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>select</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addNumberToChan</span><span class="hljs-params">(chanName <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>chanName &lt;- <span class="hljs-number">1</span><br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> chan1 = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br><span class="hljs-keyword">var</span> chan2 = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br><span class="hljs-keyword">go</span> addNumberToChan(chan1)<br><span class="hljs-keyword">go</span> addNumberToChan(chan2)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> e := &lt;-chan1:<br>fmt.Printf(<span class="hljs-string">&quot;Get element from chan1: %d\n&quot;</span>, e)<br><span class="hljs-keyword">case</span> e := &lt;-chan2:<br>fmt.Printf(<span class="hljs-string">&quot;Get element from chan2: %d\n&quot;</span>, e)<br><span class="hljs-keyword">default</span>:<br>fmt.Printf(<span class="hljs-string">&quot;No element in chan1 and chan2.\n&quot;</span>)<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>程序中创建两个channel： chan1和chan2。函数addNumberToChan()函数会向两个channel中周期性写入数据。通过select可以监控两个channel，任意一个可读时就从其中读出数据。</p><ul><li>range</li></ul><p>通过range可以持续从Channel中读取数据，好像在遍历整个数组一样，当Channel中没有数据时，会阻塞当前G，与读channel一样处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chanRange</span><span class="hljs-params">(chanName <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> e := <span class="hljs-keyword">range</span> chanName &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;Get element from chan: %d\n&quot;</span>, e)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：如果向此channel写数据的goroutine退出时，系统检测到这种情况后会panic，否则range将会永久阻塞</p>]]></content>
    
    
    
    <tags>
      
      <tag>Go专家编程</tag>
      
      <tag>Channel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读Go专家编程】之Slice篇</title>
    <link href="/2023/10/13/%E3%80%90%E8%AF%BBGo%E4%B8%93%E5%AE%B6%E7%BC%96%E7%A8%8B%E3%80%91%E4%B9%8BSlice%E7%AF%87/"/>
    <url>/2023/10/13/%E3%80%90%E8%AF%BBGo%E4%B8%93%E5%AE%B6%E7%BC%96%E7%A8%8B%E3%80%91%E4%B9%8BSlice%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="Slice的实现原理"><a href="#Slice的实现原理" class="headerlink" title="Slice的实现原理"></a>Slice的实现原理</h2><p>Slice依托数组实现，底层数组对用户屏蔽，底层数组在Cap不足时，会自动扩容，生成一个新的Slice</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> slice <span class="hljs-keyword">struct</span> &#123;<br>    array unsafe.Pointer<br>    <span class="hljs-built_in">len</span>   <span class="hljs-type">int</span><br>    <span class="hljs-built_in">cap</span>   <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从数据结构看Slice很清晰, array指针指向底层数组，len表示切片长度，cap表示底层数组容量</p><h2 id="使用Array创建Slice"><a href="#使用Array创建Slice" class="headerlink" title="使用Array创建Slice"></a>使用Array创建Slice</h2><p>当我们用Array创建Slice时，所创建的Slice会和原数组公用一部分内存</p><p>eg: slice:&#x3D;<code>array[5:7]</code> </p><p><img src="https://static.sitestack.cn/projects/GoExpertProgramming/chapter01/images/slice-02-create_slice_from_array.png"></p><p><strong>注意</strong>：创建的Slice的cap为array的5那个位置开始到array的末尾位置（所以，slice的cap为9-5+1）</p><h2 id="Slice的扩容"><a href="#Slice的扩容" class="headerlink" title="Slice的扩容"></a>Slice的扩容</h2><p>当Cap小于Len时，元素插不进去了，所以开始扩容</p><h3 id="扩容策略"><a href="#扩容策略" class="headerlink" title="扩容策略"></a>扩容策略</h3><ul><li>如果原Slice容量小于1024，则新Slice容量将扩大为原来的2倍；</li><li>如果原Slice容量大于等于1024，则新Slice容量将扩大为原来的1.25倍；</li></ul><h3 id="append-的过程"><a href="#append-的过程" class="headerlink" title="append 的过程"></a>append 的过程</h3><ul><li>假如Slice容量够用，则将新元素追加进去，Slice.len++，返回原Slice</li><li>原Slice容量不够，则将Slice先扩容，扩容后得到新Slice</li><li>将新元素追加进新Slice，Slice.len++，返回新的Slice。</li></ul><h2 id="Slice-Copy"><a href="#Slice-Copy" class="headerlink" title="Slice Copy"></a>Slice Copy</h2><p>Go 标准库提供了 <code>copy</code> 函数，可以用于将一个切片的内容复制到另一个切片。这种方法允许你精确控制复制的元素数量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">originalSlice := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>copiedSlice := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 创建一个长度为3的目标切片</span><br><span class="hljs-built_in">copy</span>(copiedSlice, originalSlice[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]) <span class="hljs-comment">// 复制 originalSlice 中的第2到第4个元素到 copiedSlice</span><br></code></pre></td></tr></table></figure><h2 id="一种不太常见的slice用法"><a href="#一种不太常见的slice用法" class="headerlink" title="一种不太常见的slice用法"></a>一种不太常见的slice用法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">sliceA := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment">//length = 5; capacity = 10</span><br>sliceB := sliceA[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]         <span class="hljs-comment">//length = 5; capacity = 10</span><br>sliceC := sliceA[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>:<span class="hljs-number">5</span>]       <span class="hljs-comment">//length = 5; capacity = 5</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Slice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sort包的使用</title>
    <link href="/2023/09/23/Sort%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/23/Sort%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Sort包的简介"><a href="#Sort包的简介" class="headerlink" title="Sort包的简介"></a>Sort包的简介</h2><p>Go语言标准库sort包中实现了３种基本的排序算法：<strong>插入排序</strong>、<strong>快排和堆排序</strong>。和其他语言中一样， 这三种方式都是不公开的，他们只在sort包内部使用。所以用户在使用sort包进行排序时无需考虑使 用那种排序方式，sort.Interface定义的三个方法：获取数据集合长度的Len()方法、比较两个元素 大小的Less()方法和交换两个元素位置的Swap()方法，就可以顺利对数据集合进行排序。sort包会 根据实际数据<strong>自动</strong>选择高效的排序算法。</p><h2 id="Sort包的使用"><a href="#Sort包的使用" class="headerlink" title="Sort包的使用"></a>Sort包的使用</h2><blockquote><p>Sort中有给基本数据类型如 int float 和string自定义sort</p></blockquote><h3 id="int-的排序"><a href="#int-的排序" class="headerlink" title="[]int 的排序"></a>[]int 的排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">arr := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>&#125;<br>sort.Ints(arr)<br><br>sort.Sort(sort.IntSlice(arr))<br><span class="hljs-comment">//默认结果都是升序排列，如果我们想对一个 sortable object 进行逆序排序，可以自定义一个type。但 sort.Reverse 帮你省掉了这些代码。</span><br>sort.Sort(sort.Reverse(sort.IntSlice(arr)))<br></code></pre></td></tr></table></figure><h3 id="string的排序"><a href="#string的排序" class="headerlink" title="[]string的排序"></a>[]string的排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">ss := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;ff&quot;</span>, <span class="hljs-string">&quot;-1&quot;</span>&#125;<br>sort.Strings(ss)<br><br>sort.Sort(sort.StringSlice(ss))<br><br>sort.Sort(sort.Reverse(sort.StringSlice(ss)))<br></code></pre></td></tr></table></figure><h3 id="float64-的排序"><a href="#float64-的排序" class="headerlink" title="[]float64 的排序"></a>[]float64 的排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">fs := []<span class="hljs-type">float64</span>&#123;<span class="hljs-number">1.3</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">-90.2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;<br>sort.Float64s(fs)<br><span class="hljs-comment">//查看是否已经排序成功（从小到大）</span><br>sort.IsSorted(sort.Float64Slice(fs))<br><br>sort.Sort(sort.Reverse(sort.Float64Slice(fs)))<br><br></code></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>go语言中的二分查找算法用来搜索指定<strong>已经排完序</strong>的切片[0:n]中值为Value的元素的<strong>下标</strong>，如果有多个相同Value的元素，则返回<strong>第一个</strong>值为Value的元素的下标；如果不存值为Value的元素，则返回切片的长度 <strong>n</strong> </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">nums := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;<br><br><span class="hljs-comment">// 要查找的值</span><br>target := <span class="hljs-number">7</span><br><br><span class="hljs-comment">// 使用Search函数查找值的索引</span><br>index := sort.Search(<span class="hljs-built_in">len</span>(nums), <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> nums[i] &gt; target<br>&#125;)<br><br><span class="hljs-comment">// 检查是否找到</span><br><span class="hljs-keyword">if</span> index &lt; <span class="hljs-built_in">len</span>(nums) &amp;&amp; nums[index] == target &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d 找到在索引 %d 处\n&quot;</span>, target, index)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d 未找到\n&quot;</span>, target)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h3><blockquote><p>自定义sort.Interface排序 ,此时我们 需要重写 Swap Less Len 方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Peak <span class="hljs-keyword">struct</span> &#123;<br>Name   <span class="hljs-type">string</span><br>Height <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Peaks []Peak<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ps Peaks)</span></span> Len() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(ps)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ps Peaks)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> ps[i].Height &lt; ps[j].Height<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ps Peaks)</span></span> Swap(i, j <span class="hljs-type">int</span>) &#123;<br>ps[i], ps[j] = ps[j], ps[i]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ps := Peaks&#123;&#123;<br>Name:   <span class="hljs-string">&quot;mountain-1&quot;</span>,<br>Height: <span class="hljs-number">1</span>,<br>&#125;, &#123;<br>Name:   <span class="hljs-string">&quot;mountain-2&quot;</span>,<br>Height: <span class="hljs-number">2</span>,<br>&#125;, &#123;<br>Name:   <span class="hljs-string">&quot;mountain-10&quot;</span>,<br>Height: <span class="hljs-number">-100</span>,<br>&#125;&#125;<br>fmt.Println(<span class="hljs-string">&quot;before &quot;</span>, ps)<br>sort.Sort(ps)<br>fmt.Println(<span class="hljs-string">&quot;after &quot;</span>, ps)<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>使用 sort.Slice</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Peak <span class="hljs-keyword">struct</span> &#123;<br>Name   <span class="hljs-type">string</span><br>Height <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Peaks []Peak<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ps Peaks)</span></span> Len() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(ps)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ps Peaks)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> ps[i].Height &lt; ps[j].Height<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ps Peaks)</span></span> Swap(i, j <span class="hljs-type">int</span>) &#123;<br>ps[i], ps[j] = ps[j], ps[i]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ps := Peaks&#123;&#123;<br>Name:   <span class="hljs-string">&quot;mountain-1&quot;</span>,<br>Height: <span class="hljs-number">1</span>,<br>&#125;, &#123;<br>Name:   <span class="hljs-string">&quot;mountain-2&quot;</span>,<br>Height: <span class="hljs-number">2</span>,<br>&#125;, &#123;<br>Name:   <span class="hljs-string">&quot;mountain-10&quot;</span>,<br>Height: <span class="hljs-number">-100</span>,<br>&#125;&#125;<br>fmt.Println(<span class="hljs-string">&quot;Before &quot;</span>, ps)<br>sort.Slice(ps, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i, j <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> ps[i].Height &lt;= ps[j].Height<br>&#125;)<br>fmt.Println(<span class="hljs-string">&quot;After &quot;</span>, ps)<br><br>fmt.Println(<span class="hljs-string">&quot;----------------&quot;</span>)<br>sort.Slice(ps, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i, j <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> ps[i].Height &gt;= ps[j].Height<br>&#125;)<br>fmt.Println(<span class="hljs-string">&quot;after reverse &quot;</span>, ps)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>-golang -sort包的使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang中的GC</title>
    <link href="/2023/09/22/Golang%E4%B8%AD%E7%9A%84GC/"/>
    <url>/2023/09/22/Golang%E4%B8%AD%E7%9A%84GC/</url>
    
    <content type="html"><![CDATA[<p>三色标记</p><p>混合写屏障</p><p>Mark Sweep的缺点</p><ul><li>STW，stop the world；让程序暂停，程序出现卡顿 **(重要问题)**；</li><li>标记需要扫描整个heap；</li><li>清除数据会产生heap碎片。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【2023年目标】</title>
    <link href="/2023/09/17/%E3%80%902023%E5%B9%B4%E7%9B%AE%E6%A0%87%E3%80%91/"/>
    <url>/2023/09/17/%E3%80%902023%E5%B9%B4%E7%9B%AE%E6%A0%87%E3%80%91/</url>
    
    <content type="html"><![CDATA[<ul><li><input disabled="" type="checkbox"> leetcode 400+</li><li><input disabled="" type="checkbox"> 项目 3+ 一个单体web 一个微服务web  一个轮子</li><li><input disabled="" type="checkbox"> 跑量 2000+</li><li><input checked="" disabled="" type="checkbox"> 阅读书籍 5+</li><li><input disabled="" type="checkbox"> 写blog 20+</li><li><input disabled="" type="checkbox"> 完成基本的计算机四大件的复习</li><li><input disabled="" type="checkbox"> 找一个女朋友</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>golang代码积累</title>
    <link href="/2023/09/13/golang%E4%BB%A3%E7%A0%81%E7%A7%AF%E7%B4%AF/"/>
    <url>/2023/09/13/golang%E4%BB%A3%E7%A0%81%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><ul><li><p>str1+str2</p></li><li><p>fmt.Sprintf(“%s%s”,str1,str2)</p></li><li><p>strings.Builder</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">str1 := <span class="hljs-string">&quot;str1&quot;</span><br>str2 := <span class="hljs-string">&quot;str2&quot;</span><br><br>fmt.Println(str1 + str2)<br><br>fmt.Println(fmt.Sprintf(<span class="hljs-string">&quot;%s%s&quot;</span>, str1, str2))<br><br><span class="hljs-keyword">var</span> stringbuilder strings.Builder<br>stringbuilder.WriteString(str1)<br><br>stringbuilder.WriteString(str2)<br><br>fmt.Println(stringbuilder.String())<br></code></pre></td></tr></table></figure><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Stack <span class="hljs-keyword">struct</span> &#123;<br>items []<span class="hljs-keyword">interface</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Stack)</span></span> Push(item <span class="hljs-keyword">interface</span>&#123;&#125;) &#123;<br>s.items = <span class="hljs-built_in">append</span>(s.items, item)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Stack)</span></span> Pop() <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s.items) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>item := s.items[<span class="hljs-built_in">len</span>(s.items)<span class="hljs-number">-1</span>]<br>s.items = s.items[:<span class="hljs-built_in">len</span>(s.items)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">return</span> item<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Stack)</span></span> Peek() <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s.items) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> s.items[<span class="hljs-built_in">len</span>(s.items)<span class="hljs-number">-1</span>]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Stack)</span></span> IsEmpty() <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s.items) == <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Stack)</span></span> Size() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s.items)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>stack := Stack&#123;&#125;<br><br>stack.Push(<span class="hljs-number">1</span>)<br>stack.Push(<span class="hljs-number">2</span>)<br>stack.Push(<span class="hljs-number">3</span>)<br><br>fmt.Println(<span class="hljs-string">&quot;Stack:&quot;</span>, stack.items)<br>fmt.Println(<span class="hljs-string">&quot;Top:&quot;</span>, stack.Peek())<br>fmt.Println(<span class="hljs-string">&quot;Pop:&quot;</span>, stack.Pop())<br>fmt.Println(<span class="hljs-string">&quot;Stack:&quot;</span>, stack.items)<br>fmt.Println(<span class="hljs-string">&quot;Is Empty?&quot;</span>, stack.IsEmpty())<br>fmt.Println(<span class="hljs-string">&quot;Size:&quot;</span>, stack.Size())<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Queue <span class="hljs-keyword">struct</span> &#123;<br>items []<span class="hljs-keyword">interface</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span></span> Enqueue(item <span class="hljs-keyword">interface</span>&#123;&#125;) &#123;<br>q.items = <span class="hljs-built_in">append</span>(q.items, item)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span></span> Dequeue() <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q.items) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>front := q.items[<span class="hljs-number">0</span>]<br>q.items = q.items[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">return</span> front<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span></span> Front() <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q.items) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> q.items[<span class="hljs-number">0</span>]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span></span> IsEmpty() <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(q.items) == <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span></span> Size() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(q.items)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>queue := Queue&#123;&#125;<br><br>queue.Enqueue(<span class="hljs-number">1</span>)<br>queue.Enqueue(<span class="hljs-number">2</span>)<br>queue.Enqueue(<span class="hljs-number">3</span>)<br><br>fmt.Println(<span class="hljs-string">&quot;Queue:&quot;</span>, queue.items)<br>fmt.Println(<span class="hljs-string">&quot;Front:&quot;</span>, queue.Front())<br>fmt.Println(<span class="hljs-string">&quot;Dequeue:&quot;</span>, queue.Dequeue())<br>fmt.Println(<span class="hljs-string">&quot;Queue:&quot;</span>, queue.items)<br>fmt.Println(<span class="hljs-string">&quot;Is Empty?&quot;</span>, queue.IsEmpty())<br>fmt.Println(<span class="hljs-string">&quot;Size:&quot;</span>, queue.Size())<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Priority-Queue"><a href="#Priority-Queue" class="headerlink" title="Priority Queue"></a>Priority Queue</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;container/heap&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Item <span class="hljs-keyword">struct</span> &#123;<br>value    <span class="hljs-type">string</span><br>priority <span class="hljs-type">int</span><br>&#125;<br><span class="hljs-keyword">type</span> PriorityQueue []*Item<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pq PriorityQueue)</span></span> Len() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(pq)<br>&#125;<br><span class="hljs-comment">// &lt; 表示最小堆 返回堆顶，即priority最小的值</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pq PriorityQueue)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> pq[i].priority &lt; pq[j].priority<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pq PriorityQueue)</span></span> Swap(i, j <span class="hljs-type">int</span>) &#123;<br>pq[i], pq[j] = pq[j], pq[i]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pq *PriorityQueue)</span></span> Push(x <span class="hljs-keyword">interface</span>&#123;&#125;) &#123;<br>item := x.(*Item)<br>*pq = <span class="hljs-built_in">append</span>(*pq, item)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pq *PriorityQueue)</span></span> Pop() <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br>old := *pq<br>n := <span class="hljs-built_in">len</span>(old)<br>item := old[n<span class="hljs-number">-1</span>]<br>*pq = old[<span class="hljs-number">0</span> : n<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">return</span> item<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>pq := <span class="hljs-built_in">make</span>(PriorityQueue, <span class="hljs-number">0</span>)<br><br>heap.Init(&amp;pq)<br>items := []*Item&#123;<br>&#123;<br>value:    <span class="hljs-string">&quot;C&quot;</span>,<br>priority: <span class="hljs-number">3</span>,<br>&#125;,<br>&#123;<br>value:    <span class="hljs-string">&quot;A&quot;</span>,<br>priority: <span class="hljs-number">1</span>,<br>&#125;,<br>&#123;<br>value:    <span class="hljs-string">&quot;B&quot;</span>,<br>priority: <span class="hljs-number">2</span>,<br>&#125;,<br>&#125;<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> items &#123;<br>heap.Push(&amp;pq, item)<br>&#125;<br><br><span class="hljs-keyword">for</span> pq.Len() &gt; <span class="hljs-number">0</span> &#123;<br>item := heap.Pop(&amp;pq).(*Item)<br>fmt.Printf(<span class="hljs-string">&quot;%s( Priority:%d)&quot;</span>, item.value, item.priority)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">/**<br> * Definition for a binary tree node.<br> * type TreeNode struct &#123;<br> *     Val int<br> *     Left *TreeNode<br> *     Right *TreeNode<br> * &#125;<br> */<br></code></pre></td></tr></table></figure><h4 id="version-1"><a href="#version-1" class="headerlink" title="version 1"></a>version 1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(root *TreeNode)</span></span>(res []<span class="hljs-type">int</span>)&#123;<br>    <span class="hljs-keyword">if</span> root==<span class="hljs-literal">nil</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    cur:=<span class="hljs-built_in">make</span>([]*TreeNode,<span class="hljs-number">0</span>)<br>    cur=<span class="hljs-built_in">append</span>(cur,root)<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(cur)&gt;<span class="hljs-number">0</span>&#123;<br>        nodes:=<span class="hljs-built_in">make</span>([]*TreeNode,<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> _,node:=<span class="hljs-keyword">range</span> cur&#123;<br>            res=<span class="hljs-built_in">append</span>(res,node.Val)<br>            <span class="hljs-keyword">if</span> node.Left!=<span class="hljs-literal">nil</span>&#123;<br>                nodes=<span class="hljs-built_in">append</span>(nodes,node.Left)<br>            &#125;<br>            <span class="hljs-keyword">if</span> node.Right!=<span class="hljs-literal">nil</span>&#123;<br>                nodes=<span class="hljs-built_in">append</span>(nodes,node.Right)<br>            &#125;<br>        &#125;<br>        cur=nodes<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="version-2"><a href="#version-2" class="headerlink" title="version 2"></a>version 2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(root *TreeNode)</span></span>(res [][]<span class="hljs-type">int</span>)&#123;<br>    <span class="hljs-keyword">if</span> root==<span class="hljs-literal">nil</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    cur:=<span class="hljs-built_in">make</span>([]*TreeNode,<span class="hljs-number">0</span>)<br>    <span class="hljs-comment">//将首元节点插入</span><br>    cur=<span class="hljs-built_in">append</span>(cur,root)<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(cur)&gt;<span class="hljs-number">0</span>&#123;<br>        tempRes:=<span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>,<span class="hljs-number">0</span>)<br>        nodes:=<span class="hljs-built_in">make</span>([]*TreeNode,<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> _,node:=<span class="hljs-keyword">range</span> cur&#123;<br>            tempRes=<span class="hljs-built_in">append</span>(tempRes,node.Val)<br>            <span class="hljs-keyword">if</span> node.Left!=<span class="hljs-literal">nil</span>&#123;<br>                nodes=<span class="hljs-built_in">append</span>(nodes,node.Left)<br>            &#125;<br>            <span class="hljs-keyword">if</span> node.Right!=<span class="hljs-literal">nil</span>&#123;<br>                nodes=<span class="hljs-built_in">append</span>(nodes,node.Right)<br>            &#125;<br>        &#125;<br>        res=<span class="hljs-built_in">append</span>(res,tempRes)<br>        cur=nodes<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="version-3"><a href="#version-3" class="headerlink" title="version 3"></a>version 3</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(root *TreeNode)</span></span> (res [][]<span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> [][]<span class="hljs-type">int</span>&#123;&#125;<br>&#125;<br>cur := <span class="hljs-built_in">make</span>([]*TreeNode,<span class="hljs-number">0</span>)<br>cur=<span class="hljs-built_in">append</span>(cur,root)<br>cnt := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(cur) &gt; <span class="hljs-number">0</span> &#123;<br>arr := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>)<br>nodes := <span class="hljs-built_in">make</span>([]*TreeNode, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, node := <span class="hljs-keyword">range</span> cur &#123;<br><span class="hljs-keyword">if</span> node.Left != <span class="hljs-literal">nil</span> &#123;<br>nodes = <span class="hljs-built_in">append</span>(nodes, node.Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.Right != <span class="hljs-literal">nil</span> &#123;<br>nodes = <span class="hljs-built_in">append</span>(nodes, node.Right)<br>&#125;<br>arr = <span class="hljs-built_in">append</span>(arr, node.Val)<br>&#125;<br><span class="hljs-keyword">if</span> cnt==<span class="hljs-number">-1</span>&#123;<br><span class="hljs-keyword">for</span> i,Len:=<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(arr);i&lt;<span class="hljs-built_in">len</span>(arr)/<span class="hljs-number">2</span>;i++&#123;<br>arr[Len<span class="hljs-number">-1</span>-i],arr[i]=arr[i],arr[Len<span class="hljs-number">-1</span>-i]<br>&#125;<br>&#125;<br>cnt*=<span class="hljs-number">-1</span><br>res=<span class="hljs-built_in">append</span>(res,arr)<br>cur = nodes<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="检查是否为二叉搜索树"><a href="#检查是否为二叉搜索树" class="headerlink" title="检查是否为二叉搜索树"></a>检查是否为二叉搜索树</h4><h3 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h3><h4 id="version-1-递归"><a href="#version-1-递归" class="headerlink" title="version 1 递归"></a>version 1 递归</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(root *TreeNode)</span></span> (res []<span class="hljs-type">int</span>) &#123;<br><span class="hljs-comment">//边界条件</span><br><span class="hljs-comment">//自定义函数</span><br>    re := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(root *TreeNode)</span></span> &#123;&#125;<br>re = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(root *TreeNode)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;<br>re(root.Left)<br>&#125;<br>res = <span class="hljs-built_in">append</span>(res, root.Val)<br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>re(root.Right)<br>&#125;<br>&#125;<br>re(root)<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="version-2-迭代"><a href="#version-2-迭代" class="headerlink" title="version 2 迭代"></a>version 2 迭代</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(root *TreeNode)</span></span><span class="hljs-type">bool</span>&#123;<br>    stack:=<span class="hljs-built_in">make</span>([]*TreeNode,<span class="hljs-number">0</span>)<br>    inorder:=math.MinInt64<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack)&gt;<span class="hljs-number">0</span>||root!=<span class="hljs-literal">nil</span>&#123;<br>        <span class="hljs-keyword">for</span> root!=<span class="hljs-literal">nil</span>&#123;<br>            stack=<span class="hljs-built_in">append</span>(stack,root)<br>            root=root.Left<br>        &#125;<br>        root=stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>        stack=stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>        <span class="hljs-keyword">if</span> root.Val&lt;=inorder&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        inorder=root.Val<br>        root=root.Right<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="计算二叉树的深度"><a href="#计算二叉树的深度" class="headerlink" title="计算二叉树的深度"></a>计算二叉树的深度</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(a,b <span class="hljs-type">int</span>)</span></span><span class="hljs-type">int</span>&#123;<br>    <span class="hljs-keyword">if</span> a&gt;b&#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(root *TreeNode)</span></span><span class="hljs-type">int</span>&#123;<br>    <span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(root *TreeNode)</span></span><span class="hljs-type">int</span><br>    dfs=<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(root *TreeNode)</span></span><span class="hljs-type">int</span>&#123;<br>        <span class="hljs-keyword">if</span> root==<span class="hljs-literal">nil</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> max(dfs(root.Left),dfs(root.Right))+<span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> dfs(root)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="平衡二叉树的判断"><a href="#平衡二叉树的判断" class="headerlink" title="平衡二叉树的判断"></a>平衡二叉树的判断</h3><p>平衡二叉树中的每一个节点的左右子树的高度差不超过2</p><p>思路：在每一个节点求得其左右子树的高度，判断是否符合平衡二叉树的要求</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(a,b <span class="hljs-type">int</span>)</span></span><span class="hljs-type">int</span>&#123;<br><span class="hljs-keyword">if</span> a&gt;b&#123;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getDepth</span><span class="hljs-params">(root *TreeNode)</span></span><span class="hljs-type">int</span>&#123;<br><span class="hljs-keyword">if</span> root==<span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">return</span> max(getDepth(root.Left),getDepth(root.Right))+<span class="hljs-number">1</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">abs</span><span class="hljs-params">(a,b <span class="hljs-type">int</span>)</span></span><span class="hljs-type">int</span>&#123;<br><span class="hljs-keyword">if</span> a&gt;b&#123;<br><span class="hljs-keyword">return</span> a-b<br>&#125;<br><span class="hljs-keyword">return</span> b-a<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(root *TreeNode)</span></span><span class="hljs-type">bool</span>&#123;<br><span class="hljs-keyword">if</span> root==<span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> isBalanced(root.Left)&amp;&amp;<br>isBalanced(root.Right)&amp;&amp;abs(getDepth(root.Left),getDepth(root.Right))&lt;<span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h3><p>要求：不创建任何新的节点，只能调整树中节点指针的指向,最终形成一个有序的双向链表，返回头结点</p><p>思路：因为用中序遍历二叉搜索树，得到的是一个从小到大的有序结果，所以我们可以利用中序遍历的特性，在其中把节点与节点连接起来，最终就可以得到一个有序双向链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    Node* head=<span class="hljs-literal">nullptr</span>;<br>    Node *prev=<span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(Node* cur)</span></span>&#123;<br>       <span class="hljs-keyword">if</span>(cur==<span class="hljs-literal">NULL</span>)&#123;<br>           <span class="hljs-keyword">return</span> ;<br>       &#125;<br>        <span class="hljs-built_in">dfs</span>(cur-&gt;left);<br>        <span class="hljs-comment">//找到tree中最小值</span><br>        <span class="hljs-keyword">if</span> (head==<span class="hljs-literal">NULL</span>)&#123;<br>            head=cur;<br>            prev=cur;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//找到较小值</span><br>            prev-&gt;right=cur;<br>            cur-&gt;left=prev;<br>            prev=cur;<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(cur-&gt;right);<br>    &#125;<br>    <span class="hljs-function">Node* <span class="hljs-title">treeToDoublyList</span><span class="hljs-params">(Node* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root==<span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-comment">//双向链表收尾相连</span><br>        prev-&gt;right=head;<br>        head-&gt;left=prev;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="重构二叉树"><a href="#重构二叉树" class="headerlink" title="重构二叉树"></a><strong>重构二叉树</strong></h3><p>根据前序遍历和中序遍历重构 得到后序遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">buildTree</span><span class="hljs-params">(pr []<span class="hljs-type">int</span>, in []<span class="hljs-type">int</span>)</span></span> (head *TreeNode) &#123;<br><span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(pr []<span class="hljs-type">int</span>, in []<span class="hljs-type">int</span>, l0 <span class="hljs-type">int</span>, r0 <span class="hljs-type">int</span>, l1 <span class="hljs-type">int</span>, r1 <span class="hljs-type">int</span>)</span></span> *TreeNode<br><span class="hljs-comment">// 用map来快速得到中序遍历中pr[l0]的位置</span><br>    pos := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> idx, v := <span class="hljs-keyword">range</span> in &#123;<br>pos[v] = idx<br>&#125;<br>dfs = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(pr []<span class="hljs-type">int</span>, in []<span class="hljs-type">int</span>, l0 <span class="hljs-type">int</span>, r0 <span class="hljs-type">int</span>, l1 <span class="hljs-type">int</span>, r1 <span class="hljs-type">int</span>)</span></span> *TreeNode &#123;<br><span class="hljs-keyword">if</span> l0 &gt; r0 &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br>root := &amp;TreeNode&#123;Val: pr[l0]&#125;<br>idx := pos[pr[l0]]<br>lsize := idx - l1<br><span class="hljs-comment">//rsize:=r1-idx</span><br><span class="hljs-comment">// [l0+1,lsize+l0] [lsize+l0+1,r0]</span><br><span class="hljs-comment">// [l1,idx-1] [addr+1,r1]</span><br><br>root.Left = dfs(pr, in, l0+<span class="hljs-number">1</span>, lsize+l0, l1, idx<span class="hljs-number">-1</span>)<br>root.Right = dfs(pr, in, lsize+l0+<span class="hljs-number">1</span>, r0, idx+<span class="hljs-number">1</span>, r1)<br><span class="hljs-keyword">return</span> root<br>&#125;<br><br><span class="hljs-keyword">return</span> dfs(pr, in, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(pr)<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(in)<span class="hljs-number">-1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二叉搜索树的后序遍历"><a href="#二叉搜索树的后序遍历" class="headerlink" title="二叉搜索树的后序遍历"></a>二叉搜索树的后序遍历</h3><p>后序遍历中的最后一个结果是该遍历结果的根节点，可以从头遍历 遍历结果，查看小于根节点的元素，再往后遍历大于根节点的元素，如果其中有比根节点小的元素，则此二叉树不是二叉搜索树</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">verifyPostorder</span><span class="hljs-params">(postorder []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arr []<span class="hljs-type">int</span>, l, r <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span><br><br>dfs = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arr []<span class="hljs-type">int</span>, l, r <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> r &lt;= l &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>mid:=arr[r]<br><span class="hljs-keyword">var</span> p <span class="hljs-type">int</span>=l<br><span class="hljs-keyword">for</span> arr[p]&lt;mid&#123;<br>p++<br>&#125;<br><br><span class="hljs-keyword">var</span> idx <span class="hljs-type">int</span>=p<br><span class="hljs-keyword">for</span> arr[p]&gt;mid&#123;<br>p++<br>&#125;<br><span class="hljs-keyword">return</span> p==r&amp;&amp;dfs(arr,l,idx<span class="hljs-number">-1</span>)&amp;&amp;dfs(arr,idx,r<span class="hljs-number">-1</span>)<br>&#125;<br><span class="hljs-keyword">return</span> dfs(postorder, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(postorder)<span class="hljs-number">-1</span>)<br>&#125;   <br></code></pre></td></tr></table></figure><h3 id="lowerbit的求法"><a href="#lowerbit的求法" class="headerlink" title="lowerbit的求法"></a>lowerbit的求法</h3><p>lowerbit&#x3D;n&amp;(-n)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//快速求得一个数在二进制中每一个1所在位置代表的值大小</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hammingWeight</span><span class="hljs-params">(num <span class="hljs-type">uint32</span>)</span></span> (cnt <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">for</span> num &gt; <span class="hljs-number">0</span> &#123;<br>lowbit := num &amp; (-num)<br>num -= lowbit<br>cnt++<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="位运算专题"><a href="#位运算专题" class="headerlink" title="位运算专题"></a>位运算专题</h2><h3 id="抑或的用法"><a href="#抑或的用法" class="headerlink" title="抑或的用法"></a>抑或的用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 其中抑或相当于一个不会进位的加法</span><br>1^1=0<br>0^1=1<br>0^0=0<br><br><span class="hljs-comment">#两个相同的数向抑或，结果为0</span><br><span class="hljs-comment">#一个数与0向抑或的结果是原数</span><br>a^a=0<br>0^a=a<br><br>a^b=c<br>c^a=b<br>b^c=a<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/description/">1442. 形成两个异或相等数组的三元组数目 - 力扣（LeetCode）</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//leetcode 1442</span><br><span class="hljs-comment">//</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countTriplets</span><span class="hljs-params">(arr []<span class="hljs-type">int</span>)</span></span> (cnt <span class="hljs-type">int</span>) &#123;<br>n := <span class="hljs-built_in">len</span>(arr)<br>orres := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n+<span class="hljs-number">1</span>)<br><br>orres[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> idx, v := <span class="hljs-keyword">range</span> arr &#123;<br>orres[idx+<span class="hljs-number">1</span>] = orres[idx] ^ v<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= n; i++ &#123;<br><span class="hljs-keyword">for</span> j := i + <span class="hljs-number">1</span>; j &lt;=n &amp;&amp; i &lt; j; j++ &#123;<br><span class="hljs-keyword">if</span> orres[j]^orres[i<span class="hljs-number">-1</span>] == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">//i j 可以</span><br>cnt += j - i <br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-xor-of-two-numbers-in-an-array/">421. 数组中两个数的最大异或值 - 力扣（LeetCode）</a></p><p>构造 字典树 快速知晓数组中的其他数字的每一位的bit的大小，利用贪心，1^0&#x3D;1</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(a,b <span class="hljs-type">int</span>)</span></span><span class="hljs-type">int</span>&#123;<br><span class="hljs-keyword">if</span> a&gt;b&#123;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-keyword">const</span> heightbit=<span class="hljs-number">30</span><br><br><span class="hljs-keyword">type</span> trie <span class="hljs-keyword">struct</span> &#123;<br>left,right *trie<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *trie)</span></span> add(num <span class="hljs-type">int</span>)&#123;<br>cur:=t<br><span class="hljs-keyword">for</span> i:=heightbit;i&gt;=<span class="hljs-number">0</span>;i--&#123;<br>bit:=(num&gt;&gt;i)&amp;<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> bit==<span class="hljs-number">0</span>&#123;<br><span class="hljs-keyword">if</span> cur.left==<span class="hljs-literal">nil</span>&#123;<br>cur.left=&amp;trie&#123;&#125;<br>                cur=cur.left<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>cur=cur.left<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> cur.right==<span class="hljs-literal">nil</span>&#123;<br>cur.right=&amp;trie&#123;&#125;<br>                cur=cur.right<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>cur=cur.right<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *trie)</span></span>check(num <span class="hljs-type">int</span>)(res <span class="hljs-type">int</span>)&#123;<br>cur:=t<br><span class="hljs-keyword">for</span> i:=heightbit;i&gt;=<span class="hljs-number">0</span>;i--&#123;<br>b:=(num&gt;&gt;i)&amp;<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> b==<span class="hljs-number">0</span>&#123;<br><span class="hljs-comment">//需要1</span><br><span class="hljs-keyword">if</span> cur.right!=<span class="hljs-literal">nil</span>&#123;<br>res|=(<span class="hljs-number">1</span>&lt;&lt;i)<br>                cur=cur.right<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                cur=cur.left<br>            &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//需要0</span><br><span class="hljs-keyword">if</span> cur.left!=<span class="hljs-literal">nil</span>&#123;<br>res|=(<span class="hljs-number">1</span>&lt;&lt;i)<br>                cur=cur.left<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                cur=cur.right<br>            &#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findMaximumXOR</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> (x <span class="hljs-type">int</span>) &#123;<br>root := *&amp;trie&#123;&#125;<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">1</span>;i&lt;<span class="hljs-built_in">len</span>(nums);i++&#123;<br>root.add(nums[i<span class="hljs-number">-1</span>])<br>x = max(x, root.check(nums[i]))<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【redis】ZSet的使用</title>
    <link href="/2023/09/13/%E3%80%90redis%E3%80%91ZSet%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/13/%E3%80%90redis%E3%80%91ZSet%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="准备动作"><a href="#准备动作" class="headerlink" title="准备动作"></a>准备动作</h2><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 6379:6379 --name redis redis<br></code></pre></td></tr></table></figure><h3 id="查看docke状态"><a href="#查看docke状态" class="headerlink" title="查看docke状态"></a>查看docke状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps<br></code></pre></td></tr></table></figure><h3 id="进入redis-cli"><a href="#进入redis-cli" class="headerlink" title="进入redis-cli"></a>进入redis-cli</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli<br></code></pre></td></tr></table></figure><h2 id="Zset的基本指令集合"><a href="#Zset的基本指令集合" class="headerlink" title="Zset的基本指令集合"></a>Zset的基本指令集合</h2><h3 id="ZADD添加元素-O-log-N"><a href="#ZADD添加元素-O-log-N" class="headerlink" title="ZADD添加元素 O(log(N))"></a><strong>ZADD</strong>添加元素 O(log(N))</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs redis">zadd myzset 1 &quot;1&quot;<br></code></pre></td></tr></table></figure><h3 id="ZREM-删除元素"><a href="#ZREM-删除元素" class="headerlink" title="ZREM 删除元素"></a><strong>ZREM</strong> 删除元素</h3><p>​O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZREM myzset &quot;one&quot;<br></code></pre></td></tr></table></figure><h3 id="ZCARD查看zset的元素个数O-1）"><a href="#ZCARD查看zset的元素个数O-1）" class="headerlink" title="ZCARD查看zset的元素个数O(1）"></a><strong>ZCARD</strong>查看zset的元素个数O(1）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zcard myzset <br></code></pre></td></tr></table></figure><h3 id="ZCOUNT-查看zset区间的与元素个数（默认为左闭右闭）O-log-N"><a href="#ZCOUNT-查看zset区间的与元素个数（默认为左闭右闭）O-log-N" class="headerlink" title="ZCOUNT 查看zset区间的与元素个数（默认为左闭右闭）O(log(N))"></a><strong>ZCOUNT</strong> 查看zset区间的与元素个数（默认为左闭右闭）O(log(N))</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zcount myzset 1 3#查看大于等于1小于等于3的<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zcount myzset (1 3 #查看大于1小于等于3的<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zcount myzset -inf +inf <br></code></pre></td></tr></table></figure><h3 id="ZINCRBY给元素添加值O-log-N"><a href="#ZINCRBY给元素添加值O-log-N" class="headerlink" title="ZINCRBY给元素添加值O(log(N)"></a><strong>ZINCRBY</strong>给元素添加值O(log(N)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZINCRBY myzset -10 &quot;one&quot;<br></code></pre></td></tr></table></figure><h3 id="ZRANK-O-log-N"><a href="#ZRANK-O-log-N" class="headerlink" title="ZRANK O(log(N))"></a>ZRANK O(log(N))</h3><ul><li><p>键存在，返回排名（默认为从小到大排序），最小的排序名词为（0）</p></li><li><p>键不存在，返回nil</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zrank myzset &quot;one&quot;<br></code></pre></td></tr></table></figure></li></ul><h3 id="ZRANGE查询区间值的元素O-log-N-M"><a href="#ZRANGE查询区间值的元素O-log-N-M" class="headerlink" title="ZRANGE查询区间值的元素O(log(N)+M)"></a><strong>ZRANGE</strong>查询区间值的元素O(log(N)+M)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZRANGE myzset -10 100 WITHSOCRES<br></code></pre></td></tr></table></figure><h3 id="ZINTERSTORE"><a href="#ZINTERSTORE" class="headerlink" title="ZINTERSTORE"></a><strong>ZINTERSTORE</strong></h3><p>有序集合（Sorted Set）的交集并将结果存储到新有序集合的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>destination</code>：目标有序集合的键名，用于存储交集结果。</li><li><code>numkeys</code>：指定参与计算的有序集合的数量。</li><li><code>key [key ...]</code>：要参与计算交集的有序集合的键名列表。</li><li><code>WEIGHTS weight [weight ...]</code>（可选）：用于指定每个有序集合的权重，可以调整每个成员分数的权重。如果不指定权重，则默认为 1。</li><li><code>AGGREGATE SUM|MIN|MAX</code>（可选）：用于指定计算交集时的聚合方式，可以是 SUM（求和，默认）、MIN（最小值）或 MAX（最大值）。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZINTERSTORE intersection_max 2 set1 set2 AGGREGATE MAX<br></code></pre></td></tr></table></figure><h3 id="ZRANGEBULEX"><a href="#ZRANGEBULEX" class="headerlink" title="ZRANGEBULEX"></a><strong>ZRANGEBULEX</strong></h3><ul><li><p>按序返回指定成员区间的成员</p></li><li><p>区间成员的分数必须相同 </p></li><li><p>不要在分数不一致的SortSet集合中去使用 ZRANGEBYLEX 指令,因为获取的结果并不准确。</p></li><li><p>可以使用 “-“ 和 “+” 表示得分最小值和最大值</p></li><li><p>成员字符串作为二进制数组的字节数进行比较。默认是以ASCII字符集的顺序进行排列。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">zadd zset 0 a 0 aa 0 abc 0 apple 0 b 0 c 0 d 0 d1 0 dd 0 dobble 0 z 0 z1<br>ZRANGEBYLEX zset - +<br><br>ZRANGEBYLEX zset - + limit 0 3  # 其中的0是结果的其实位置（offset） 3是结果的数量（count）<br><br>ZRANGEBULEX zset [aa [c<br><br>ZRANGEBULEX zset [aa (c<br></code></pre></td></tr></table></figure><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>姓名排序</li></ul>  <img src="https://www.helloimg.com/images/2023/09/13/onxM6Y.png" alt="zrangebylex" border="0"><ul><li><p>电话号码排序</p><p>  <a href="https://www.helloimg.com/image/onx9Qg"><img src="https://www.helloimg.com/images/2023/09/13/onx9Qg.png" alt="onx9Qg.png"></a></p></li></ul></li></ul><h2 id="go-redis的基本使用"><a href="#go-redis的基本使用" class="headerlink" title="go-redis的基本使用"></a>go-redis的基本使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get github.com/go-redis/redis/v8<br></code></pre></td></tr></table></figure><h3 id="连接local-redis"><a href="#连接local-redis" class="headerlink" title="连接local  redis"></a>连接local  redis</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doCommand</span><span class="hljs-params">()</span></span> &#123;<br>rdb := redis.NewClient(&amp;redis.Options&#123;<br>Addr:     <span class="hljs-string">&quot;localhost:6379&quot;</span>,<br>Password: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 密码</span><br>DB:       <span class="hljs-number">0</span>,  <span class="hljs-comment">// 数据库</span><br>PoolSize: <span class="hljs-number">20</span>, <span class="hljs-comment">// 连接池大小</span><br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用基本的go-redis指令"><a href="#使用基本的go-redis指令" class="headerlink" title="使用基本的go-redis指令"></a>使用基本的go-redis指令</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>val, err := rdb.Get(ctx, <span class="hljs-string">&quot;key&quot;</span>).Result()<br>fmt.Println(val, err)<br><br>cmder := rdb.Get(ctx, <span class="hljs-string">&quot;key&quot;</span>)<br>val = cmder.Val()<br>err = cmder.Err()<br>fmt.Println(val, err)<br><br>err = rdb.Set(ctx, <span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;val1&quot;</span>, time.Hour).Err()<br><br>val = rdb.Get(ctx, <span class="hljs-string">&quot;key1&quot;</span>).Val()<br>fmt.Println(val, err)<br><br></code></pre></td></tr></table></figure><h3 id="go-redis中提供了redis-Nil-的错误来表示不存在的错误"><a href="#go-redis中提供了redis-Nil-的错误来表示不存在的错误" class="headerlink" title="go-redis中提供了redis.Nil 的错误来表示不存在的错误"></a>go-redis中提供了redis.Nil 的错误来表示不存在的错误</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go">rdb := redis.NewClient(&amp;redis.Options&#123;<br>Addr:     <span class="hljs-string">&quot;localhost:6379&quot;</span>,<br>Password: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 密码</span><br>DB:       <span class="hljs-number">0</span>,  <span class="hljs-comment">// 数据库</span><br>PoolSize: <span class="hljs-number">20</span>, <span class="hljs-comment">// 连接池大小</span><br>&#125;)<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>val, err := rdb.Get(ctx, <span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> errors.Is(err, redis.Nil) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;redis.Nil&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(val, err)<br></code></pre></td></tr></table></figure><h3 id="使用-Client-Do-来实现任意redis指令"><a href="#使用-Client-Do-来实现任意redis指令" class="headerlink" title="使用 Client.Do 来实现任意redis指令"></a>使用 Client.Do 来实现任意redis指令</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">rdb := redis.NewClient(&amp;redis.Options&#123;<br>Addr:     <span class="hljs-string">&quot;localhost:6379&quot;</span>,<br>Password: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 密码</span><br>DB:       <span class="hljs-number">0</span>,  <span class="hljs-comment">// 数据库</span><br>PoolSize: <span class="hljs-number">20</span>, <span class="hljs-comment">// 连接池大小</span><br>&#125;)<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>err := rdb.Do(ctx, <span class="hljs-string">&quot;set&quot;</span>, <span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;val2&quot;</span>, <span class="hljs-string">&quot;EX&quot;</span>, <span class="hljs-number">3600</span>).Err()<br>fmt.Println(err)<br><br>val, err := rdb.Do(ctx, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;key2&quot;</span>).Result()<br>fmt.Println(val, err)<br></code></pre></td></tr></table></figure><h3 id="go-redis-ZSet-的使用"><a href="#go-redis-ZSet-的使用" class="headerlink" title="go-redis ZSet 的使用"></a>go-redis ZSet 的使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go">rdb := redis.NewClient(&amp;redis.Options&#123;<br>Addr:     <span class="hljs-string">&quot;localhost:6379&quot;</span>,<br>Password: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 密码</span><br>DB:       <span class="hljs-number">0</span>,  <span class="hljs-comment">// 数据库</span><br>PoolSize: <span class="hljs-number">20</span>, <span class="hljs-comment">// 连接池大小</span><br>&#125;)<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>zsetKey := <span class="hljs-string">&quot;scores_rank&quot;</span><br><br>rank := []*redis.Z&#123;<br>&#123;Score: <span class="hljs-number">90.0</span>, Member: <span class="hljs-string">&quot;Alice&quot;</span>&#125;,<br>&#123;Score: <span class="hljs-number">90.1</span>, Member: <span class="hljs-string">&quot;Bob&quot;</span>&#125;,<br>&#123;Score: <span class="hljs-number">80.2</span>, Member: <span class="hljs-string">&quot;Cick&quot;</span>&#125;,<br>&#123;Score: <span class="hljs-number">89.2</span>, Member: <span class="hljs-string">&quot;David&quot;</span>&#125;,<br>&#123;Score: <span class="hljs-number">99.1</span>, Member: <span class="hljs-string">&quot;Eric&quot;</span>&#125;,<br>&#123;Score: <span class="hljs-number">78.1</span>, Member: <span class="hljs-string">&quot;Frank&quot;</span>&#125;,<br>&#125;<br><span class="hljs-keyword">if</span> err := rdb.ZAdd(ctx, zsetKey, rank...).Err(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;zadd failed&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;zadd success&quot;</span>)<br><br>newscore, err := rdb.ZIncrBy(ctx, zsetKey, <span class="hljs-number">-10</span>, <span class="hljs-string">&quot;Frank&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;zincrby failed&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;Frank&#x27;s score is %f\n&quot;</span>, newscore)<br><br>res := rdb.ZRevRangeWithScores(ctx, zsetKey, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>).Val()<br>fmt.Println(<span class="hljs-string">&quot;ZRevRangeWithScores&#x27;s res :&quot;</span>, res)<br><br><span class="hljs-keyword">for</span> _, z := <span class="hljs-keyword">range</span> res &#123;<br>fmt.Println(z)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Redis-Pipeline"><a href="#Redis-Pipeline" class="headerlink" title="Redis Pipeline"></a>Redis Pipeline</h3><ul><li><p>Pipeline  将发送的命令一次性打包发给Redis服务器执行，从而减少了RTT时延</p></li><li><p>Redis服务器会按照添加命令的顺序依次执行它们</p></li><li><p>Pipeline 不适合在这种情况下使用：单个命令可能需要等待前一个命令的结果，或者需要保证命令的顺序性</p></li></ul><h4 id="rdb-Pipeline"><a href="#rdb-Pipeline" class="headerlink" title="rdb.Pipeline()"></a>rdb.Pipeline()</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">pipe := rdb.Pipeline()<br><br>incr := pipe.Incr(ctx, <span class="hljs-string">&quot;pipeline_counter&quot;</span>)<br>pipe.Expire(ctx, <span class="hljs-string">&quot;pipeline_counter&quot;</span>, time.Hour)<br>Get := pipe.Get(ctx, <span class="hljs-string">&quot;pipe_test1&quot;</span>)<br>_, err := pipe.Exec(ctx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// 在执行pipe.Exec之后才能获取到结果</span><br>fmt.Println(incr.Val())<br>fmt.Println(Get.Val())<br></code></pre></td></tr></table></figure><h4 id="rdb-Pipelined"><a href="#rdb-Pipelined" class="headerlink" title="rdb.Pipelined()"></a>rdb.Pipelined()</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//set</span><br>cmds, err := rdb.Pipelined(ctx, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(pipe redis.Pipeliner)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>pipe.Set(ctx, fmt.Sprintf(<span class="hljs-string">&quot;key%d&quot;</span>, i), fmt.Sprintf(<span class="hljs-string">&quot;key%d&quot;</span>, i), <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-comment">/*for _, cmd := range cmds &#123;</span><br><span class="hljs-comment">fmt.Println(cmd.(*redis.StringCmd).Val())</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-comment">//get</span><br>cmds, err = rdb.Pipelined(ctx, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(pipe redis.Pipeliner)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>pipe.Get(ctx, fmt.Sprintf(<span class="hljs-string">&quot;key%d&quot;</span>, i))<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">for</span> _, cmd := <span class="hljs-keyword">range</span> cmds &#123;<br>fmt.Println(cmd.(*redis.StringCmd).Val())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="go-redis-事务"><a href="#go-redis-事务" class="headerlink" title="go-redis 事务"></a>go-redis 事务</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//TxPipelineDemo</span><br>pipe := rdb.TxPipeline()<br>incr := pipe.Incr(ctx, <span class="hljs-string">&quot;tx_pipeline_counter&quot;</span>)<br>pipe.Expire(ctx, <span class="hljs-string">&quot;tx_pipeline_counter&quot;</span>, time.Hour)<br>_, err := pipe.Exec(ctx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(incr.Val())<br><br><span class="hljs-comment">//TxPipelined demo TxPipelined 自动执行 Exec</span><br><span class="hljs-keyword">var</span> incr2 *redis.IntCmd<br>_, err = rdb.TxPipelined(ctx, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(pipe redis.Pipeliner)</span></span> <span class="hljs-type">error</span> &#123;<br>incr2 = pipe.Incr(ctx, <span class="hljs-string">&quot;tx_pipeline_counter&quot;</span>)<br>pipe.Expire(ctx, <span class="hljs-string">&quot;tx_pipeline_counter&quot;</span>, time.Hour)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br>fmt.Println(incr2.Val(), err)<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>等价指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">MULTI<br>INCR pipeline_counter<br>EXPIRE pipeline_counts 3600<br>EXEC<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.redis.cn/commands.html">Redis命令中心（Redis commands） – Redis中国用户组（CRUG）</a></li><li><a href="https://pkg.go.dev/github.com/go-redis/redis">redis package - github.com&#x2F;go-redis&#x2F;redis - Go Packages</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>grpc初探</title>
    <link href="/2023/09/11/grpc%E5%88%9D%E6%8E%A2/"/>
    <url>/2023/09/11/grpc%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是rpc"><a href="#什么是rpc" class="headerlink" title="什么是rpc"></a>什么是rpc</h2><p>RPC（Remote Procedure Call，远程过程调用）是一种计算机编程模型和协议，允许一个程序在另一个地址空间（通常是远程计算机上）执行函数或过程调用，就像调用本地函数一样。RPC 的目标是使分布式系统中的不同组件能够相互通信和协作，而不必手动编写复杂的网络通信代码。(chatGPT解释)</p><h2 id="是什么grpc"><a href="#是什么grpc" class="headerlink" title="是什么grpc"></a>是什么grpc</h2><p>gRPC（gRPC Remote Procedure Call）是一种高性能、跨语言的远程过程调用（RPC）框架，由Google开发并开源。它建立在HTTP&#x2F;2协议上，使用Protocol Buffers（protobuf）作为接口定义语言（IDL），支持多种编程语言。gRPC的目标是使分布式系统之间的通信更加高效、可靠和易于扩展。(chatGPT解释)</p><h2 id="protoc文件简要了解"><a href="#protoc文件简要了解" class="headerlink" title="protoc文件简要了解"></a>protoc文件简要了解</h2><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax=<span class="hljs-string">&quot;proto3&quot;</span>; <span class="hljs-comment">//指定版本号</span><br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">SearchReqeust</span> &#123;<br><span class="hljs-type">string</span> KeyWord=<span class="hljs-number">1</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231004144526377.png" alt="image-20231004144526377"></p><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20231004151742178.png" alt="image-20231004151742178"></p><h2 id="Hello-world-Demo"><a href="#Hello-world-Demo" class="headerlink" title="Hello world  Demo"></a>Hello world  Demo</h2><h3 id="编写-proto文件"><a href="#编写-proto文件" class="headerlink" title="编写 proto文件"></a>编写 proto文件</h3><h4 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package =<span class="hljs-string">&quot;server/pb&quot;</span>;<span class="hljs-comment">// 项目中import 导入生成的Go代码的名称 </span><br><br><span class="hljs-keyword">package</span> pb; <span class="hljs-comment">// proto文件模块</span><br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Greeter</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> SayHello (HelloRequest) <span class="hljs-keyword">returns</span> (HelloResponse)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloRequest</span>&#123;<br>  <span class="hljs-type">string</span>  name =<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloResponse</span>&#123;<br>  <span class="hljs-type">string</span>  reply=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Client-端"><a href="#Client-端" class="headerlink" title="Client 端"></a>Client 端</h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package =<span class="hljs-string">&quot;client/pb&quot;</span>;<br><br><span class="hljs-keyword">package</span> pb;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Greeter</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> SayHello (HelloRequest) <span class="hljs-keyword">returns</span> (HelloResponse)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloRequest</span>&#123;<br>  <span class="hljs-type">string</span>  name =<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloResponse</span>&#123;<br>  <span class="hljs-type">string</span>  reply=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="执行-proto文件"><a href="#执行-proto文件" class="headerlink" title="执行 proto文件"></a>执行 proto文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">protoc --go_out=. --go_opt=paths=source_relative \<br>--go-grpc_out=. --go-grpc_opt=paths=source_relative \<br>pb/hello.proto<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">protoc --proto_path=pb --go_out=pb --go_opt=paths=source_relative \<br>--go-grpc_out=pb --go-grpc_opt=paths=source_relative \<br>hello.proto<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">protoc -I=pb --go_out=pb --go_opt=paths=source_relative \<br>--go-grpc_out=pb --go-grpc_opt=paths=source_relative \<br>hello.proto<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--I=pb 指定protoc_path </span><br><span class="hljs-comment">--go_out 指定pb.go输出文件位置</span><br><span class="hljs-comment">--go-grpc_out 指定grpc代码的位置</span><br><br></code></pre></td></tr></table></figure><h3 id="编写-逻辑代码"><a href="#编写-逻辑代码" class="headerlink" title="编写 逻辑代码"></a>编写 逻辑代码</h3><h4 id="Server端-1"><a href="#Server端-1" class="headerlink" title="Server端"></a>Server端</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;microService_Learning/grpc_demo/server/pb&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class="hljs-comment">// hello server</span><br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedGreeterServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SayHello(ctx context.Context, request *pb.HelloRequest) (*pb.HelloResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;pb.HelloResponse&#123;Reply: <span class="hljs-string">&quot;Hello&quot;</span> + request.Name&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:9091&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;net.Listen failed,err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>s := grpc.NewServer()<br>pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)<br><span class="hljs-keyword">if</span> err = s.Serve(listener); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;s.Serve failed,err:%v\n&quot;</span>, err)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//server/main.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;microService_Learning/grpc_demo/server/pb&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class="hljs-comment">// hello_client</span><br><br><span class="hljs-keyword">const</span> (<br>defaultName = <span class="hljs-string">&quot;world&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br><span class="hljs-comment">// 注意 flag.String 返回的是 *string</span><br>addr = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:9092&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br>name = flag.String(<span class="hljs-string">&quot;name&quot;</span>, defaultName, <span class="hljs-string">&quot;Name to greet&quot;</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-comment">// 连接到server端，此处禁用安全传输</span><br><span class="hljs-comment">//conn, err := grpc.Dial(*addr, grpc.WithInsecure())</span><br>conn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;grpc.Dail failed,err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//执行rpc调用 并打印返回相应的值</span><br>client := pb.NewGreeterClient(conn)<br>ctx, cancel := context.WithTimeout(context.Background(), time.Millisecond*<span class="hljs-number">3</span>)<br><span class="hljs-keyword">defer</span> cancel()<br>r, err := client.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;counld not greet :%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>log.Printf(<span class="hljs-string">&quot;Greeting :,%s&quot;</span>, r.GetReply())<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Add-Demo"><a href="#Add-Demo" class="headerlink" title="Add Demo"></a>Add Demo</h2><h3 id="server端-proto-文件"><a href="#server端-proto-文件" class="headerlink" title="server端  proto 文件"></a>server端  proto 文件</h3><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-comment">//path: add_server/pb/add.proto</span><br>syntax=<span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">package</span> add_sever;<br><br><span class="hljs-keyword">option</span> go_package =<span class="hljs-string">&quot;add_server/pb&quot;</span>;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Add</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> CalcService(AddRequest) <span class="hljs-keyword">returns</span> (AddResponse)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">AddRequest</span>&#123;<br>  <span class="hljs-type">int64</span> x=<span class="hljs-number">1</span>;<br>  <span class="hljs-type">int64</span> y=<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">message  </span><span class="hljs-title class_">AddResponse</span>&#123;<br>  <span class="hljs-type">int64</span>  res=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="server端具体逻辑代码"><a href="#server端具体逻辑代码" class="headerlink" title="server端具体逻辑代码"></a>server端具体逻辑代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// path: add_server/main.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;add_server/pb&quot;</span><br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-string">&quot;net&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedAddServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> CalcService(ctx context.Context, in *pb.AddRequest) (*pb.AddResponse, <span class="hljs-type">error</span>) &#123;<br>sum := <span class="hljs-type">int64</span>(in.GetX()) + <span class="hljs-type">int64</span>(in.GetY())<br><span class="hljs-keyword">return</span> &amp;pb.AddResponse&#123;Res: sum&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:3000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;net.Listen failed,err:%v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>s := grpc.NewServer()<br>pb.RegisterAddServer(s, &amp;server&#123;&#125;)<br><span class="hljs-keyword">if</span> err = s.Serve(listener); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;s.Serve failed,err:%v&quot;</span>, err)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="client端-proto-文件"><a href="#client端-proto-文件" class="headerlink" title="client端  proto 文件"></a>client端  proto 文件</h3><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-comment">// path: add_client/pb/add.proto</span><br>syntax=<span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">package</span> add_sever;<br><br><span class="hljs-keyword">option</span> go_package =<span class="hljs-string">&quot;add_client/pb&quot;</span>;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Add</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> CalcService(AddRequest) <span class="hljs-keyword">returns</span> (AddResponse)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">AddRequest</span>&#123;<br>  <span class="hljs-type">int64</span> x=<span class="hljs-number">1</span>;<br>  <span class="hljs-type">int64</span> y=<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">message  </span><span class="hljs-title class_">AddResponse</span>&#123;<br>  <span class="hljs-type">int64</span>  res=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="client端具体逻辑代码"><a href="#client端具体逻辑代码" class="headerlink" title="client端具体逻辑代码"></a>client端具体逻辑代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// path: add_client/main.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;add_client/pb&quot;</span><br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>x = flag.Int(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;x的值&quot;</span>)<br>y = flag.Int(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">110</span>, <span class="hljs-string">&quot;x的值&quot;</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-comment">//建立连接</span><br>conn, err := grpc.Dial(<span class="hljs-string">&quot;127.0.0.1:3000&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;grpc.Dial failed,err:%v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">//创建 rpc client端</span><br>client := pb.NewAddClient(conn)<br>ctx, cacel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cacel()<br>resp, err := client.CalcService(ctx, &amp;pb.AddRequest&#123;<br>X: <span class="hljs-type">int64</span>(*x),<br>Y: <span class="hljs-type">int64</span>(*y),<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.CalcService failed,err:%v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>log.Printf(<span class="hljs-string">&quot;res:%v&quot;</span>, resp.GetRes())<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>参考</strong></p><ul><li><a href="https://www.liwenzhou.com/posts/Go/gRPC/#autoid-0-3-4">gRPC教程 | 李文周的博客 (liwenzhou.com)</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>grpc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Golang 学习路线总结】</title>
    <link href="/2023/09/09/%E3%80%90Golang-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E6%80%BB%E7%BB%93%E3%80%91/"/>
    <url>/2023/09/09/%E3%80%90Golang-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E6%80%BB%E7%BB%93%E3%80%91/</url>
    
    <content type="html"><![CDATA[<ul><li>Golang设计模式 <a href="https://www.bilibili.com/video/BV1Eg411m7rV/?spm_id_from=333.999.0.0&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">Easy搞定Golang设计模式(Go语言设计模式，如此简单)_哔哩哔哩_bilibili</a></li><li>B+树 <a href="https://www.bilibili.com/video/BV1kT411N7it/?spm_id_from=333.999.0.0&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">B+树,B-link树,LSM树…一个视频带你了解常用存储引擎数据结构（中）_哔哩哔哩_bilibili</a></li><li>TCP IP 八股 <a href="https://www.bilibili.com/video/BV1Mp4y1x7eX/?spm_id_from=pageDriver&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">tcp&#x2F;ip协议第10讲：tcp四次挥手以及wireshark抓包验证_哔哩哔哩_bilibili</a></li><li>Kubernetes <a href="https://www.bilibili.com/video/BV1MT411x7GH/?spm_id_from=333.999.0.0&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">完整版Kubernetes（K8S）全套入门+微服务实战项目，带你一站式深入掌握K8S核心能力_哔哩哔哩_bilibili</a></li><li>开发效率提升神器 <strong>air</strong> <a href="https://github.com/cosmtrek/air/tree/master">cosmtrek&#x2F;air: ☁️ Live reload for Go apps (github.com)</a></li><li><a href="https://www.yuque.com/aceld/lfhu8y/rg6nsf">Easy搞定Golang设计模式 (yuque.com)</a></li><li><a href="https://www.bookstack.cn/read/GoExpertProgramming/chapter01-1.1-chan.md">常见数据结构实现原理 GO专家编程》</a></li><li><a href="https://www.bilibili.com/video/BV1cr4y1s7H4/?spm_id_from=333.337.search-card.all.click&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">【Go项目实战】基于Go-zero、Xorm的网盘系统_哔哩哔哩_bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1BP4y1H7gV/?spm_id_from=333.337.search-card.all.click&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">【Go语言实战】Gin+WebSocket构建IM即时聊天Demo_哔哩哔哩_bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1Df4y1C7o5/?spm_id_from=333.337.search-card.all.click&vd_source=7e55f4c87cf718e9cce051dc48d89bb7">【Go语言战实战】日志收集项目开发（完整版）_哔哩哔哩_bilibili</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">SSL&#x2F;TLS协议运行机制的概述 - 阮一峰的网络日志 (ruanyifeng.com)</a></li></ul><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p><a href="https://yeasy.gitbook.io/docker_practice/introduction/what">什么是 Docker - Docker — 从入门到实践 (gitbook.io)</a></p><h3 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h3><p><strong>语法和数据类型</strong><br>● Golang 的基本语法规则<br>● 常量和变量<br>● 数据类型 (整型、浮点型、复数、布尔型、字符串)<br>● 类型转换</p><p><strong>数组、切片、映射</strong><br>● 数组的定义和使用<br>● 切片的定义和使用<br>● 切片的增加、删除和修改<br>● 映射的定义和使用<br>● 映射的增加、删除和修改<br>流程控制语句<br>● 条件语句 (if、switch)<br>● 循环语句 (for)<br>● 跳转语句 (break、continue、goto)<br>函数和方法<br>● 函数的定义和使用<br>● 函数的参数和返回值<br>● 可变参数函数<br>● 方法的定义和使用<br>● 方法的接收器类型 (值接收器、指针接收器)<br>面向对象编程<br>● struct 和 method<br>● 什么是 struct，如何创建和使用它<br>● struct 的方法，如何定义和使用它<br>● 值接收器和指针接收器的区别<br>● 结构体的匿名字段<br>● interface、嵌套与组合<br>● 什么是 interface，如何定义和使用它<br>● interface 的嵌套和组合，如何实现和使用它<br>● 接口的类型转换和类型断言<br>● 继承与多态<br>● Golang 不支持传统的继承机制，但可以使用组合实现类似的效果<br>● 基于 interface 的多态实现</p><h3 id="Golang-进阶篇"><a href="#Golang-进阶篇" class="headerlink" title="Golang 进阶篇"></a><strong>Golang 进阶篇</strong></h3><p><strong>错误处理和异常机制</strong><br>● panic 与 recover<br>● panic 和 recover 的作用和机制<br>● 如何正确地使用 panic 和 recover<br>● 常见 Golang 错误处理库<br>● errors 包<br>● log 包<br>● fmt 包<br>● <a href="https://link.zhihu.com/?target=http://github.com/pkg/errors">http://github.com/pkg/errors</a> 包<br>● 错误处理最佳实践<br>● 错误类型的设计和使用<br>● 错误处理的策略和技巧<br>● 错误处理的代码实践和经验<br><strong>包管理和依赖管理</strong><br>● 了解包的概念和作用<br>● 熟悉包的设计与封装规范<br>● 理解包的导入与导出规则<br>● 学习使用go modules进行包的管理<br>● 掌握依赖管理的基本概念与实践方法<br><strong>并发编程和协程机制</strong><br>● 了解并发编程的概念和优势<br>● 熟悉Goroutine的概念和使用方法<br>● 掌握Channel的概念和使用方法<br>● 理解Select语句的使用场景和应用方法<br>● 学习使用context进行上下文管理<br>● 掌握sync包的常用工具，如Mutex、WaitGroup、Cond等<br><strong>内存管理和垃圾回收机制</strong><br>● 理解Golang的内存管理机制<br>● 学习如何进行内存分配和释放<br>● 了解垃圾回收机制的基本原理和实现方式<br>● 掌握如何调整垃圾回收机制的参数进行优化</p><p><strong>标准库和常用第三方库</strong><br>● fmt包：格式化输入输出<br>● os包：操作系统接口<br>● io包：输入输出<br>● bufio包：缓冲输入输出<br>● net包：网络编程<br>● http包：HTTP客户端和服务器<br>● encoding&#x2F;json包：JSON编解码<br>● time包：时间和日期处理<br>● sync包：并发编程<br>● …<br><strong>网络编程和IO操作</strong><br>● TCP&#x2F;IP协议栈基础知识<br>● OSI七层模型和TCP&#x2F;IP四层模型<br>● TCP和UDP协议的区别和应用场景<br>● HTTP协议和HTTPS协议的区别和应用场景<br><strong>socket编程</strong><br>● socket概述和基本原理<br>● 套接字类型和地址族<br>● TCP套接字编程<br>● UDP套接字编程<br>● HTTP协议的套接字编程实现<br><strong>加密和安全编程</strong><br>● 加密基础知识<br>- 加密和解密<br>- 对称加密 vs 非对称加密<br>- 密钥和证书<br>- 数字签名<br>- SSL &#x2F; TLS协议<br>● 常见加密算法与使用<br>- 对称加密算法：如AES和3DES<br>- 非对称加密算法：如RSA和ECC<br>- 哈希算法：如SHA256和MD5<br>- 数字签名算法：如DSA和ECDSA<br><strong>数据结构</strong><br>● 数组（Array）<br>● 栈（Stack）<br>● 队列（Queue）<br>● 链表（Linked List）<br>● 哈希表（Hash Table）<br><strong>反射</strong><br>● 反射概述<br>● 反射类型<br>● 获取Value和Type信息<br>● 反射值设置与获取<br>● 反射调用方法<br><strong>性能优化技巧</strong><br>● pprof、trace的使用方法<br>- 什么是pprof和trace<br>- 如何使用pprof和trace<br>- pprof和trace的常用命令和参数<br>- pprof和trace的输出分析和解读<br>● 性能优化技巧<br>- 内存分配和GC<br>- CPU利用率和并发锁竞争<br>- 系统调用和IO阻塞<br>- 减少内存分配<br>- 减少GC压力<br>- 减少锁竞争<br>- 减少系统调用和IO阻塞<br>- 并发编程优化</p><h3 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a><strong>Web开发</strong></h3><p>介绍常见Web框架<br>● gin<br>● beego<br>路由和中间件<br><strong>配置管理</strong><br>● 配置文件解析<br>- 学习如何解析配置文件<br>- 支持不同的配置文件格式，如JSON、YAML、TOML等<br>- 学习如何使用标准库来解析配置文件<br>● viper<br>- 学习Viper库的基础概念和用法<br>- 理解如何使用Viper加载和解析配置文件<br>● godotenv<br>- 理解如何使用Godotenv库来读取环境变量<br>- 学习如何将环境变量加载到应用程序中<br>- 理解如何在不同的环境中使用环境变量，如开发、测试和生产<br><strong>日志</strong><br>● 常用日志库<br>● log：Golang标准库中提供的日志功能。尽管它非常基本，但它足够满足大部分的日志需求。<br>● logrus：功能强大的结构化日志记录库，提供了丰富的特性和可自定义的模块。<br>● zap：一个高性能、可扩展的日志库，可以在不影响程序性能的情况下打印出大量日志信息。<br>模板引擎<br>数据库编程<br>● MySQL<br>- MySQL 简介<br>- MySQL 基本操作<br>- 创建和删除数据库<br>- 创建和删除表<br>- 插入、更新和删除数据<br>- MySQL 驱动<br>- <code>database/sql</code> 包介绍<br>- <code>sql.DB</code> 和 <code>sql.Tx</code> 的使用<br>- <code>sqlx</code> 介绍<br>- <code>sqlx.DB</code> 和 <code>sqlx.Tx</code> 的使用<br>- <code>sqlx.NamedExec()</code> 和 <code>sqlx.Select()</code> 等方法使用<br>- <code>gorm</code> 介绍<br>- <code>gorm.DB</code> 和 <code>gorm.Tx</code> 的使用<br>- 模型定义和映射<br>- 查询构建器的使用<br>● Redis<br>- Redis 简介<br>- Redis 驱动<br>- <code>[http://github.com/go-redis/redis](https://link.zhihu.com/?target=http%3A//github.com/go-redis/redis)</code> 包介绍<br>- <code>redis.Client</code> 和 <code>redis.Tx</code> 的使用<br>- <code>redis.Pipeliner</code> 的使用<br>- Redis 基本操作<br>- 字符串操作<br>- 哈希表操作<br>- 列表操作<br>- 集合操作<br>- 有序集合操作<br>- Redis 分布式锁<br>● MongoDB<br>- MongoDB 简介<br>- MongoDB 驱动<br>- <code>[http://go.mongodb.org/mongo-driver/mongo](https://link.zhihu.com/?target=http%3A//go.mongodb.org/mongo-driver/mongo)</code> 包介绍<br>- <code>mongo.Client</code> 和 <code>mongo.Session</code> 的使用<br>- MongoDB 基本操作<br>- 插入、更新和删除文档<br>- 查询文档<br>- 相等条件查询<br>- 范围条件查询<br>- 正则表达式查询<br>- 排序和分页查询<br>- 聚合查询<br>- 索引的使用</p><p><strong>单元测试</strong><br>● 什么是单元测试<br>● 为什么需要单元测试<br>● Golang如何编写测试用例<br>● 测试套件和断言<br>● TDD（测试驱动开发）实践<br>● Mocking和Stubbing<br><strong>RESTful API设计</strong><br>● 什么是RESTful API<br>● REST架构原则<br>● HTTP动词和URL设计<br>● Golang中的RESTful API设计<br>● Swagger和OpenAPI规范<br><strong>Web性能优化技巧</strong><br>● 什么是Web性能优化<br>● 前端性能优化技巧<br>● 服务器端性能优化技巧<br>● Golang中的Web性能优化技巧<br>● 性能测试和性能监控<br><strong>Websocket、SSE</strong><br>● 什么是WebSocket和SSE<br>● WebSocket和SSE的应用场景<br>● Golang中的WebSocket和SSE实现<br>● WebSocket和SSE的安全问题<br>● WebSocket和SSE的性能优化</p><h2 id="实战项目"><a href="#实战项目" class="headerlink" title="实战项目"></a><strong>实战项目</strong></h2><h3 id="短链接服务"><a href="#短链接服务" class="headerlink" title="短链接服务"></a>短链接服务</h3><p>#### 第一部分：基础服务<br>- 短链接服务的功能需求与技术选型<br>- Golang 基础语法与常用库复习<br>- 使用 Gin 框架建立 HTTP 服务<br>- 使用 Redis 存储数据<br>#### 第二部分：实现短链接服务核心功能<br>- 实现短链接生成算法<br>- 实现短链接与长链接的映射关系存储与查询<br>- 实现短链接的访问与重定向<br>#### 第三部分：服务可用性与性能<br>- 实现短链接的定期过期与清理<br>- 实现短链接的访问计数与统计<br>- 使用 Nginx 反向代理与负载均衡提高服务性能</p><h3 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h3><p>#### 第一部分：基础服务<br>- 论坛服务的技术选型与功能需求<br>- 使用 Gin 框架建立 HTTP 服务<br>- 使用 MySQL 存储数据，表结构设计<br>#### 第二部分：实现论坛基础功能<br>- 实现用户注册与登录<br>- 实现帖子发布与查看<br>- 实现评论功能<br>#### 第三部分：提高服务可用性与性能<br>- 实现帖子分页查询<br>- 实现用户权限控制<br>- 使用 Redis 缓存提高服务性能</p><h3 id="反向代理网关"><a href="#反向代理网关" class="headerlink" title="反向代理网关"></a>反向代理网关</h3><p>#### 第一部分：构建基础服务<br>- 反向代理网关服务的技术选型与功能需求<br>#### 第二部分：实现反向代理网关核心功能<br>- 实现反向代理的请求转发<br>- 实现请求过滤与安全控制<br>- 实现请求记录与日志输出<br>#### 第三部分：提高服务可用性与性能<br>- 实现请求负载均衡与高可用<br>- 实现请求缓存与加速<br>- 实现请求重试与自动故障转移</p><h3 id="容器化开发"><a href="#容器化开发" class="headerlink" title="容器化开发"></a><strong>容器化开发</strong></h3><p><strong>Docker的基本概念</strong><br>● 什么是Docker<br>● Docker的优势<br>● Docker的基本架构<br><strong>Docker的基本命令</strong><br>● Docker镜像<br>● Docker容器<br>● Docker网络<br>● Docker数据卷<br><strong>Dockerfile的基本编写方法</strong><br>● Dockerfile的基本结构<br>● Dockerfile的指令<br>● Dockerfile的编写实例<br><strong>网络模式</strong><br>● Docker的网络模式<br>● Bridge模式<br>● Host模式<br>● Overlay模式<br><strong>数据卷</strong><br>● 数据卷的概念<br>● 数据卷的类型<br>● 数据卷的使用方法<br><strong>Docker Compose</strong><br>● Compose的概念<br>● Compose的基本命令<br>● Compose的使用方法<br><strong>Docker Swarm</strong><br>● Swarm的概念<br>● Swarm的基本命令<br>● Swarm的使用方法<br>Kubernetes 基本原理与使用方式<br>● Kubernetes 历史、介绍<br>- Kubernetes 的历史和背景<br>- Kubernetes 的目标和优势<br>- Kubernetes 架构和组件<br>● Kubernetes 常见概念、对象<br>- Pod、Service、Deployment、StatefulSet 等常见概念<br>- Kubernetes 对象的基本属性和关系<br>- Kubernetes 对象的生命周期管理<br>● 暴露 Kubernetes 服务<br>- Kubernetes 中的 Service 对象<br>- Service 的类型和作用<br>- Service 的创建和配置<br>- Service 的暴露和访问</p><h3 id="微服务开发"><a href="#微服务开发" class="headerlink" title="微服务开发"></a><strong>微服务开发</strong></h3><p><strong>微服务概念</strong><br>● 什么是微服务？<br>● 微服务与单体应用的区别<br>● 微服务的优点和缺点<br>● 微服务的基本组件：服务发现、负载均衡、API 网关等<br>分布式系统的常见问题<br>● 分布式系统的定义和特点<br>● CAP 理论的基本概念<br>● 一致性协议：Paxos、Raft 等<br>● 分布式系统的故障类型和应对策略<br><strong>微服务架构设计</strong><br>● 微服务架构的基本原则<br>● 微服务间通信方式：同步、异步、消息队列等<br>● 微服务的部署方式：容器化、虚拟化、云原生等<br>● 微服务的监控和治理：服务注册发现、链路追踪、容错等<br><strong>微服务框架</strong><br>● gRPC介绍<br>● Protocol Buffers语法<br>● 使用gRPC进行微服务开发<br>● 搭建gRPC服务端和客户端<br>● 实现gRPC服务端和客户端的双向流<br>● Interceptor<br>● 什么是拦截器<br>● gRPC拦截器的分类<br>● 实现gRPC拦截器的方法<br>● gRPC拦截器的应用场景<br>● 流式RPC<br>● 什么是流式RPC<br>● 实现流式RPC的方法<br>● 流式RPC的应用场景<br><strong>服务注册与发现、注册中心</strong><br>● 什么是服务注册与发现<br>● Etcd的介绍<br>● 使用Etcd进行服务注册与发现<br>● Consul的介绍<br>● 使用Consul进行服务注册与发现<br><strong>监控、日志、分布式追踪</strong><br>● 什么是监控、日志、分布式追踪<br>● Prometheus的介绍<br>● 使用Prometheus进行监控<br>● Grafana的介绍<br>● 使用Grafana进行数据可视化<br>● ELK的介绍<br>● 使用ELK进行日志收集和分析<br>● Jaeger的介绍<br>● 使用Jaeger进行分布式追踪</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习路线记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>傻蛋速成python</title>
    <link href="/2023/09/07/%E5%82%BB%E8%9B%8B%E9%80%9F%E6%88%90python/"/>
    <url>/2023/09/07/%E5%82%BB%E8%9B%8B%E9%80%9F%E6%88%90python/</url>
    
    <content type="html"><![CDATA[<p>格式化 </p><ul><li></li></ul><p>%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;%s is %d years old&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> % (<span class="hljs-string">&quot;yst&quot;</span>,<span class="hljs-number">123</span>)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;yst is 123 years old&#x27;</span><br></code></pre></td></tr></table></figure><p>format</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#123;:d&#125; + &#123;:d&#125; =&#123;:d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1</span>+<span class="hljs-number">21</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#123;1:d&#125; + &#123;0:d&#125; =&#123;2:d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1</span>+<span class="hljs-number">21</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#123;0:d&#125; + &#123;0:d&#125; + &#123;1:d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>)<br></code></pre></td></tr></table></figure><p>f</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">f `&#123;name&#125; <span class="hljs-keyword">is</span> &#123;age&#125; years old`<br></code></pre></td></tr></table></figure><p>结构控制 </p><p>for语句</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">scores=[<span class="hljs-number">90</span>,<span class="hljs-number">45</span>,<span class="hljs-number">85</span>,<span class="hljs-number">76</span>,<span class="hljs-number">89</span>]<br><br><span class="hljs-keyword">for</span> score <span class="hljs-keyword">in</span> scores:<br>    <span class="hljs-keyword">if</span> score &gt;=<span class="hljs-number">60</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;PASS&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed&quot;</span>)       <br></code></pre></td></tr></table></figure><p>in range</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">scores=[<span class="hljs-number">90</span>,<span class="hljs-number">45</span>,<span class="hljs-number">85</span>,<span class="hljs-number">76</span>,<span class="hljs-number">89</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-built_in">len</span>(scores)):<br>    <span class="hljs-built_in">print</span>(scores[i])<br><br></code></pre></td></tr></table></figure><p>in enumerate</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">scores = [<span class="hljs-number">90</span>, <span class="hljs-number">45</span>, <span class="hljs-number">85</span>, <span class="hljs-number">76</span>, <span class="hljs-number">89</span>, <span class="hljs-number">900</span>]<br><br><span class="hljs-keyword">for</span> i, score <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(scores, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(i, score)<br><br><br></code></pre></td></tr></table></figure><p>in zip</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">scores = [<span class="hljs-number">90</span>, <span class="hljs-number">45</span>, <span class="hljs-number">85</span>, <span class="hljs-number">76</span>, <span class="hljs-number">89</span>, <span class="hljs-number">900</span>]<br>names = [<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>]<br><br><span class="hljs-keyword">for</span> name, score <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(names, scores):<br>    <span class="hljs-built_in">print</span>(name, score)<br><br></code></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>hash仅支持 immutable的对象 str &#x2F;int &#x2F;bool&#x2F;float&#x2F;tuple</p><h2 id="func"><a href="#func" class="headerlink" title="func"></a>func</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foobar</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this is a python func&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name=<span class="hljs-string">&quot;Alice&quot;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;this is a comment&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;hello <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br><br><br>foobar()<br>greet()<br>greet(<span class="hljs-string">&quot;name&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    res = x + y<br>    <span class="hljs-keyword">return</span> res<br><br><br>sum_res = add(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p>闭包 函数作为返回值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 函数的闭包</span><br><span class="hljs-comment"># 一个函数A中定义了函数B，并且另函数B调用了函数A的参数，且返回函数B作为返回值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>(<span class="hljs-params">y</span>):<br>        <span class="hljs-keyword">return</span> x + y<br><br>    <span class="hljs-keyword">return</span> f3<br><br><span class="hljs-built_in">print</span>(f2(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>))<br><br></code></pre></td></tr></table></figure><p>lambda表达式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * x ** <span class="hljs-number">2</span> + <span class="hljs-number">9</span> * x + <span class="hljs-number">10</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">diff</span>(<span class="hljs-params">x, func</span>):<br>    delta = <span class="hljs-number">1e-6</span><br>    <span class="hljs-keyword">return</span> (func(x + delta) - func(x)) / delta<br><br><br><span class="hljs-built_in">print</span>(diff(<span class="hljs-number">2</span>, f))<br><br><span class="hljs-built_in">print</span>(diff(<span class="hljs-number">1</span>, <span class="hljs-keyword">lambda</span> x: <span class="hljs-number">2</span> * x ** <span class="hljs-number">3</span> + <span class="hljs-number">9</span> * x + <span class="hljs-number">9</span>))<br><br></code></pre></td></tr></table></figure><p><code>Chatgpt对于 python中函数是一等公民的解释</code></p><p>在编程语言中，”一等公民”（First-Class Citizen）是一个概念，用来描述对某种特性（通常是数据类型）的支持程度。如果一种编程语言将某个特性视为一等公民，那么该特性就会享有与其他标准数据类型相同的权利和特性。在Python中，函数被视为一等公民，这意味着函数在语言中具有特殊的地位和权利：</p><p>以下是Python中函数被称为一等公民的原因和表现：</p><ol><li><p><strong>可以赋值给变量</strong>：您可以将函数赋值给变量，然后通过该变量调用函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Hello, <span class="hljs-subst">&#123;name&#125;</span>!&quot;</span>)<br><br>my_function = greet  <span class="hljs-comment"># 将函数赋值给变量</span><br>my_function(<span class="hljs-string">&quot;Alice&quot;</span>)  <span class="hljs-comment"># 通过变量调用函数</span><br></code></pre></td></tr></table></figure></li><li><p><strong>可以作为参数传递</strong>：您可以将函数作为参数传递给其他函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply</span>(<span class="hljs-params">func, x</span>):<br>    <span class="hljs-keyword">return</span> func(x)<br><br>result = apply(square, <span class="hljs-number">5</span>)  <span class="hljs-comment"># 将函数 square 作为参数传递给 apply 函数</span><br></code></pre></td></tr></table></figure><p>在上述示例中，<code>apply</code> 函数接受一个函数作为参数，然后将该函数应用于给定的参数 <code>x</code>。</p></li><li><p><strong>可以作为返回值</strong>：您可以从一个函数中返回另一个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">multiplier</span>(<span class="hljs-params">factor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">return</span> x * factor<br>    <span class="hljs-keyword">return</span> multiply<br><br>double = multiplier(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 返回一个函数</span><br>result = double(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 调用返回的函数</span><br></code></pre></td></tr></table></figure><p>在上述示例中，<code>multiplier</code> 函数返回了另一个函数 <code>multiply</code>，并且可以通过 <code>double</code> 变量来调用返回的函数。</p></li><li><p><strong>可以存储在数据结构中</strong>：函数可以存储在列表、字典或其他数据结构中，以便在后续使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">functions = [square, cube, add]<br>result = functions[<span class="hljs-number">0</span>](<span class="hljs-number">3</span>)  <span class="hljs-comment"># 从列表中获取函数并调用它</span><br></code></pre></td></tr></table></figure><p>上述示例中，<code>functions</code> 列表存储了不同的函数，可以根据需要选择并调用其中的一个。</p></li></ol><p>因此，Python中的函数被称为一等公民，因为它们具有与其他数据类型（如整数、字符串和列表）相同的权利和特性。这种特性使得Python非常适合于函数式编程范式，并允许编写更灵活和可复用的代码。函数作为一等公民的特性在编写高阶函数和实现回调机制等编程任务时非常有用。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 交换两个元素的值</span><br>x, y = <span class="hljs-number">30</span>, <span class="hljs-number">50</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x=%d,y=%d&#x27;</span> % (x, y))<br>t = x<br>x = y<br>y = x<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x=%d,y=%d&quot;</span> % (x, y))<br><br>x, y = <span class="hljs-number">30</span>, <span class="hljs-number">50</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x=%d,y=%d&quot;</span> % (x, y))<br>x, y = y, x<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x=%d y=%d&quot;</span> % (x, y))<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">a, b, c, x = <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1.414</span><br>res = a * x ** <span class="hljs-number">3</span> + b * x ** <span class="hljs-number">2</span> + c<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;多项式的值为:<span class="hljs-subst">&#123;res:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sympy <span class="hljs-keyword">as</span> sp<br><br>x = sp.symbols(<span class="hljs-string">&#x27;x&#x27;</span>)<br><br>f = <span class="hljs-number">5</span> * x ** <span class="hljs-number">2</span> - <span class="hljs-number">4</span> * x - <span class="hljs-number">1</span><br><br>solution = sp.solve((f, x))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;方程的解为:<span class="hljs-subst">&#123;solution&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">a, b, c, x, y, z = <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1.414</span>, <span class="hljs-number">1.732</span>, <span class="hljs-number">2.712</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a=<span class="hljs-subst">&#123;a:&lt;<span class="hljs-number">7</span>&#125;</span> b=<span class="hljs-subst">&#123;b:&lt;<span class="hljs-number">7</span>&#125;</span> c=<span class="hljs-subst">&#123;c:&lt;<span class="hljs-number">7</span>&#125;</span>&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;x=<span class="hljs-subst">&#123;x:&lt;<span class="hljs-number">7.3</span>f&#125;</span> y=<span class="hljs-subst">&#123;y:&lt;<span class="hljs-number">7.3</span>f&#125;</span> z=<span class="hljs-subst">&#123;z:&lt;<span class="hljs-number">7.3</span>f&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py">num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个三位的正整数&quot;</span>))<br><br>gewei = num % <span class="hljs-number">10</span><br>shiwei = (num // <span class="hljs-number">10</span>) % <span class="hljs-number">10</span><br>baiwei = num // <span class="hljs-number">100</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;百位数字:<span class="hljs-subst">&#123;baiwei&#125;</span>&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;十位数字<span class="hljs-subst">&#123;shiwei&#125;</span>&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;个位数字<span class="hljs-subst">&#123;gewei&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">c = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入设施温度&quot;</span>))<br><br>f = (<span class="hljs-number">9</span> / <span class="hljs-number">5</span>) * c + <span class="hljs-number">32</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;华氏温度为:<span class="hljs-subst">&#123;f:<span class="hljs-number">.1</span>f&#125;</span>度&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">result = math.exp(<span class="hljs-number">3.14</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e 的3.14次方的结果是<span class="hljs-subst">&#123;result:<span class="hljs-number">.5</span>f&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 输入三角形的三条边长</span><br>a = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入第一条边的长度：&quot;</span>))<br>b = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入第二条边的长度：&quot;</span>))<br>c = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入第三条边的长度：&quot;</span>))<br><br><span class="hljs-comment"># 计算三角形的半周长</span><br>s = (a + b + c) / <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 计算三角形的面积</span><br>area = math.sqrt(s * (s - a) * (s - b) * (s - c))<br><br><span class="hljs-comment"># 打印结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;三角形的面积是：<span class="hljs-subst">&#123;area:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">radius = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入球的半径:&quot;</span>))<br><br>volume = (<span class="hljs-number">4</span> / <span class="hljs-number">3</span>) * math.pi * radius ** <span class="hljs-number">3</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;球的体积是:<span class="hljs-subst">&#123;volume:<span class="hljs-number">.1</span>f&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">v1 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;第一个数字&quot;</span>))<br><br>v2 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;第二个数字&quot;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;平均值:<span class="hljs-subst">&#123;(v1 + v2) / <span class="hljs-number">2</span>:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py">r = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;圆柱形的半径&quot;</span>))<br><br>h = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;圆柱体的高&quot;</span>))<br><br>res1 = <span class="hljs-number">2</span> * math.pi * (r ** <span class="hljs-number">2</span>) + <span class="hljs-number">2</span> * math.pi * r * h<br><br>res2 = math.pi * (r ** <span class="hljs-number">2</span>) * h<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;圆柱体的表面积:<span class="hljs-subst">&#123;res1:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;圆柱体的体积:<span class="hljs-subst">&#123;res2:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker的基本使用</title>
    <link href="/2023/09/06/docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/06/docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> golang:alpine<br><br><span class="hljs-comment"># Set necessary environmet variables needed for our image</span><br><span class="hljs-keyword">ENV</span> GO111MODULE=on \<br>    CGO_ENABLED=<span class="hljs-number">0</span> \<br>    GOOS=linux \<br>    GOARCH=amd64<br><br><span class="hljs-comment"># Move to working directory /build</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /build</span><br><br><span class="hljs-comment"># Copy and download dependency using go mod</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> go.mod .</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> go.sum .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> go mod download</span><br><br><span class="hljs-comment"># Copy the code into the container</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-comment"># Build the application</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> go build -o main .</span><br><br><span class="hljs-comment"># Move to /dist directory as the place for resulting binary folder</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /dist</span><br><br><span class="hljs-comment"># Copy binary from build to main folder</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cp</span> /build/main .</span><br><br><span class="hljs-comment"># Export necessary port</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3000</span><br><br><span class="hljs-comment"># Command to run when starting the container</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/dist/main&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>docker build . -t go-dock</p><p>docker run -p 3000:3000 go-dock</p><p>左边的 3000 是主机（你的计算机）上的端口号。<br>       右边的 3000 是Docker容器内部的端口号。</p><p>​</p><p>go mod tidy</p><p>go mod init [mod-name]</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell编程</title>
    <link href="/2023/09/02/shell%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/09/02/shell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p> <code>#!/bin/bash</code>。这是一个典型的Bash脚本的开头，指定了脚本要使用的解释器，即Bash。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Author : Forrest</span><br><br><span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">ls</span><br><span class="hljs-built_in">mkdir</span> testDir<br><br></code></pre></td></tr></table></figure><p><strong>添加执行权限</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x filename<br></code></pre></td></tr></table></figure><p>用read命令来获取keyboard的输入，并将输入结果赋值给变量 The following script uses the <strong>read</strong> command which takes the input from the keyboard and assigns it as the value of the variable PERSON and finally prints it on STDOUT.</p><p>用$符号来获取变量的值 To access the value stored in a variable, prefix its name with the dollar sign (<strong>$</strong>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Author : Forrest</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;what is your name&quot;</span><br><span class="hljs-built_in">read</span> name<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello ,<span class="hljs-variable">$name</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Using-Variables"><a href="#Using-Variables" class="headerlink" title="Using Variables"></a>Using Variables</h2><h4 id="Defining-Variables"><a href="#Defining-Variables" class="headerlink" title="Defining  Variables"></a>Defining  Variables</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">variable_name=variable_value<br><br>NAME=<span class="hljs-string">&quot;Forrest&quot;</span><br>NUMBER=123<br></code></pre></td></tr></table></figure><h4 id="Accessing-values"><a href="#Accessing-values" class="headerlink" title="Accessing values"></a>Accessing values</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">NAME=<span class="hljs-string">&quot;Forrest&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$NAME</span><br></code></pre></td></tr></table></figure><h4 id="Read-only-Variables"><a href="#Read-only-Variables" class="headerlink" title="Read-only Variables"></a>Read-only Variables</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">NAME=<span class="hljs-string">&quot;Forrest&quot;</span><br><span class="hljs-built_in">readonly</span> NAME<br>NAME=<span class="hljs-string">&quot;another name&quot;</span><br></code></pre></td></tr></table></figure><p>err: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">-bash: NAME: <span class="hljs-built_in">readonly</span> variable<br></code></pre></td></tr></table></figure><p><code>readonly</code> 变量的只读属性是永久性的，不能在脚本中或shell会话中被修改或取消。Unsetting Variables</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">unset</span> vaiable_name<br></code></pre></td></tr></table></figure><p>Special Variables </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;what is your name&quot;</span><br><span class="hljs-built_in">read</span> name<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello ,<span class="hljs-variable">$name</span>&quot;</span><br><span class="hljs-comment"># special variable</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;current script pid: $$&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;filename : <span class="hljs-variable">$0</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;first parameter: <span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;second parameter :<span class="hljs-variable">$2</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;quoted values <span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;quoted values $*&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;total number of quoted  <span class="hljs-variable">$#</span>&quot;</span><br><br><span class="hljs-keyword">for</span> TOKEN <span class="hljs-keyword">in</span> $*<br><span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TOKEN</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;exit status $?&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Using-Shell-Arrays"><a href="#Using-Shell-Arrays" class="headerlink" title="Using Shell Arrays"></a>Using Shell Arrays</h2><p>查看shell是 ksh 还是bash</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\Forrest\AppData\Roaming\Typora\typora-user-images\image-20230830201146754.png" alt="image-20230830201146754"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>Arr[0]=<span class="hljs-string">&quot;0&quot;</span><br>Arr[1]=<span class="hljs-string">&quot;1&quot;</span><br>Arr[2]=<span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;first item <span class="hljs-variable">$&#123;Arr[0]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;first method <span class="hljs-variable">$&#123;Arr[*]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;second method <span class="hljs-variable">$&#123;Arr[@]&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Decision-Making"><a href="#Decision-Making" class="headerlink" title="Decision Making"></a>Decision Making</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">a=10<br>b=20<br><span class="hljs-keyword">if</span> [<span class="hljs-variable">$a</span>==<span class="hljs-variable">$b</span>]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a equlas b&quot;</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a not equals b&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="if-elseif"><a href="#if-elseif" class="headerlink" title="if elseif"></a>if elseif</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>a=10<br>b=20<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a equals b&quot;</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a is greater than b&quot;</span><br><span class="hljs-keyword">elif</span>  [ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a is less than b&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>​</p><h3 id="case-esac"><a href="#case-esac" class="headerlink" title="case .. esac"></a>case .. esac</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>option=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$&#123;option&#125;</span> <span class="hljs-keyword">in</span><br>        -f) FILE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2&#125;</span>&quot;</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;File name is <span class="hljs-variable">$FILE</span>&quot;</span><br>                        ;;<br>        -d) DIR=<span class="hljs-variable">$&#123;2&#125;</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Dir name is <span class="hljs-variable">$DIR</span>&quot;</span><br>                        ;;<br>        *)<br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;`basename <span class="hljs-variable">$&#123;0&#125;</span> `:usage :[-f file] | [-d directory]&quot;</span><br>                <span class="hljs-built_in">exit</span> 1<br>                ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h2 id="IO-Redirection"><a href="#IO-Redirection" class="headerlink" title="IO Redirection"></a>IO Redirection</h2><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p><strong>who</strong> command which redirects the complete output of the command in the users file.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">who</span> &gt; <span class="hljs-built_in">users</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> line 1 &gt;  <span class="hljs-built_in">users</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> line 2 &gt;&gt; uses<br></code></pre></td></tr></table></figure><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a><strong>eval</strong></h2><p><code>eval</code> 是一个在Shell脚本中用于执行字符串作为命令的特殊命令。它会将传递给它的字符串作为Shell命令进行解释和执行。<code>eval</code> 常用于动态生成和执行命令，可以将字符串中的变量、表达式和命令进行求值和执行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">x=5<br>y=3<br>operation=<span class="hljs-string">&quot;x+y&quot;</span><br>result=$(<span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;echo \$(( <span class="hljs-variable">$operation</span> ))&quot;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Result: <span class="hljs-variable">$result</span>&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="使用多行注释"><a href="#使用多行注释" class="headerlink" title="使用多行注释"></a>使用多行注释</h2><p>你可以使用 <code>:&lt;&lt;COMMENT</code> 和 <code>COMMENT</code> 来实现多行注释。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">bashCopy code:&lt;&lt;<span class="hljs-string">COMMENT</span><br><span class="hljs-string">这是多行注释的内容。</span><br><span class="hljs-string">可以有多行。</span><br><span class="hljs-string">这里可以写注释。</span><br><span class="hljs-string">COMMENT</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这是实际的代码。&quot;</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，冒号 <code>:</code> 后面的 <code>&lt;&lt;COMMENT</code> 表示将会读取从 <code>COMMENT</code> 开始的多行文本，这部分文本会被当作注释而被忽略。当Shell执行脚本时，它会跳过这些注释内容。</p><h2 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h2><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p><strong>parameter :  + - &#x3D;</strong></p><p>+表示全局（User group other）添加某些权限</p><p>-表示全局（User Group Other） 删除某些权限</p><p>&#x3D;表示设置（User | Group | Other）的权限是什么</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> o+wx testfile<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 743 testfile<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/01/hello-world/"/>
    <url>/2023/08/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
